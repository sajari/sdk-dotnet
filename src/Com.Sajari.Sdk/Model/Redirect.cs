/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// Redirect contains a target that you can redirect users to if their search query matches a certain condition.
    /// </summary>
    [DataContract(Name = "Redirect")]
    public partial class Redirect : IEquatable<Redirect>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Redirect" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Redirect() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Redirect" /> class.
        /// </summary>
        /// <param name="condition">A condition expression applied to a search request that determines whether a search is redirected.  For example, to redirect if the user&#39;s query is &#x60;apples&#x60;, set condition to &#x60;q &#x3D; &#39;apples&#39;&#x60;. (required).</param>
        /// <param name="disabled">If disabled, the redirect is never triggered..</param>
        /// <param name="target">The target to redirect the user to if their query matches &#x60;condition&#x60;.  For searches performed in a browser, target is usually a URL but it can be any value that your integration can interpret as a redirect.  For example, for URLs that you need to resolve at runtime, target might be a URL template string. For apps, target might be a unique identifier used to send the user to the correct view. (required).</param>
        public Redirect(string condition = default(string), bool disabled = default(bool), string target = default(string))
        {
            // to ensure "condition" is required (not null)
            if (condition == null) {
                throw new ArgumentNullException("condition is a required property for Redirect and cannot be null");
            }
            this.Condition = condition;
            // to ensure "target" is required (not null)
            if (target == null) {
                throw new ArgumentNullException("target is a required property for Redirect and cannot be null");
            }
            this.Target = target;
            this.Disabled = disabled;
        }

        /// <summary>
        /// Output only. The ID of the collection that owns this redirect.
        /// </summary>
        /// <value>Output only. The ID of the collection that owns this redirect.</value>
        [DataMember(Name = "collection_id", EmitDefaultValue = false)]
        public string CollectionId { get; private set; }

        /// <summary>
        /// Returns false as CollectionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCollectionId()
        {
            return false;
        }
        /// <summary>
        /// A condition expression applied to a search request that determines whether a search is redirected.  For example, to redirect if the user&#39;s query is &#x60;apples&#x60;, set condition to &#x60;q &#x3D; &#39;apples&#39;&#x60;.
        /// </summary>
        /// <value>A condition expression applied to a search request that determines whether a search is redirected.  For example, to redirect if the user&#39;s query is &#x60;apples&#x60;, set condition to &#x60;q &#x3D; &#39;apples&#39;&#x60;.</value>
        [DataMember(Name = "condition", IsRequired = true, EmitDefaultValue = false)]
        public string Condition { get; set; }

        /// <summary>
        /// Output only. Time the redirect was created.
        /// </summary>
        /// <value>Output only. Time the redirect was created.</value>
        [DataMember(Name = "create_time", EmitDefaultValue = false)]
        public DateTime CreateTime { get; private set; }

        /// <summary>
        /// Returns false as CreateTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreateTime()
        {
            return false;
        }
        /// <summary>
        /// If disabled, the redirect is never triggered.
        /// </summary>
        /// <value>If disabled, the redirect is never triggered.</value>
        [DataMember(Name = "disabled", EmitDefaultValue = true)]
        public bool Disabled { get; set; }

        /// <summary>
        /// Output only. The redirect&#39;s ID.
        /// </summary>
        /// <value>Output only. The redirect&#39;s ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// The target to redirect the user to if their query matches &#x60;condition&#x60;.  For searches performed in a browser, target is usually a URL but it can be any value that your integration can interpret as a redirect.  For example, for URLs that you need to resolve at runtime, target might be a URL template string. For apps, target might be a unique identifier used to send the user to the correct view.
        /// </summary>
        /// <value>The target to redirect the user to if their query matches &#x60;condition&#x60;.  For searches performed in a browser, target is usually a URL but it can be any value that your integration can interpret as a redirect.  For example, for URLs that you need to resolve at runtime, target might be a URL template string. For apps, target might be a unique identifier used to send the user to the correct view.</value>
        [DataMember(Name = "target", IsRequired = true, EmitDefaultValue = false)]
        public string Target { get; set; }

        /// <summary>
        /// Output only. Time the redirect was last updated.
        /// </summary>
        /// <value>Output only. Time the redirect was last updated.</value>
        [DataMember(Name = "update_time", EmitDefaultValue = false)]
        public DateTime UpdateTime { get; private set; }

        /// <summary>
        /// Returns false as UpdateTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdateTime()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Redirect {\n");
            sb.Append("  CollectionId: ").Append(CollectionId).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Redirect);
        }

        /// <summary>
        /// Returns true if Redirect instances are equal
        /// </summary>
        /// <param name="input">Instance of Redirect to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Redirect input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CollectionId == input.CollectionId ||
                    (this.CollectionId != null &&
                    this.CollectionId.Equals(input.CollectionId))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    (this.CreateTime != null &&
                    this.CreateTime.Equals(input.CreateTime))
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    this.Disabled.Equals(input.Disabled)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.UpdateTime == input.UpdateTime ||
                    (this.UpdateTime != null &&
                    this.UpdateTime.Equals(input.UpdateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CollectionId != null)
                {
                    hashCode = (hashCode * 59) + this.CollectionId.GetHashCode();
                }
                if (this.Condition != null)
                {
                    hashCode = (hashCode * 59) + this.Condition.GetHashCode();
                }
                if (this.CreateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Disabled.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Target != null)
                {
                    hashCode = (hashCode * 59) + this.Target.GetHashCode();
                }
                if (this.UpdateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
