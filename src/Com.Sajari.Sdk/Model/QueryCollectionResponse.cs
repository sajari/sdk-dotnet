/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// QueryCollectionResponse
    /// </summary>
    [DataContract(Name = "QueryCollectionResponse")]
    public partial class QueryCollectionResponse : IEquatable<QueryCollectionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryCollectionResponse" /> class.
        /// </summary>
        /// <param name="activePromotions">A list of the promotions activated when running the query..</param>
        /// <param name="aggregateFilters">The aggregates run with filters..</param>
        /// <param name="aggregates">The aggregates returned by the query..</param>
        /// <param name="featureScoreWeight">The weight applied to the features in the query, used for analyzing the index, neural and feature components for results.  For each result:  &#x60;&#x60;&#x60; score &#x3D; max(index_score, neural_score) * (1 - feature_score_weight) +         feature_score * feature_score_weight &#x60;&#x60;&#x60;.</param>
        /// <param name="pipeline">pipeline.</param>
        /// <param name="processingDuration">The total time taken to perform the query..</param>
        /// <param name="redirects">A mapping of redirects triggered for all possible variations of the query..</param>
        /// <param name="results">The results returned by the query..</param>
        /// <param name="totalSize">The total number of results that match the query..</param>
        /// <param name="variables">The modified variables returned by the pipeline after it has finished processing..</param>
        public QueryCollectionResponse(List<ActivePromotion> activePromotions = default(List<ActivePromotion>), Dictionary<string, QueryAggregateResult> aggregateFilters = default(Dictionary<string, QueryAggregateResult>), Dictionary<string, QueryAggregateResult> aggregates = default(Dictionary<string, QueryAggregateResult>), double featureScoreWeight = default(double), QueryCollectionResponsePipeline pipeline = default(QueryCollectionResponsePipeline), string processingDuration = default(string), Dictionary<string, RedirectResult> redirects = default(Dictionary<string, RedirectResult>), List<QueryResult> results = default(List<QueryResult>), string totalSize = default(string), Dictionary<string, Object> variables = default(Dictionary<string, Object>))
        {
            this.ActivePromotions = activePromotions;
            this.AggregateFilters = aggregateFilters;
            this.Aggregates = aggregates;
            this.FeatureScoreWeight = featureScoreWeight;
            this.Pipeline = pipeline;
            this.ProcessingDuration = processingDuration;
            this.Redirects = redirects;
            this.Results = results;
            this.TotalSize = totalSize;
            this.Variables = variables;
        }

        /// <summary>
        /// A list of the promotions activated when running the query.
        /// </summary>
        /// <value>A list of the promotions activated when running the query.</value>
        [DataMember(Name = "active_promotions", EmitDefaultValue = false)]
        public List<ActivePromotion> ActivePromotions { get; set; }

        /// <summary>
        /// The aggregates run with filters.
        /// </summary>
        /// <value>The aggregates run with filters.</value>
        [DataMember(Name = "aggregate_filters", EmitDefaultValue = false)]
        public Dictionary<string, QueryAggregateResult> AggregateFilters { get; set; }

        /// <summary>
        /// The aggregates returned by the query.
        /// </summary>
        /// <value>The aggregates returned by the query.</value>
        [DataMember(Name = "aggregates", EmitDefaultValue = false)]
        public Dictionary<string, QueryAggregateResult> Aggregates { get; set; }

        /// <summary>
        /// The weight applied to the features in the query, used for analyzing the index, neural and feature components for results.  For each result:  &#x60;&#x60;&#x60; score &#x3D; max(index_score, neural_score) * (1 - feature_score_weight) +         feature_score * feature_score_weight &#x60;&#x60;&#x60;
        /// </summary>
        /// <value>The weight applied to the features in the query, used for analyzing the index, neural and feature components for results.  For each result:  &#x60;&#x60;&#x60; score &#x3D; max(index_score, neural_score) * (1 - feature_score_weight) +         feature_score * feature_score_weight &#x60;&#x60;&#x60;</value>
        [DataMember(Name = "feature_score_weight", EmitDefaultValue = false)]
        public double FeatureScoreWeight { get; set; }

        /// <summary>
        /// Gets or Sets Pipeline
        /// </summary>
        [DataMember(Name = "pipeline", EmitDefaultValue = false)]
        public QueryCollectionResponsePipeline Pipeline { get; set; }

        /// <summary>
        /// The total time taken to perform the query.
        /// </summary>
        /// <value>The total time taken to perform the query.</value>
        [DataMember(Name = "processing_duration", EmitDefaultValue = false)]
        public string ProcessingDuration { get; set; }

        /// <summary>
        /// A mapping of redirects triggered for all possible variations of the query.
        /// </summary>
        /// <value>A mapping of redirects triggered for all possible variations of the query.</value>
        [DataMember(Name = "redirects", EmitDefaultValue = false)]
        public Dictionary<string, RedirectResult> Redirects { get; set; }

        /// <summary>
        /// The results returned by the query.
        /// </summary>
        /// <value>The results returned by the query.</value>
        [DataMember(Name = "results", EmitDefaultValue = false)]
        public List<QueryResult> Results { get; set; }

        /// <summary>
        /// The total number of results that match the query.
        /// </summary>
        /// <value>The total number of results that match the query.</value>
        [DataMember(Name = "total_size", EmitDefaultValue = false)]
        public string TotalSize { get; set; }

        /// <summary>
        /// The modified variables returned by the pipeline after it has finished processing.
        /// </summary>
        /// <value>The modified variables returned by the pipeline after it has finished processing.</value>
        [DataMember(Name = "variables", EmitDefaultValue = false)]
        public Dictionary<string, Object> Variables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryCollectionResponse {\n");
            sb.Append("  ActivePromotions: ").Append(ActivePromotions).Append("\n");
            sb.Append("  AggregateFilters: ").Append(AggregateFilters).Append("\n");
            sb.Append("  Aggregates: ").Append(Aggregates).Append("\n");
            sb.Append("  FeatureScoreWeight: ").Append(FeatureScoreWeight).Append("\n");
            sb.Append("  Pipeline: ").Append(Pipeline).Append("\n");
            sb.Append("  ProcessingDuration: ").Append(ProcessingDuration).Append("\n");
            sb.Append("  Redirects: ").Append(Redirects).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  TotalSize: ").Append(TotalSize).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryCollectionResponse);
        }

        /// <summary>
        /// Returns true if QueryCollectionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryCollectionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryCollectionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActivePromotions == input.ActivePromotions ||
                    this.ActivePromotions != null &&
                    input.ActivePromotions != null &&
                    this.ActivePromotions.SequenceEqual(input.ActivePromotions)
                ) && 
                (
                    this.AggregateFilters == input.AggregateFilters ||
                    this.AggregateFilters != null &&
                    input.AggregateFilters != null &&
                    this.AggregateFilters.SequenceEqual(input.AggregateFilters)
                ) && 
                (
                    this.Aggregates == input.Aggregates ||
                    this.Aggregates != null &&
                    input.Aggregates != null &&
                    this.Aggregates.SequenceEqual(input.Aggregates)
                ) && 
                (
                    this.FeatureScoreWeight == input.FeatureScoreWeight ||
                    this.FeatureScoreWeight.Equals(input.FeatureScoreWeight)
                ) && 
                (
                    this.Pipeline == input.Pipeline ||
                    (this.Pipeline != null &&
                    this.Pipeline.Equals(input.Pipeline))
                ) && 
                (
                    this.ProcessingDuration == input.ProcessingDuration ||
                    (this.ProcessingDuration != null &&
                    this.ProcessingDuration.Equals(input.ProcessingDuration))
                ) && 
                (
                    this.Redirects == input.Redirects ||
                    this.Redirects != null &&
                    input.Redirects != null &&
                    this.Redirects.SequenceEqual(input.Redirects)
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                ) && 
                (
                    this.TotalSize == input.TotalSize ||
                    (this.TotalSize != null &&
                    this.TotalSize.Equals(input.TotalSize))
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    input.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivePromotions != null)
                {
                    hashCode = (hashCode * 59) + this.ActivePromotions.GetHashCode();
                }
                if (this.AggregateFilters != null)
                {
                    hashCode = (hashCode * 59) + this.AggregateFilters.GetHashCode();
                }
                if (this.Aggregates != null)
                {
                    hashCode = (hashCode * 59) + this.Aggregates.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FeatureScoreWeight.GetHashCode();
                if (this.Pipeline != null)
                {
                    hashCode = (hashCode * 59) + this.Pipeline.GetHashCode();
                }
                if (this.ProcessingDuration != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessingDuration.GetHashCode();
                }
                if (this.Redirects != null)
                {
                    hashCode = (hashCode * 59) + this.Redirects.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                if (this.TotalSize != null)
                {
                    hashCode = (hashCode * 59) + this.TotalSize.GetHashCode();
                }
                if (this.Variables != null)
                {
                    hashCode = (hashCode * 59) + this.Variables.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
