/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@sajari.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// PipelineStepParamBinding
    /// </summary>
    [DataContract(Name = "PipelineStepParamBinding")]
    public partial class PipelineStepParamBinding : IEquatable<PipelineStepParamBinding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineStepParamBinding" /> class.
        /// </summary>
        /// <param name="bind">Bind the step parameter to a pipeline variable..</param>
        /// <param name="constant">Bind the step parameter to a constant value..</param>
        /// <param name="defaultValue">Set a default value for the step parameter.  This allows you to set a default value for the step parameter when it is not bound to a pipeline variable..</param>
        /// <param name="description">Set the description of the step parameter..</param>
        public PipelineStepParamBinding(string bind = default(string), string constant = default(string), string defaultValue = default(string), string description = default(string))
        {
            this.Bind = bind;
            this.Constant = constant;
            this.DefaultValue = defaultValue;
            this.Description = description;
        }

        /// <summary>
        /// Bind the step parameter to a pipeline variable.
        /// </summary>
        /// <value>Bind the step parameter to a pipeline variable.</value>
        [DataMember(Name = "bind", EmitDefaultValue = false)]
        public string Bind { get; set; }

        /// <summary>
        /// Bind the step parameter to a constant value.
        /// </summary>
        /// <value>Bind the step parameter to a constant value.</value>
        [DataMember(Name = "constant", EmitDefaultValue = false)]
        public string Constant { get; set; }

        /// <summary>
        /// Set a default value for the step parameter.  This allows you to set a default value for the step parameter when it is not bound to a pipeline variable.
        /// </summary>
        /// <value>Set a default value for the step parameter.  This allows you to set a default value for the step parameter when it is not bound to a pipeline variable.</value>
        [DataMember(Name = "default_value", EmitDefaultValue = false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Set the description of the step parameter.
        /// </summary>
        /// <value>Set the description of the step parameter.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PipelineStepParamBinding {\n");
            sb.Append("  Bind: ").Append(Bind).Append("\n");
            sb.Append("  Constant: ").Append(Constant).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PipelineStepParamBinding);
        }

        /// <summary>
        /// Returns true if PipelineStepParamBinding instances are equal
        /// </summary>
        /// <param name="input">Instance of PipelineStepParamBinding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PipelineStepParamBinding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bind == input.Bind ||
                    (this.Bind != null &&
                    this.Bind.Equals(input.Bind))
                ) && 
                (
                    this.Constant == input.Constant ||
                    (this.Constant != null &&
                    this.Constant.Equals(input.Constant))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bind != null)
                    hashCode = hashCode * 59 + this.Bind.GetHashCode();
                if (this.Constant != null)
                    hashCode = hashCode * 59 + this.Constant.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
