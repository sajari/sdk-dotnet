/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// A request to perform a query experiment on a collection using a pipeline.
    /// </summary>
    [DataContract(Name = "ExperimentRequest")]
    public partial class ExperimentRequest : IEquatable<ExperimentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExperimentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExperimentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExperimentRequest" /> class.
        /// </summary>
        /// <param name="customPipeline">customPipeline.</param>
        /// <param name="pipeline">pipeline.</param>
        /// <param name="promotions">The promotions to consider active when running the search.  Provided promotions override existing promotions with the same ID..</param>
        /// <param name="variables">The initial values for the variables the pipeline operates on and transforms throughout its steps.  The most important variable is &#x60;q&#x60; which is the query the user entered, for example:  &#x60;&#x60;&#x60;json { \&quot;q\&quot;: \&quot;search terms\&quot; } &#x60;&#x60;&#x60;  To paginate through results, set the variables &#x60;page&#x60; and &#x60;resultsPerPage&#x60;, for example:  &#x60;&#x60;&#x60;json { \&quot;q\&quot;: \&quot;search terms\&quot;, \&quot;page\&quot;: 5, \&quot;resultsPerPage\&quot;: 20 } &#x60;&#x60;&#x60;  To sort results, set the variable &#x60;sort&#x60; to the name of one of your collection&#39;s schema fields, for example:  &#x60;&#x60;&#x60;json { \&quot;q\&quot;: \&quot;search terms\&quot;, \&quot;sort\&quot;: \&quot;name\&quot; } &#x60;&#x60;&#x60;  To sort in reverse, prefix the schema field with a minus sign &#x60;-&#x60;, for example:  &#x60;&#x60;&#x60;json { \&quot;q\&quot;: \&quot;search terms\&quot;, \&quot;sort\&quot;: \&quot;-name\&quot; } &#x60;&#x60;&#x60; (required).</param>
        public ExperimentRequest(Pipeline customPipeline = default(Pipeline), ExperimentRequestPipeline pipeline = default(ExperimentRequestPipeline), List<Promotion> promotions = default(List<Promotion>), Dictionary<string, Object> variables = default(Dictionary<string, Object>))
        {
            // to ensure "variables" is required (not null)
            if (variables == null) {
                throw new ArgumentNullException("variables is a required property for ExperimentRequest and cannot be null");
            }
            this.Variables = variables;
            this.CustomPipeline = customPipeline;
            this.Pipeline = pipeline;
            this.Promotions = promotions;
        }

        /// <summary>
        /// Gets or Sets CustomPipeline
        /// </summary>
        [DataMember(Name = "custom_pipeline", EmitDefaultValue = false)]
        public Pipeline CustomPipeline { get; set; }

        /// <summary>
        /// Gets or Sets Pipeline
        /// </summary>
        [DataMember(Name = "pipeline", EmitDefaultValue = false)]
        public ExperimentRequestPipeline Pipeline { get; set; }

        /// <summary>
        /// The promotions to consider active when running the search.  Provided promotions override existing promotions with the same ID.
        /// </summary>
        /// <value>The promotions to consider active when running the search.  Provided promotions override existing promotions with the same ID.</value>
        [DataMember(Name = "promotions", EmitDefaultValue = false)]
        public List<Promotion> Promotions { get; set; }

        /// <summary>
        /// The initial values for the variables the pipeline operates on and transforms throughout its steps.  The most important variable is &#x60;q&#x60; which is the query the user entered, for example:  &#x60;&#x60;&#x60;json { \&quot;q\&quot;: \&quot;search terms\&quot; } &#x60;&#x60;&#x60;  To paginate through results, set the variables &#x60;page&#x60; and &#x60;resultsPerPage&#x60;, for example:  &#x60;&#x60;&#x60;json { \&quot;q\&quot;: \&quot;search terms\&quot;, \&quot;page\&quot;: 5, \&quot;resultsPerPage\&quot;: 20 } &#x60;&#x60;&#x60;  To sort results, set the variable &#x60;sort&#x60; to the name of one of your collection&#39;s schema fields, for example:  &#x60;&#x60;&#x60;json { \&quot;q\&quot;: \&quot;search terms\&quot;, \&quot;sort\&quot;: \&quot;name\&quot; } &#x60;&#x60;&#x60;  To sort in reverse, prefix the schema field with a minus sign &#x60;-&#x60;, for example:  &#x60;&#x60;&#x60;json { \&quot;q\&quot;: \&quot;search terms\&quot;, \&quot;sort\&quot;: \&quot;-name\&quot; } &#x60;&#x60;&#x60;
        /// </summary>
        /// <value>The initial values for the variables the pipeline operates on and transforms throughout its steps.  The most important variable is &#x60;q&#x60; which is the query the user entered, for example:  &#x60;&#x60;&#x60;json { \&quot;q\&quot;: \&quot;search terms\&quot; } &#x60;&#x60;&#x60;  To paginate through results, set the variables &#x60;page&#x60; and &#x60;resultsPerPage&#x60;, for example:  &#x60;&#x60;&#x60;json { \&quot;q\&quot;: \&quot;search terms\&quot;, \&quot;page\&quot;: 5, \&quot;resultsPerPage\&quot;: 20 } &#x60;&#x60;&#x60;  To sort results, set the variable &#x60;sort&#x60; to the name of one of your collection&#39;s schema fields, for example:  &#x60;&#x60;&#x60;json { \&quot;q\&quot;: \&quot;search terms\&quot;, \&quot;sort\&quot;: \&quot;name\&quot; } &#x60;&#x60;&#x60;  To sort in reverse, prefix the schema field with a minus sign &#x60;-&#x60;, for example:  &#x60;&#x60;&#x60;json { \&quot;q\&quot;: \&quot;search terms\&quot;, \&quot;sort\&quot;: \&quot;-name\&quot; } &#x60;&#x60;&#x60;</value>
        [DataMember(Name = "variables", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, Object> Variables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExperimentRequest {\n");
            sb.Append("  CustomPipeline: ").Append(CustomPipeline).Append("\n");
            sb.Append("  Pipeline: ").Append(Pipeline).Append("\n");
            sb.Append("  Promotions: ").Append(Promotions).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExperimentRequest);
        }

        /// <summary>
        /// Returns true if ExperimentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExperimentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExperimentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomPipeline == input.CustomPipeline ||
                    (this.CustomPipeline != null &&
                    this.CustomPipeline.Equals(input.CustomPipeline))
                ) && 
                (
                    this.Pipeline == input.Pipeline ||
                    (this.Pipeline != null &&
                    this.Pipeline.Equals(input.Pipeline))
                ) && 
                (
                    this.Promotions == input.Promotions ||
                    this.Promotions != null &&
                    input.Promotions != null &&
                    this.Promotions.SequenceEqual(input.Promotions)
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    input.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomPipeline != null)
                {
                    hashCode = (hashCode * 59) + this.CustomPipeline.GetHashCode();
                }
                if (this.Pipeline != null)
                {
                    hashCode = (hashCode * 59) + this.Pipeline.GetHashCode();
                }
                if (this.Promotions != null)
                {
                    hashCode = (hashCode * 59) + this.Promotions.GetHashCode();
                }
                if (this.Variables != null)
                {
                    hashCode = (hashCode * 59) + this.Variables.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
