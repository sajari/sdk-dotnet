/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// Pipeline
    /// </summary>
    [DataContract(Name = "Pipeline")]
    public partial class Pipeline : IEquatable<Pipeline>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public PipelineType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Pipeline" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Pipeline() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Pipeline" /> class.
        /// </summary>
        /// <param name="description">Description of the pipeline..</param>
        /// <param name="name">The pipeline&#39;s name.  Must start with an alphanumeric character followed by one or more alphanumeric, &#x60;_&#x60;, &#x60;-&#x60; or &#x60;.&#x60; characters. Strictly speaking, it must match the regular expression: &#x60;^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]+$&#x60;. (required).</param>
        /// <param name="postSteps">The post-steps that are run after an indexing operation or query request has been sent to the search index.  For indexing operations, the post-steps only run when creating new records. They do not run when updating records.  For querying, the post-steps have access to the result-set. This makes it possible to act on the results before sending them back to the caller..</param>
        /// <param name="preSteps">The pre-steps that are run before an indexing operation or query request is sent to the search index..</param>
        /// <param name="type">type (required).</param>
        /// <param name="version">The pipeline&#39;s version.  Must start with an alphanumeric character followed by one or more alphanumeric, &#x60;_&#x60;, &#x60;-&#x60; or &#x60;.&#x60; characters. Strictly speaking, it must match the regular expression: &#x60;^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]+$&#x60;. (required).</param>
        public Pipeline(string description = default(string), string name = default(string), List<PipelineStep> postSteps = default(List<PipelineStep>), List<PipelineStep> preSteps = default(List<PipelineStep>), PipelineType type = default(PipelineType), string version = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for Pipeline and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            // to ensure "version" is required (not null)
            if (version == null) {
                throw new ArgumentNullException("version is a required property for Pipeline and cannot be null");
            }
            this._Version = version;
            this.Description = description;
            this.PostSteps = postSteps;
            this.PreSteps = preSteps;
        }

        /// <summary>
        /// Output only. Indicates if the pipeline is the collection default pipeline.
        /// </summary>
        /// <value>Output only. Indicates if the pipeline is the collection default pipeline.</value>
        [DataMember(Name = "collection_default", EmitDefaultValue = true)]
        public bool CollectionDefault { get; private set; }

        /// <summary>
        /// Returns false as CollectionDefault should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCollectionDefault()
        {
            return false;
        }
        /// <summary>
        /// Output only. Time the pipeline was created.
        /// </summary>
        /// <value>Output only. Time the pipeline was created.</value>
        [DataMember(Name = "create_time", EmitDefaultValue = false)]
        public DateTime CreateTime { get; private set; }

        /// <summary>
        /// Returns false as CreateTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreateTime()
        {
            return false;
        }
        /// <summary>
        /// Output only. Indicates if the pipeline is the default version.
        /// </summary>
        /// <value>Output only. Indicates if the pipeline is the default version.</value>
        [DataMember(Name = "default_version", EmitDefaultValue = true)]
        public bool DefaultVersion { get; private set; }

        /// <summary>
        /// Returns false as DefaultVersion should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultVersion()
        {
            return false;
        }
        /// <summary>
        /// Description of the pipeline.
        /// </summary>
        /// <value>Description of the pipeline.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The pipeline&#39;s name.  Must start with an alphanumeric character followed by one or more alphanumeric, &#x60;_&#x60;, &#x60;-&#x60; or &#x60;.&#x60; characters. Strictly speaking, it must match the regular expression: &#x60;^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]+$&#x60;.
        /// </summary>
        /// <value>The pipeline&#39;s name.  Must start with an alphanumeric character followed by one or more alphanumeric, &#x60;_&#x60;, &#x60;-&#x60; or &#x60;.&#x60; characters. Strictly speaking, it must match the regular expression: &#x60;^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]+$&#x60;.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The post-steps that are run after an indexing operation or query request has been sent to the search index.  For indexing operations, the post-steps only run when creating new records. They do not run when updating records.  For querying, the post-steps have access to the result-set. This makes it possible to act on the results before sending them back to the caller.
        /// </summary>
        /// <value>The post-steps that are run after an indexing operation or query request has been sent to the search index.  For indexing operations, the post-steps only run when creating new records. They do not run when updating records.  For querying, the post-steps have access to the result-set. This makes it possible to act on the results before sending them back to the caller.</value>
        [DataMember(Name = "post_steps", EmitDefaultValue = false)]
        public List<PipelineStep> PostSteps { get; set; }

        /// <summary>
        /// The pre-steps that are run before an indexing operation or query request is sent to the search index.
        /// </summary>
        /// <value>The pre-steps that are run before an indexing operation or query request is sent to the search index.</value>
        [DataMember(Name = "pre_steps", EmitDefaultValue = false)]
        public List<PipelineStep> PreSteps { get; set; }

        /// <summary>
        /// The pipeline&#39;s version.  Must start with an alphanumeric character followed by one or more alphanumeric, &#x60;_&#x60;, &#x60;-&#x60; or &#x60;.&#x60; characters. Strictly speaking, it must match the regular expression: &#x60;^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]+$&#x60;.
        /// </summary>
        /// <value>The pipeline&#39;s version.  Must start with an alphanumeric character followed by one or more alphanumeric, &#x60;_&#x60;, &#x60;-&#x60; or &#x60;.&#x60; characters. Strictly speaking, it must match the regular expression: &#x60;^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]+$&#x60;.</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = false)]
        public string _Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Pipeline {\n");
            sb.Append("  CollectionDefault: ").Append(CollectionDefault).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  DefaultVersion: ").Append(DefaultVersion).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PostSteps: ").Append(PostSteps).Append("\n");
            sb.Append("  PreSteps: ").Append(PreSteps).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Pipeline);
        }

        /// <summary>
        /// Returns true if Pipeline instances are equal
        /// </summary>
        /// <param name="input">Instance of Pipeline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pipeline input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CollectionDefault == input.CollectionDefault ||
                    this.CollectionDefault.Equals(input.CollectionDefault)
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    (this.CreateTime != null &&
                    this.CreateTime.Equals(input.CreateTime))
                ) && 
                (
                    this.DefaultVersion == input.DefaultVersion ||
                    this.DefaultVersion.Equals(input.DefaultVersion)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PostSteps == input.PostSteps ||
                    this.PostSteps != null &&
                    input.PostSteps != null &&
                    this.PostSteps.SequenceEqual(input.PostSteps)
                ) && 
                (
                    this.PreSteps == input.PreSteps ||
                    this.PreSteps != null &&
                    input.PreSteps != null &&
                    this.PreSteps.SequenceEqual(input.PreSteps)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CollectionDefault.GetHashCode();
                if (this.CreateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefaultVersion.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PostSteps != null)
                {
                    hashCode = (hashCode * 59) + this.PostSteps.GetHashCode();
                }
                if (this.PreSteps != null)
                {
                    hashCode = (hashCode * 59) + this.PreSteps.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
