/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with Neuralsearch速, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// QueryResult
    /// </summary>
    [DataContract(Name = "QueryResult")]
    public partial class QueryResult : IEquatable<QueryResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryResult" /> class.
        /// </summary>
        /// <param name="featureScore">The feature score of the result.  This is a value between 0 and 1 representing the business-specific ranking of the result as determined by the ranking adjustments. See [Ranking adjustments](https://docs.search.io/documentation/fundamentals/search-settings/ranking-adjustments) for more information..</param>
        /// <param name="indexScore">The index score of the result.  This is a value between 0 and 1 representing the relevance of the result using traditional keyword search. The higher the score the more relevant the result is..</param>
        /// <param name="neuralScore">The neural score of the result.  This is a value between 0 and 1 representing the relevance of the result using Neuralsearch速, using AI-based search..</param>
        /// <param name="record">An object made up of field-value pairs that contains the record data..</param>
        /// <param name="score">The overall relevance of the result.  This is a value between 0 and 1 that combines the index, neural and feature scores. The higher the score the more relevant the result is..</param>
        /// <param name="token">token.</param>
        public QueryResult(double featureScore = default(double), double indexScore = default(double), double neuralScore = default(double), Object record = default(Object), double score = default(double), QueryResultToken token = default(QueryResultToken))
        {
            this.FeatureScore = featureScore;
            this.IndexScore = indexScore;
            this.NeuralScore = neuralScore;
            this.Record = record;
            this.Score = score;
            this.Token = token;
        }

        /// <summary>
        /// The feature score of the result.  This is a value between 0 and 1 representing the business-specific ranking of the result as determined by the ranking adjustments. See [Ranking adjustments](https://docs.search.io/documentation/fundamentals/search-settings/ranking-adjustments) for more information.
        /// </summary>
        /// <value>The feature score of the result.  This is a value between 0 and 1 representing the business-specific ranking of the result as determined by the ranking adjustments. See [Ranking adjustments](https://docs.search.io/documentation/fundamentals/search-settings/ranking-adjustments) for more information.</value>
        [DataMember(Name = "feature_score", EmitDefaultValue = false)]
        public double FeatureScore { get; set; }

        /// <summary>
        /// The index score of the result.  This is a value between 0 and 1 representing the relevance of the result using traditional keyword search. The higher the score the more relevant the result is.
        /// </summary>
        /// <value>The index score of the result.  This is a value between 0 and 1 representing the relevance of the result using traditional keyword search. The higher the score the more relevant the result is.</value>
        [DataMember(Name = "index_score", EmitDefaultValue = false)]
        public double IndexScore { get; set; }

        /// <summary>
        /// The neural score of the result.  This is a value between 0 and 1 representing the relevance of the result using Neuralsearch速, using AI-based search.
        /// </summary>
        /// <value>The neural score of the result.  This is a value between 0 and 1 representing the relevance of the result using Neuralsearch速, using AI-based search.</value>
        [DataMember(Name = "neural_score", EmitDefaultValue = false)]
        public double NeuralScore { get; set; }

        /// <summary>
        /// An object made up of field-value pairs that contains the record data.
        /// </summary>
        /// <value>An object made up of field-value pairs that contains the record data.</value>
        [DataMember(Name = "record", EmitDefaultValue = false)]
        public Object Record { get; set; }

        /// <summary>
        /// The overall relevance of the result.  This is a value between 0 and 1 that combines the index, neural and feature scores. The higher the score the more relevant the result is.
        /// </summary>
        /// <value>The overall relevance of the result.  This is a value between 0 and 1 that combines the index, neural and feature scores. The higher the score the more relevant the result is.</value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public QueryResultToken Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryResult {\n");
            sb.Append("  FeatureScore: ").Append(FeatureScore).Append("\n");
            sb.Append("  IndexScore: ").Append(IndexScore).Append("\n");
            sb.Append("  NeuralScore: ").Append(NeuralScore).Append("\n");
            sb.Append("  Record: ").Append(Record).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryResult);
        }

        /// <summary>
        /// Returns true if QueryResult instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FeatureScore == input.FeatureScore ||
                    this.FeatureScore.Equals(input.FeatureScore)
                ) && 
                (
                    this.IndexScore == input.IndexScore ||
                    this.IndexScore.Equals(input.IndexScore)
                ) && 
                (
                    this.NeuralScore == input.NeuralScore ||
                    this.NeuralScore.Equals(input.NeuralScore)
                ) && 
                (
                    this.Record == input.Record ||
                    (this.Record != null &&
                    this.Record.Equals(input.Record))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FeatureScore.GetHashCode();
                hashCode = (hashCode * 59) + this.IndexScore.GetHashCode();
                hashCode = (hashCode * 59) + this.NeuralScore.GetHashCode();
                if (this.Record != null)
                {
                    hashCode = (hashCode * 59) + this.Record.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Score.GetHashCode();
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
