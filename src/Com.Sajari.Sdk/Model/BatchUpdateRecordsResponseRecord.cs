/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// BatchUpdateRecordsResponseRecord
    /// </summary>
    [DataContract(Name = "BatchUpdateRecordsResponseRecord")]
    public partial class BatchUpdateRecordsResponseRecord : IEquatable<BatchUpdateRecordsResponseRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchUpdateRecordsResponseRecord" /> class.
        /// </summary>
        /// <param name="index">The index of the record in &#x60;requests&#x60;..</param>
        /// <param name="record">The updated record..</param>
        public BatchUpdateRecordsResponseRecord(int index = default(int), Object record = default(Object))
        {
            this.Index = index;
            this.Record = record;
        }

        /// <summary>
        /// The index of the record in &#x60;requests&#x60;.
        /// </summary>
        /// <value>The index of the record in &#x60;requests&#x60;.</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// The updated record.
        /// </summary>
        /// <value>The updated record.</value>
        [DataMember(Name = "record", EmitDefaultValue = false)]
        public Object Record { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchUpdateRecordsResponseRecord {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Record: ").Append(Record).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchUpdateRecordsResponseRecord);
        }

        /// <summary>
        /// Returns true if BatchUpdateRecordsResponseRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchUpdateRecordsResponseRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchUpdateRecordsResponseRecord input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.Record == input.Record ||
                    (this.Record != null &&
                    this.Record.Equals(input.Record))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                if (this.Record != null)
                {
                    hashCode = (hashCode * 59) + this.Record.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
