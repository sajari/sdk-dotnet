/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// BatchUpdateRecordsRequest
    /// </summary>
    [DataContract(Name = "BatchUpdateRecordsRequest")]
    public partial class BatchUpdateRecordsRequest : IEquatable<BatchUpdateRecordsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchUpdateRecordsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchUpdateRecordsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchUpdateRecordsRequest" /> class.
        /// </summary>
        /// <param name="requests">The list of requests containing the records to be updated.  A maximum of 200 records can be updated in a batch. (required).</param>
        /// <param name="updateMask">The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  For each field that you want to update, provide a corresponding value in each record object, within the requests list, containing the new value.  If provided, and you also provide an update mask in any child request, the values must match..</param>
        public BatchUpdateRecordsRequest(List<UpdateRecordRequest> requests = default(List<UpdateRecordRequest>), string updateMask = default(string))
        {
            // to ensure "requests" is required (not null)
            if (requests == null) {
                throw new ArgumentNullException("requests is a required property for BatchUpdateRecordsRequest and cannot be null");
            }
            this.Requests = requests;
            this.UpdateMask = updateMask;
        }

        /// <summary>
        /// The list of requests containing the records to be updated.  A maximum of 200 records can be updated in a batch.
        /// </summary>
        /// <value>The list of requests containing the records to be updated.  A maximum of 200 records can be updated in a batch.</value>
        [DataMember(Name = "requests", IsRequired = true, EmitDefaultValue = false)]
        public List<UpdateRecordRequest> Requests { get; set; }

        /// <summary>
        /// The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  For each field that you want to update, provide a corresponding value in each record object, within the requests list, containing the new value.  If provided, and you also provide an update mask in any child request, the values must match.
        /// </summary>
        /// <value>The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  For each field that you want to update, provide a corresponding value in each record object, within the requests list, containing the new value.  If provided, and you also provide an update mask in any child request, the values must match.</value>
        [DataMember(Name = "update_mask", EmitDefaultValue = false)]
        public string UpdateMask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchUpdateRecordsRequest {\n");
            sb.Append("  Requests: ").Append(Requests).Append("\n");
            sb.Append("  UpdateMask: ").Append(UpdateMask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchUpdateRecordsRequest);
        }

        /// <summary>
        /// Returns true if BatchUpdateRecordsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchUpdateRecordsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchUpdateRecordsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Requests == input.Requests ||
                    this.Requests != null &&
                    input.Requests != null &&
                    this.Requests.SequenceEqual(input.Requests)
                ) && 
                (
                    this.UpdateMask == input.UpdateMask ||
                    (this.UpdateMask != null &&
                    this.UpdateMask.Equals(input.UpdateMask))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Requests != null)
                {
                    hashCode = (hashCode * 59) + this.Requests.GetHashCode();
                }
                if (this.UpdateMask != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateMask.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
