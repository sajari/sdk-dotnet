/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// A synthetic search result that renders as an image. It takes a user to a pre-determined location when clicked.
    /// </summary>
    [DataContract(Name = "Banner")]
    public partial class Banner : IEquatable<Banner>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TextPosition
        /// </summary>
        [DataMember(Name = "text_position", EmitDefaultValue = false)]
        public TextPosition? TextPosition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Banner" /> class.
        /// </summary>
        /// <param name="description">The description of the banner, displayed in sub-head font..</param>
        /// <param name="height">The height the banner occupies in grid cells..</param>
        /// <param name="id">The ID of the banner, used to identify clicked banners..</param>
        /// <param name="imageUrl">The URL of the image used for the banner..</param>
        /// <param name="position">The 1-based index indicating where the banner appears in search results..</param>
        /// <param name="targetUrl">The URL to redirect the user to when the banner is clicked..</param>
        /// <param name="textColor">The color of the text as a hex code with a # prefix, e.g. #FFCC00 or #FC0..</param>
        /// <param name="textPosition">textPosition.</param>
        /// <param name="title">The title of the banner, displayed in header font..</param>
        /// <param name="width">The width the banner occupies in grid cells..</param>
        public Banner(string description = default(string), int height = default(int), string id = default(string), string imageUrl = default(string), int position = default(int), string targetUrl = default(string), string textColor = default(string), TextPosition? textPosition = default(TextPosition?), string title = default(string), int width = default(int))
        {
            this.Description = description;
            this.Height = height;
            this.Id = id;
            this.ImageUrl = imageUrl;
            this.Position = position;
            this.TargetUrl = targetUrl;
            this.TextColor = textColor;
            this.TextPosition = textPosition;
            this.Title = title;
            this.Width = width;
        }

        /// <summary>
        /// The description of the banner, displayed in sub-head font.
        /// </summary>
        /// <value>The description of the banner, displayed in sub-head font.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The height the banner occupies in grid cells.
        /// </summary>
        /// <value>The height the banner occupies in grid cells.</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// The ID of the banner, used to identify clicked banners.
        /// </summary>
        /// <value>The ID of the banner, used to identify clicked banners.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The URL of the image used for the banner.
        /// </summary>
        /// <value>The URL of the image used for the banner.</value>
        [DataMember(Name = "image_url", EmitDefaultValue = false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// The 1-based index indicating where the banner appears in search results.
        /// </summary>
        /// <value>The 1-based index indicating where the banner appears in search results.</value>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public int Position { get; set; }

        /// <summary>
        /// The URL to redirect the user to when the banner is clicked.
        /// </summary>
        /// <value>The URL to redirect the user to when the banner is clicked.</value>
        [DataMember(Name = "target_url", EmitDefaultValue = false)]
        public string TargetUrl { get; set; }

        /// <summary>
        /// The color of the text as a hex code with a # prefix, e.g. #FFCC00 or #FC0.
        /// </summary>
        /// <value>The color of the text as a hex code with a # prefix, e.g. #FFCC00 or #FC0.</value>
        [DataMember(Name = "text_color", EmitDefaultValue = false)]
        public string TextColor { get; set; }

        /// <summary>
        /// The title of the banner, displayed in header font.
        /// </summary>
        /// <value>The title of the banner, displayed in header font.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The width the banner occupies in grid cells.
        /// </summary>
        /// <value>The width the banner occupies in grid cells.</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Banner {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  TargetUrl: ").Append(TargetUrl).Append("\n");
            sb.Append("  TextColor: ").Append(TextColor).Append("\n");
            sb.Append("  TextPosition: ").Append(TextPosition).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Banner);
        }

        /// <summary>
        /// Returns true if Banner instances are equal
        /// </summary>
        /// <param name="input">Instance of Banner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Banner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && 
                (
                    this.TargetUrl == input.TargetUrl ||
                    (this.TargetUrl != null &&
                    this.TargetUrl.Equals(input.TargetUrl))
                ) && 
                (
                    this.TextColor == input.TextColor ||
                    (this.TextColor != null &&
                    this.TextColor.Equals(input.TextColor))
                ) && 
                (
                    this.TextPosition == input.TextPosition ||
                    this.TextPosition.Equals(input.TextPosition)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Position.GetHashCode();
                if (this.TargetUrl != null)
                {
                    hashCode = (hashCode * 59) + this.TargetUrl.GetHashCode();
                }
                if (this.TextColor != null)
                {
                    hashCode = (hashCode * 59) + this.TextColor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TextPosition.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
