/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@sajari.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// Percentile contains the data points returned in a percentile aggregate step.
    /// </summary>
    [DataContract(Name = "QueryAggregateResultPercentile")]
    public partial class QueryAggregateResultPercentile : IEquatable<QueryAggregateResultPercentile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryAggregateResultPercentile" /> class.
        /// </summary>
        /// <param name="cdf">The cumulative distribution function (CDF) data points..</param>
        /// <param name="percentiles">The percentile data points..</param>
        public QueryAggregateResultPercentile(List<PercentileDataPoint> cdf = default(List<PercentileDataPoint>), List<PercentileDataPoint> percentiles = default(List<PercentileDataPoint>))
        {
            this.Cdf = cdf;
            this.Percentiles = percentiles;
        }

        /// <summary>
        /// The cumulative distribution function (CDF) data points.
        /// </summary>
        /// <value>The cumulative distribution function (CDF) data points.</value>
        [DataMember(Name = "cdf", EmitDefaultValue = false)]
        public List<PercentileDataPoint> Cdf { get; set; }

        /// <summary>
        /// The percentile data points.
        /// </summary>
        /// <value>The percentile data points.</value>
        [DataMember(Name = "percentiles", EmitDefaultValue = false)]
        public List<PercentileDataPoint> Percentiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryAggregateResultPercentile {\n");
            sb.Append("  Cdf: ").Append(Cdf).Append("\n");
            sb.Append("  Percentiles: ").Append(Percentiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryAggregateResultPercentile);
        }

        /// <summary>
        /// Returns true if QueryAggregateResultPercentile instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryAggregateResultPercentile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryAggregateResultPercentile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cdf == input.Cdf ||
                    this.Cdf != null &&
                    input.Cdf != null &&
                    this.Cdf.SequenceEqual(input.Cdf)
                ) && 
                (
                    this.Percentiles == input.Percentiles ||
                    this.Percentiles != null &&
                    input.Percentiles != null &&
                    this.Percentiles.SequenceEqual(input.Percentiles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cdf != null)
                    hashCode = hashCode * 59 + this.Cdf.GetHashCode();
                if (this.Percentiles != null)
                    hashCode = hashCode * 59 + this.Percentiles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
