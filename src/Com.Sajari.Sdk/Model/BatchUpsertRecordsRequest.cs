/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// BatchUpsertRecordsRequest
    /// </summary>
    [DataContract(Name = "BatchUpsertRecordsRequest")]
    public partial class BatchUpsertRecordsRequest : IEquatable<BatchUpsertRecordsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchUpsertRecordsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchUpsertRecordsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchUpsertRecordsRequest" /> class.
        /// </summary>
        /// <param name="pipeline">pipeline.</param>
        /// <param name="records">A list of records to upsert.  A maximum of 200 records can be upsert in a batch. (required).</param>
        /// <param name="variables">The initial values for the variables the pipeline operates on and transforms throughout its steps..</param>
        public BatchUpsertRecordsRequest(BatchUpsertRecordsRequestPipeline pipeline = default(BatchUpsertRecordsRequestPipeline), List<Object> records = default(List<Object>), Dictionary<string, Object> variables = default(Dictionary<string, Object>))
        {
            // to ensure "records" is required (not null)
            if (records == null) {
                throw new ArgumentNullException("records is a required property for BatchUpsertRecordsRequest and cannot be null");
            }
            this.Records = records;
            this.Pipeline = pipeline;
            this.Variables = variables;
        }

        /// <summary>
        /// Gets or Sets Pipeline
        /// </summary>
        [DataMember(Name = "pipeline", EmitDefaultValue = false)]
        public BatchUpsertRecordsRequestPipeline Pipeline { get; set; }

        /// <summary>
        /// A list of records to upsert.  A maximum of 200 records can be upsert in a batch.
        /// </summary>
        /// <value>A list of records to upsert.  A maximum of 200 records can be upsert in a batch.</value>
        [DataMember(Name = "records", IsRequired = true, EmitDefaultValue = false)]
        public List<Object> Records { get; set; }

        /// <summary>
        /// The initial values for the variables the pipeline operates on and transforms throughout its steps.
        /// </summary>
        /// <value>The initial values for the variables the pipeline operates on and transforms throughout its steps.</value>
        [DataMember(Name = "variables", EmitDefaultValue = false)]
        public Dictionary<string, Object> Variables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchUpsertRecordsRequest {\n");
            sb.Append("  Pipeline: ").Append(Pipeline).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchUpsertRecordsRequest);
        }

        /// <summary>
        /// Returns true if BatchUpsertRecordsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchUpsertRecordsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchUpsertRecordsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Pipeline == input.Pipeline ||
                    (this.Pipeline != null &&
                    this.Pipeline.Equals(input.Pipeline))
                ) && 
                (
                    this.Records == input.Records ||
                    this.Records != null &&
                    input.Records != null &&
                    this.Records.SequenceEqual(input.Records)
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    input.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pipeline != null)
                {
                    hashCode = (hashCode * 59) + this.Pipeline.GetHashCode();
                }
                if (this.Records != null)
                {
                    hashCode = (hashCode * 59) + this.Records.GetHashCode();
                }
                if (this.Variables != null)
                {
                    hashCode = (hashCode * 59) + this.Variables.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
