/*
 * Sajari API
 *
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@sajari.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// RecordKey
    /// </summary>
    [DataContract(Name = "RecordKey")]
    public partial class RecordKey : IEquatable<RecordKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecordKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordKey" /> class.
        /// </summary>
        /// <param name="field">A field in your record that uniquely identifies it, e.g. &#x60;id&#x60;. (required).</param>
        /// <param name="value">The value of &#x60;field&#x60; in your record, e.g. &#x60;b217a995-597c-410f-bef2-60e9f8c0aadd&#x60;. (required).</param>
        public RecordKey(string field = default(string), string value = default(string))
        {
            // to ensure "field" is required (not null)
            this.Field = field ?? throw new ArgumentNullException("field is a required property for RecordKey and cannot be null");
            // to ensure "value" is required (not null)
            this.Value = value ?? throw new ArgumentNullException("value is a required property for RecordKey and cannot be null");
        }

        /// <summary>
        /// A field in your record that uniquely identifies it, e.g. &#x60;id&#x60;.
        /// </summary>
        /// <value>A field in your record that uniquely identifies it, e.g. &#x60;id&#x60;.</value>
        [DataMember(Name = "field", IsRequired = true, EmitDefaultValue = false)]
        public string Field { get; set; }

        /// <summary>
        /// The value of &#x60;field&#x60; in your record, e.g. &#x60;b217a995-597c-410f-bef2-60e9f8c0aadd&#x60;.
        /// </summary>
        /// <value>The value of &#x60;field&#x60; in your record, e.g. &#x60;b217a995-597c-410f-bef2-60e9f8c0aadd&#x60;.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecordKey {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecordKey);
        }

        /// <summary>
        /// Returns true if RecordKey instances are equal
        /// </summary>
        /// <param name="input">Instance of RecordKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecordKey input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
