/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// QueryCollectionRequestTracking
    /// </summary>
    [DataContract(Name = "QueryCollectionRequestTracking")]
    public partial class QueryCollectionRequestTracking : IEquatable<QueryCollectionRequestTracking>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public QueryCollectionRequestTrackingType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryCollectionRequestTracking" /> class.
        /// </summary>
        /// <param name="data">A set of custom values to be included in tracking data..</param>
        /// <param name="field">The tracking field used to identify records in the collection.  Must be unique schema field..</param>
        /// <param name="queryId">The query ID of the query. If this is empty, then one is generated..</param>
        /// <param name="sequence">The sequence number of query..</param>
        /// <param name="type">type.</param>
        public QueryCollectionRequestTracking(Dictionary<string, string> data = default(Dictionary<string, string>), string field = default(string), string queryId = default(string), int sequence = default(int), QueryCollectionRequestTrackingType? type = default(QueryCollectionRequestTrackingType?))
        {
            this.Data = data;
            this.Field = field;
            this.QueryId = queryId;
            this.Sequence = sequence;
            this.Type = type;
        }

        /// <summary>
        /// A set of custom values to be included in tracking data.
        /// </summary>
        /// <value>A set of custom values to be included in tracking data.</value>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public Dictionary<string, string> Data { get; set; }

        /// <summary>
        /// The tracking field used to identify records in the collection.  Must be unique schema field.
        /// </summary>
        /// <value>The tracking field used to identify records in the collection.  Must be unique schema field.</value>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public string Field { get; set; }

        /// <summary>
        /// The query ID of the query. If this is empty, then one is generated.
        /// </summary>
        /// <value>The query ID of the query. If this is empty, then one is generated.</value>
        [DataMember(Name = "query_id", EmitDefaultValue = false)]
        public string QueryId { get; set; }

        /// <summary>
        /// The sequence number of query.
        /// </summary>
        /// <value>The sequence number of query.</value>
        [DataMember(Name = "sequence", EmitDefaultValue = false)]
        public int Sequence { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryCollectionRequestTracking {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  QueryId: ").Append(QueryId).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryCollectionRequestTracking);
        }

        /// <summary>
        /// Returns true if QueryCollectionRequestTracking instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryCollectionRequestTracking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryCollectionRequestTracking input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.QueryId == input.QueryId ||
                    (this.QueryId != null &&
                    this.QueryId.Equals(input.QueryId))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    this.Sequence.Equals(input.Sequence)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                if (this.QueryId != null)
                {
                    hashCode = (hashCode * 59) + this.QueryId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sequence.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
