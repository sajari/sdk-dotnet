/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// Promotion contains a trigger, determining which searches it should be active for, and a list of alterations that should be made to search results when it is active.
    /// </summary>
    [DataContract(Name = "Promotion")]
    public partial class Promotion : IEquatable<Promotion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Promotion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Promotion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Promotion" /> class.
        /// </summary>
        /// <param name="condition">A condition expression applied to a search request that determines which searches the promotion is active for.  For example, to apply the promotion&#39;s pins and boosts whenever a user searches for &#39;shoes&#39; set condition to &#x60;q &#x3D; &#39;shoes&#39;&#x60;. (required).</param>
        /// <param name="disabled">If disabled, the promotion is never triggered..</param>
        /// <param name="displayName">The promotion&#39;s display name. (required).</param>
        /// <param name="endTime">If specified, the promotion is considered disabled after this time..</param>
        /// <param name="exclusions">The records to exclude from search results, if the promotion is enabled..</param>
        /// <param name="filterBoosts">The filter boosts to apply to searches, if the promotion is enabled..</param>
        /// <param name="filterConditions">The conditions applied to the filters passed from the user. A query must match at least one of these in order to trigger the promotion..</param>
        /// <param name="id">The promotion&#39;s ID..</param>
        /// <param name="pins">The items to fix to specific positions in the search results..</param>
        /// <param name="rangeBoosts">The range boosts to apply to searches, if the promotion is enabled..</param>
        /// <param name="startTime">If specified, the promotion is considered disabled before this time..</param>
        public Promotion(string condition = default(string), bool disabled = default(bool), string displayName = default(string), DateTime endTime = default(DateTime), List<PromotionExclusion> exclusions = default(List<PromotionExclusion>), List<PromotionFilterBoost> filterBoosts = default(List<PromotionFilterBoost>), List<PromotionFilterCondition> filterConditions = default(List<PromotionFilterCondition>), string id = default(string), List<PromotionPin> pins = default(List<PromotionPin>), List<PromotionRangeBoost> rangeBoosts = default(List<PromotionRangeBoost>), DateTime startTime = default(DateTime))
        {
            // to ensure "condition" is required (not null)
            if (condition == null) {
                throw new ArgumentNullException("condition is a required property for Promotion and cannot be null");
            }
            this.Condition = condition;
            // to ensure "displayName" is required (not null)
            if (displayName == null) {
                throw new ArgumentNullException("displayName is a required property for Promotion and cannot be null");
            }
            this.DisplayName = displayName;
            this.Disabled = disabled;
            this.EndTime = endTime;
            this.Exclusions = exclusions;
            this.FilterBoosts = filterBoosts;
            this.FilterConditions = filterConditions;
            this.Id = id;
            this.Pins = pins;
            this.RangeBoosts = rangeBoosts;
            this.StartTime = startTime;
        }

        /// <summary>
        /// Output only. The ID of the collection that owns this promotion.
        /// </summary>
        /// <value>Output only. The ID of the collection that owns this promotion.</value>
        [DataMember(Name = "collection_id", EmitDefaultValue = false)]
        public string CollectionId { get; private set; }

        /// <summary>
        /// Returns false as CollectionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCollectionId()
        {
            return false;
        }
        /// <summary>
        /// A condition expression applied to a search request that determines which searches the promotion is active for.  For example, to apply the promotion&#39;s pins and boosts whenever a user searches for &#39;shoes&#39; set condition to &#x60;q &#x3D; &#39;shoes&#39;&#x60;.
        /// </summary>
        /// <value>A condition expression applied to a search request that determines which searches the promotion is active for.  For example, to apply the promotion&#39;s pins and boosts whenever a user searches for &#39;shoes&#39; set condition to &#x60;q &#x3D; &#39;shoes&#39;&#x60;.</value>
        [DataMember(Name = "condition", IsRequired = true, EmitDefaultValue = false)]
        public string Condition { get; set; }

        /// <summary>
        /// Output only. Time the promotion was created.
        /// </summary>
        /// <value>Output only. Time the promotion was created.</value>
        [DataMember(Name = "create_time", EmitDefaultValue = false)]
        public DateTime CreateTime { get; private set; }

        /// <summary>
        /// Returns false as CreateTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreateTime()
        {
            return false;
        }
        /// <summary>
        /// If disabled, the promotion is never triggered.
        /// </summary>
        /// <value>If disabled, the promotion is never triggered.</value>
        [DataMember(Name = "disabled", EmitDefaultValue = true)]
        public bool Disabled { get; set; }

        /// <summary>
        /// The promotion&#39;s display name.
        /// </summary>
        /// <value>The promotion&#39;s display name.</value>
        [DataMember(Name = "display_name", IsRequired = true, EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// If specified, the promotion is considered disabled after this time.
        /// </summary>
        /// <value>If specified, the promotion is considered disabled after this time.</value>
        [DataMember(Name = "end_time", EmitDefaultValue = false)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// The records to exclude from search results, if the promotion is enabled.
        /// </summary>
        /// <value>The records to exclude from search results, if the promotion is enabled.</value>
        [DataMember(Name = "exclusions", EmitDefaultValue = false)]
        public List<PromotionExclusion> Exclusions { get; set; }

        /// <summary>
        /// The filter boosts to apply to searches, if the promotion is enabled.
        /// </summary>
        /// <value>The filter boosts to apply to searches, if the promotion is enabled.</value>
        [DataMember(Name = "filter_boosts", EmitDefaultValue = false)]
        public List<PromotionFilterBoost> FilterBoosts { get; set; }

        /// <summary>
        /// The conditions applied to the filters passed from the user. A query must match at least one of these in order to trigger the promotion.
        /// </summary>
        /// <value>The conditions applied to the filters passed from the user. A query must match at least one of these in order to trigger the promotion.</value>
        [DataMember(Name = "filter_conditions", EmitDefaultValue = false)]
        public List<PromotionFilterCondition> FilterConditions { get; set; }

        /// <summary>
        /// The promotion&#39;s ID.
        /// </summary>
        /// <value>The promotion&#39;s ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The items to fix to specific positions in the search results.
        /// </summary>
        /// <value>The items to fix to specific positions in the search results.</value>
        [DataMember(Name = "pins", EmitDefaultValue = false)]
        public List<PromotionPin> Pins { get; set; }

        /// <summary>
        /// The range boosts to apply to searches, if the promotion is enabled.
        /// </summary>
        /// <value>The range boosts to apply to searches, if the promotion is enabled.</value>
        [DataMember(Name = "range_boosts", EmitDefaultValue = false)]
        public List<PromotionRangeBoost> RangeBoosts { get; set; }

        /// <summary>
        /// If specified, the promotion is considered disabled before this time.
        /// </summary>
        /// <value>If specified, the promotion is considered disabled before this time.</value>
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Output only. Time the promotion was last updated.
        /// </summary>
        /// <value>Output only. Time the promotion was last updated.</value>
        [DataMember(Name = "update_time", EmitDefaultValue = false)]
        public DateTime UpdateTime { get; private set; }

        /// <summary>
        /// Returns false as UpdateTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdateTime()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Promotion {\n");
            sb.Append("  CollectionId: ").Append(CollectionId).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Exclusions: ").Append(Exclusions).Append("\n");
            sb.Append("  FilterBoosts: ").Append(FilterBoosts).Append("\n");
            sb.Append("  FilterConditions: ").Append(FilterConditions).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Pins: ").Append(Pins).Append("\n");
            sb.Append("  RangeBoosts: ").Append(RangeBoosts).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Promotion);
        }

        /// <summary>
        /// Returns true if Promotion instances are equal
        /// </summary>
        /// <param name="input">Instance of Promotion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Promotion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CollectionId == input.CollectionId ||
                    (this.CollectionId != null &&
                    this.CollectionId.Equals(input.CollectionId))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    (this.CreateTime != null &&
                    this.CreateTime.Equals(input.CreateTime))
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    this.Disabled.Equals(input.Disabled)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.Exclusions == input.Exclusions ||
                    this.Exclusions != null &&
                    input.Exclusions != null &&
                    this.Exclusions.SequenceEqual(input.Exclusions)
                ) && 
                (
                    this.FilterBoosts == input.FilterBoosts ||
                    this.FilterBoosts != null &&
                    input.FilterBoosts != null &&
                    this.FilterBoosts.SequenceEqual(input.FilterBoosts)
                ) && 
                (
                    this.FilterConditions == input.FilterConditions ||
                    this.FilterConditions != null &&
                    input.FilterConditions != null &&
                    this.FilterConditions.SequenceEqual(input.FilterConditions)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Pins == input.Pins ||
                    this.Pins != null &&
                    input.Pins != null &&
                    this.Pins.SequenceEqual(input.Pins)
                ) && 
                (
                    this.RangeBoosts == input.RangeBoosts ||
                    this.RangeBoosts != null &&
                    input.RangeBoosts != null &&
                    this.RangeBoosts.SequenceEqual(input.RangeBoosts)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.UpdateTime == input.UpdateTime ||
                    (this.UpdateTime != null &&
                    this.UpdateTime.Equals(input.UpdateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CollectionId != null)
                {
                    hashCode = (hashCode * 59) + this.CollectionId.GetHashCode();
                }
                if (this.Condition != null)
                {
                    hashCode = (hashCode * 59) + this.Condition.GetHashCode();
                }
                if (this.CreateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Disabled.GetHashCode();
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                if (this.Exclusions != null)
                {
                    hashCode = (hashCode * 59) + this.Exclusions.GetHashCode();
                }
                if (this.FilterBoosts != null)
                {
                    hashCode = (hashCode * 59) + this.FilterBoosts.GetHashCode();
                }
                if (this.FilterConditions != null)
                {
                    hashCode = (hashCode * 59) + this.FilterConditions.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Pins != null)
                {
                    hashCode = (hashCode * 59) + this.Pins.GetHashCode();
                }
                if (this.RangeBoosts != null)
                {
                    hashCode = (hashCode * 59) + this.RangeBoosts.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.UpdateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
