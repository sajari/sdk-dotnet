/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// BatchUpsertRecordsResponse
    /// </summary>
    [DataContract(Name = "BatchUpsertRecordsResponse")]
    public partial class BatchUpsertRecordsResponse : IEquatable<BatchUpsertRecordsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchUpsertRecordsResponse" /> class.
        /// </summary>
        /// <param name="errors">Errors that occurred..</param>
        /// <param name="keys">A list of keys of the records that were inserted.  If a record was inserted, keys contains an entry containing the index of the inserted record from &#x60;records&#x60; and the key. You can use the key if you need to retrieve or delete the record.  If a record was updated, keys contains no such entry for the updated record..</param>
        /// <param name="variables">A list of modified variables returned by the pipeline after it has finished processing each record..</param>
        public BatchUpsertRecordsResponse(List<BatchUpsertRecordsResponseError> errors = default(List<BatchUpsertRecordsResponseError>), List<BatchUpsertRecordsResponseKey> keys = default(List<BatchUpsertRecordsResponseKey>), List<BatchUpsertRecordsResponseVariables> variables = default(List<BatchUpsertRecordsResponseVariables>))
        {
            this.Errors = errors;
            this.Keys = keys;
            this.Variables = variables;
        }

        /// <summary>
        /// Errors that occurred.
        /// </summary>
        /// <value>Errors that occurred.</value>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<BatchUpsertRecordsResponseError> Errors { get; set; }

        /// <summary>
        /// A list of keys of the records that were inserted.  If a record was inserted, keys contains an entry containing the index of the inserted record from &#x60;records&#x60; and the key. You can use the key if you need to retrieve or delete the record.  If a record was updated, keys contains no such entry for the updated record.
        /// </summary>
        /// <value>A list of keys of the records that were inserted.  If a record was inserted, keys contains an entry containing the index of the inserted record from &#x60;records&#x60; and the key. You can use the key if you need to retrieve or delete the record.  If a record was updated, keys contains no such entry for the updated record.</value>
        [DataMember(Name = "keys", EmitDefaultValue = false)]
        public List<BatchUpsertRecordsResponseKey> Keys { get; set; }

        /// <summary>
        /// A list of modified variables returned by the pipeline after it has finished processing each record.
        /// </summary>
        /// <value>A list of modified variables returned by the pipeline after it has finished processing each record.</value>
        [DataMember(Name = "variables", EmitDefaultValue = false)]
        public List<BatchUpsertRecordsResponseVariables> Variables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchUpsertRecordsResponse {\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Keys: ").Append(Keys).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchUpsertRecordsResponse);
        }

        /// <summary>
        /// Returns true if BatchUpsertRecordsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchUpsertRecordsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchUpsertRecordsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.Keys == input.Keys ||
                    this.Keys != null &&
                    input.Keys != null &&
                    this.Keys.SequenceEqual(input.Keys)
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    input.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Errors != null)
                {
                    hashCode = (hashCode * 59) + this.Errors.GetHashCode();
                }
                if (this.Keys != null)
                {
                    hashCode = (hashCode * 59) + this.Keys.GetHashCode();
                }
                if (this.Variables != null)
                {
                    hashCode = (hashCode * 59) + this.Variables.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
