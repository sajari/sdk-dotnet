/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Sajari.Sdk.Client.OpenAPIDateConverter;

namespace Com.Sajari.Sdk.Model
{
    /// <summary>
    /// UpdateRecordRequest
    /// </summary>
    [DataContract(Name = "UpdateRecordRequest")]
    public partial class UpdateRecordRequest : IEquatable<UpdateRecordRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRecordRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateRecordRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRecordRequest" /> class.
        /// </summary>
        /// <param name="key">key (required).</param>
        /// <param name="record">The record to update. (required).</param>
        /// <param name="updateMask">The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  For each field that you want to update, provide a corresponding value in the record object containing the new value. (required).</param>
        public UpdateRecordRequest(RecordKey key = default(RecordKey), Dictionary<string, Object> record = default(Dictionary<string, Object>), string updateMask = default(string))
        {
            // to ensure "key" is required (not null)
            if (key == null) {
                throw new ArgumentNullException("key is a required property for UpdateRecordRequest and cannot be null");
            }
            this.Key = key;
            // to ensure "record" is required (not null)
            if (record == null) {
                throw new ArgumentNullException("record is a required property for UpdateRecordRequest and cannot be null");
            }
            this.Record = record;
            // to ensure "updateMask" is required (not null)
            if (updateMask == null) {
                throw new ArgumentNullException("updateMask is a required property for UpdateRecordRequest and cannot be null");
            }
            this.UpdateMask = updateMask;
        }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = false)]
        public RecordKey Key { get; set; }

        /// <summary>
        /// The record to update.
        /// </summary>
        /// <value>The record to update.</value>
        [DataMember(Name = "record", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, Object> Record { get; set; }

        /// <summary>
        /// The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  For each field that you want to update, provide a corresponding value in the record object containing the new value.
        /// </summary>
        /// <value>The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  For each field that you want to update, provide a corresponding value in the record object containing the new value.</value>
        [DataMember(Name = "update_mask", IsRequired = true, EmitDefaultValue = false)]
        public string UpdateMask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateRecordRequest {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Record: ").Append(Record).Append("\n");
            sb.Append("  UpdateMask: ").Append(UpdateMask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateRecordRequest);
        }

        /// <summary>
        /// Returns true if UpdateRecordRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateRecordRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateRecordRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Record == input.Record ||
                    this.Record != null &&
                    input.Record != null &&
                    this.Record.SequenceEqual(input.Record)
                ) && 
                (
                    this.UpdateMask == input.UpdateMask ||
                    (this.UpdateMask != null &&
                    this.UpdateMask.Equals(input.UpdateMask))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Record != null)
                {
                    hashCode = (hashCode * 59) + this.Record.GetHashCode();
                }
                if (this.UpdateMask != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateMask.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
