/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Sajari.Sdk.Client;
using Com.Sajari.Sdk.Model;

namespace Com.Sajari.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Batch create schema fields
        /// </summary>
        /// <remarks>
        /// The batch version of the [CreateSchemaField](/docs/api#operation/CreateSchemaField) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchCreateSchemaFieldsRequest"></param>
        /// <returns>BatchCreateSchemaFieldsResponse</returns>
        BatchCreateSchemaFieldsResponse BatchCreateSchemaFields(string collectionId, BatchCreateSchemaFieldsRequest batchCreateSchemaFieldsRequest);

        /// <summary>
        /// Batch create schema fields
        /// </summary>
        /// <remarks>
        /// The batch version of the [CreateSchemaField](/docs/api#operation/CreateSchemaField) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchCreateSchemaFieldsRequest"></param>
        /// <returns>ApiResponse of BatchCreateSchemaFieldsResponse</returns>
        ApiResponse<BatchCreateSchemaFieldsResponse> BatchCreateSchemaFieldsWithHttpInfo(string collectionId, BatchCreateSchemaFieldsRequest batchCreateSchemaFieldsRequest);
        /// <summary>
        /// Create schema field
        /// </summary>
        /// <remarks>
        /// Create a new field in a collection&#39;s schema.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a schema field in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="schemaField">The schema field to create.</param>
        /// <returns>SchemaField</returns>
        SchemaField CreateSchemaField(string collectionId, SchemaField schemaField);

        /// <summary>
        /// Create schema field
        /// </summary>
        /// <remarks>
        /// Create a new field in a collection&#39;s schema.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a schema field in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="schemaField">The schema field to create.</param>
        /// <returns>ApiResponse of SchemaField</returns>
        ApiResponse<SchemaField> CreateSchemaFieldWithHttpInfo(string collectionId, SchemaField schemaField);
        /// <summary>
        /// List schema fields
        /// </summary>
        /// <remarks>
        /// Retrieve a list of schema fields in a collection.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListSchemaFields](/docs/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/docs/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)</param>
        /// <returns>ListSchemaFieldsResponse</returns>
        ListSchemaFieldsResponse ListSchemaFields(string collectionId, int? pageSize = default(int?), string pageToken = default(string));

        /// <summary>
        /// List schema fields
        /// </summary>
        /// <remarks>
        /// Retrieve a list of schema fields in a collection.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListSchemaFields](/docs/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/docs/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)</param>
        /// <returns>ApiResponse of ListSchemaFieldsResponse</returns>
        ApiResponse<ListSchemaFieldsResponse> ListSchemaFieldsWithHttpInfo(string collectionId, int? pageSize = default(int?), string pageToken = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Batch create schema fields
        /// </summary>
        /// <remarks>
        /// The batch version of the [CreateSchemaField](/docs/api#operation/CreateSchemaField) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchCreateSchemaFieldsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchCreateSchemaFieldsResponse</returns>
        System.Threading.Tasks.Task<BatchCreateSchemaFieldsResponse> BatchCreateSchemaFieldsAsync(string collectionId, BatchCreateSchemaFieldsRequest batchCreateSchemaFieldsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Batch create schema fields
        /// </summary>
        /// <remarks>
        /// The batch version of the [CreateSchemaField](/docs/api#operation/CreateSchemaField) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchCreateSchemaFieldsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchCreateSchemaFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchCreateSchemaFieldsResponse>> BatchCreateSchemaFieldsWithHttpInfoAsync(string collectionId, BatchCreateSchemaFieldsRequest batchCreateSchemaFieldsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create schema field
        /// </summary>
        /// <remarks>
        /// Create a new field in a collection&#39;s schema.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a schema field in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="schemaField">The schema field to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaField</returns>
        System.Threading.Tasks.Task<SchemaField> CreateSchemaFieldAsync(string collectionId, SchemaField schemaField, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create schema field
        /// </summary>
        /// <remarks>
        /// Create a new field in a collection&#39;s schema.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a schema field in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="schemaField">The schema field to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaField)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaField>> CreateSchemaFieldWithHttpInfoAsync(string collectionId, SchemaField schemaField, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List schema fields
        /// </summary>
        /// <remarks>
        /// Retrieve a list of schema fields in a collection.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListSchemaFields](/docs/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/docs/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSchemaFieldsResponse</returns>
        System.Threading.Tasks.Task<ListSchemaFieldsResponse> ListSchemaFieldsAsync(string collectionId, int? pageSize = default(int?), string pageToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List schema fields
        /// </summary>
        /// <remarks>
        /// Retrieve a list of schema fields in a collection.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListSchemaFields](/docs/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/docs/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSchemaFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSchemaFieldsResponse>> ListSchemaFieldsWithHttpInfoAsync(string collectionId, int? pageSize = default(int?), string pageToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApi : ISchemaApiSync, ISchemaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchemaApi : ISchemaApi
    {
        private Com.Sajari.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemaApi(string basePath)
        {
            this.Configuration = Com.Sajari.Sdk.Client.Configuration.MergeConfigurations(
                Com.Sajari.Sdk.Client.GlobalConfiguration.Instance,
                new Com.Sajari.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Sajari.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Sajari.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Sajari.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchemaApi(Com.Sajari.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Sajari.Sdk.Client.Configuration.MergeConfigurations(
                Com.Sajari.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Sajari.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Sajari.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Sajari.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SchemaApi(Com.Sajari.Sdk.Client.ISynchronousClient client, Com.Sajari.Sdk.Client.IAsynchronousClient asyncClient, Com.Sajari.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Sajari.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Sajari.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Sajari.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Sajari.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Sajari.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Batch create schema fields The batch version of the [CreateSchemaField](/docs/api#operation/CreateSchemaField) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchCreateSchemaFieldsRequest"></param>
        /// <returns>BatchCreateSchemaFieldsResponse</returns>
        public BatchCreateSchemaFieldsResponse BatchCreateSchemaFields(string collectionId, BatchCreateSchemaFieldsRequest batchCreateSchemaFieldsRequest)
        {
            Com.Sajari.Sdk.Client.ApiResponse<BatchCreateSchemaFieldsResponse> localVarResponse = BatchCreateSchemaFieldsWithHttpInfo(collectionId, batchCreateSchemaFieldsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch create schema fields The batch version of the [CreateSchemaField](/docs/api#operation/CreateSchemaField) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchCreateSchemaFieldsRequest"></param>
        /// <returns>ApiResponse of BatchCreateSchemaFieldsResponse</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<BatchCreateSchemaFieldsResponse> BatchCreateSchemaFieldsWithHttpInfo(string collectionId, BatchCreateSchemaFieldsRequest batchCreateSchemaFieldsRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling SchemaApi->BatchCreateSchemaFields");
            }

            // verify the required parameter 'batchCreateSchemaFieldsRequest' is set
            if (batchCreateSchemaFieldsRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'batchCreateSchemaFieldsRequest' when calling SchemaApi->BatchCreateSchemaFields");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = batchCreateSchemaFieldsRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchCreateSchemaFieldsResponse>("/v4/collections/{collection_id}/schemaFields:batchCreate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchCreateSchemaFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch create schema fields The batch version of the [CreateSchemaField](/docs/api#operation/CreateSchemaField) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchCreateSchemaFieldsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchCreateSchemaFieldsResponse</returns>
        public async System.Threading.Tasks.Task<BatchCreateSchemaFieldsResponse> BatchCreateSchemaFieldsAsync(string collectionId, BatchCreateSchemaFieldsRequest batchCreateSchemaFieldsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<BatchCreateSchemaFieldsResponse> localVarResponse = await BatchCreateSchemaFieldsWithHttpInfoAsync(collectionId, batchCreateSchemaFieldsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch create schema fields The batch version of the [CreateSchemaField](/docs/api#operation/CreateSchemaField) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchCreateSchemaFieldsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchCreateSchemaFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<BatchCreateSchemaFieldsResponse>> BatchCreateSchemaFieldsWithHttpInfoAsync(string collectionId, BatchCreateSchemaFieldsRequest batchCreateSchemaFieldsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling SchemaApi->BatchCreateSchemaFields");
            }

            // verify the required parameter 'batchCreateSchemaFieldsRequest' is set
            if (batchCreateSchemaFieldsRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'batchCreateSchemaFieldsRequest' when calling SchemaApi->BatchCreateSchemaFields");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = batchCreateSchemaFieldsRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchCreateSchemaFieldsResponse>("/v4/collections/{collection_id}/schemaFields:batchCreate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchCreateSchemaFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create schema field Create a new field in a collection&#39;s schema.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a schema field in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="schemaField">The schema field to create.</param>
        /// <returns>SchemaField</returns>
        public SchemaField CreateSchemaField(string collectionId, SchemaField schemaField)
        {
            Com.Sajari.Sdk.Client.ApiResponse<SchemaField> localVarResponse = CreateSchemaFieldWithHttpInfo(collectionId, schemaField);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create schema field Create a new field in a collection&#39;s schema.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a schema field in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="schemaField">The schema field to create.</param>
        /// <returns>ApiResponse of SchemaField</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<SchemaField> CreateSchemaFieldWithHttpInfo(string collectionId, SchemaField schemaField)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling SchemaApi->CreateSchemaField");
            }

            // verify the required parameter 'schemaField' is set
            if (schemaField == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'schemaField' when calling SchemaApi->CreateSchemaField");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = schemaField;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SchemaField>("/v4/collections/{collection_id}/schemaFields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSchemaField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create schema field Create a new field in a collection&#39;s schema.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a schema field in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="schemaField">The schema field to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchemaField</returns>
        public async System.Threading.Tasks.Task<SchemaField> CreateSchemaFieldAsync(string collectionId, SchemaField schemaField, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<SchemaField> localVarResponse = await CreateSchemaFieldWithHttpInfoAsync(collectionId, schemaField, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create schema field Create a new field in a collection&#39;s schema.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a schema field in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="schemaField">The schema field to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchemaField)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<SchemaField>> CreateSchemaFieldWithHttpInfoAsync(string collectionId, SchemaField schemaField, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling SchemaApi->CreateSchemaField");
            }

            // verify the required parameter 'schemaField' is set
            if (schemaField == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'schemaField' when calling SchemaApi->CreateSchemaField");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = schemaField;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SchemaField>("/v4/collections/{collection_id}/schemaFields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSchemaField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List schema fields Retrieve a list of schema fields in a collection.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListSchemaFields](/docs/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/docs/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)</param>
        /// <returns>ListSchemaFieldsResponse</returns>
        public ListSchemaFieldsResponse ListSchemaFields(string collectionId, int? pageSize = default(int?), string pageToken = default(string))
        {
            Com.Sajari.Sdk.Client.ApiResponse<ListSchemaFieldsResponse> localVarResponse = ListSchemaFieldsWithHttpInfo(collectionId, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List schema fields Retrieve a list of schema fields in a collection.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListSchemaFields](/docs/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/docs/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)</param>
        /// <returns>ApiResponse of ListSchemaFieldsResponse</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<ListSchemaFieldsResponse> ListSchemaFieldsWithHttpInfo(string collectionId, int? pageSize = default(int?), string pageToken = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling SchemaApi->ListSchemaFields");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Sajari.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Sajari.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSchemaFieldsResponse>("/v4/collections/{collection_id}/schemaFields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSchemaFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List schema fields Retrieve a list of schema fields in a collection.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListSchemaFields](/docs/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/docs/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSchemaFieldsResponse</returns>
        public async System.Threading.Tasks.Task<ListSchemaFieldsResponse> ListSchemaFieldsAsync(string collectionId, int? pageSize = default(int?), string pageToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<ListSchemaFieldsResponse> localVarResponse = await ListSchemaFieldsWithHttpInfoAsync(collectionId, pageSize, pageToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List schema fields Retrieve a list of schema fields in a collection.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListSchemaFields](/docs/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/docs/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSchemaFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<ListSchemaFieldsResponse>> ListSchemaFieldsWithHttpInfoAsync(string collectionId, int? pageSize = default(int?), string pageToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling SchemaApi->ListSchemaFields");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Sajari.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Sajari.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSchemaFieldsResponse>("/v4/collections/{collection_id}/schemaFields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSchemaFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
