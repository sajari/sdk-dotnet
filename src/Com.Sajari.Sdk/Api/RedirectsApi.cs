/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Sajari.Sdk.Client;
using Com.Sajari.Sdk.Model;

namespace Com.Sajari.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedirectsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create redirect
        /// </summary>
        /// <remarks>
        /// Create a new redirect in a collection.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a redirect in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirect">The redirect to create.</param>
        /// <returns>Redirect</returns>
        Redirect CreateRedirect(string collectionId, Redirect redirect);

        /// <summary>
        /// Create redirect
        /// </summary>
        /// <remarks>
        /// Create a new redirect in a collection.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a redirect in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirect">The redirect to create.</param>
        /// <returns>ApiResponse of Redirect</returns>
        ApiResponse<Redirect> CreateRedirectWithHttpInfo(string collectionId, Redirect redirect);
        /// <summary>
        /// Delete redirect
        /// </summary>
        /// <remarks>
        /// Delete a redirect and all of its associated data.  &gt; Note: This operation cannot be reversed.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to delete, e.g. &#x60;1234&#x60;.</param>
        /// <returns>Object</returns>
        Object DeleteRedirect(string collectionId, string redirectId);

        /// <summary>
        /// Delete redirect
        /// </summary>
        /// <remarks>
        /// Delete a redirect and all of its associated data.  &gt; Note: This operation cannot be reversed.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to delete, e.g. &#x60;1234&#x60;.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteRedirectWithHttpInfo(string collectionId, string redirectId);
        /// <summary>
        /// Get redirect
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a redirect.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns the redirect, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to retrieve, e.g. &#x60;1234&#x60;.</param>
        /// <returns>Redirect</returns>
        Redirect GetRedirect(string collectionId, string redirectId);

        /// <summary>
        /// Get redirect
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a redirect.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns the redirect, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to retrieve, e.g. &#x60;1234&#x60;.</param>
        /// <returns>ApiResponse of Redirect</returns>
        ApiResponse<Redirect> GetRedirectWithHttpInfo(string collectionId, string redirectId);
        /// <summary>
        /// List redirects
        /// </summary>
        /// <remarks>
        /// Retrieve a list of redirects in a collection.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of redirects, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of redirects to return. The service may return fewer than this value.  If unspecified, at most 50 redirects are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListRedirects](/docs/api#operation/ListRedirects) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListRedirects](/docs/api#operation/ListRedirects) must match the call that provided the page token. (optional)</param>
        /// <returns>ListRedirectsResponse</returns>
        ListRedirectsResponse ListRedirects(string collectionId, int? pageSize = default(int?), string pageToken = default(string));

        /// <summary>
        /// List redirects
        /// </summary>
        /// <remarks>
        /// Retrieve a list of redirects in a collection.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of redirects, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of redirects to return. The service may return fewer than this value.  If unspecified, at most 50 redirects are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListRedirects](/docs/api#operation/ListRedirects) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListRedirects](/docs/api#operation/ListRedirects) must match the call that provided the page token. (optional)</param>
        /// <returns>ApiResponse of ListRedirectsResponse</returns>
        ApiResponse<ListRedirectsResponse> ListRedirectsWithHttpInfo(string collectionId, int? pageSize = default(int?), string pageToken = default(string));
        /// <summary>
        /// Update redirect
        /// </summary>
        /// <remarks>
        /// Update the details of a redirect.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;condition&#x60; field, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/redirects/{redirect_id}?update_mask&#x3D;condition &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;condition\&quot;: \&quot;new value\&quot;,   \&quot;target\&quot;: \&quot;...\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;target&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to update, e.g. &#x60;1234&#x60;.</param>
        /// <param name="updateMask">The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;condition&#x60;, &#x60;target&#x60;.  For each field that you want to update, provide a corresponding value in the redirect object containing the new value.</param>
        /// <param name="redirect">Details of the redirect to update.</param>
        /// <returns>Redirect</returns>
        Redirect UpdateRedirect(string collectionId, string redirectId, string updateMask, Redirect redirect);

        /// <summary>
        /// Update redirect
        /// </summary>
        /// <remarks>
        /// Update the details of a redirect.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;condition&#x60; field, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/redirects/{redirect_id}?update_mask&#x3D;condition &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;condition\&quot;: \&quot;new value\&quot;,   \&quot;target\&quot;: \&quot;...\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;target&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to update, e.g. &#x60;1234&#x60;.</param>
        /// <param name="updateMask">The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;condition&#x60;, &#x60;target&#x60;.  For each field that you want to update, provide a corresponding value in the redirect object containing the new value.</param>
        /// <param name="redirect">Details of the redirect to update.</param>
        /// <returns>ApiResponse of Redirect</returns>
        ApiResponse<Redirect> UpdateRedirectWithHttpInfo(string collectionId, string redirectId, string updateMask, Redirect redirect);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedirectsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create redirect
        /// </summary>
        /// <remarks>
        /// Create a new redirect in a collection.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a redirect in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirect">The redirect to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Redirect</returns>
        System.Threading.Tasks.Task<Redirect> CreateRedirectAsync(string collectionId, Redirect redirect, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create redirect
        /// </summary>
        /// <remarks>
        /// Create a new redirect in a collection.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a redirect in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirect">The redirect to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Redirect)</returns>
        System.Threading.Tasks.Task<ApiResponse<Redirect>> CreateRedirectWithHttpInfoAsync(string collectionId, Redirect redirect, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete redirect
        /// </summary>
        /// <remarks>
        /// Delete a redirect and all of its associated data.  &gt; Note: This operation cannot be reversed.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to delete, e.g. &#x60;1234&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteRedirectAsync(string collectionId, string redirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete redirect
        /// </summary>
        /// <remarks>
        /// Delete a redirect and all of its associated data.  &gt; Note: This operation cannot be reversed.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to delete, e.g. &#x60;1234&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRedirectWithHttpInfoAsync(string collectionId, string redirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get redirect
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a redirect.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns the redirect, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to retrieve, e.g. &#x60;1234&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Redirect</returns>
        System.Threading.Tasks.Task<Redirect> GetRedirectAsync(string collectionId, string redirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get redirect
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a redirect.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns the redirect, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to retrieve, e.g. &#x60;1234&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Redirect)</returns>
        System.Threading.Tasks.Task<ApiResponse<Redirect>> GetRedirectWithHttpInfoAsync(string collectionId, string redirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List redirects
        /// </summary>
        /// <remarks>
        /// Retrieve a list of redirects in a collection.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of redirects, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of redirects to return. The service may return fewer than this value.  If unspecified, at most 50 redirects are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListRedirects](/docs/api#operation/ListRedirects) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListRedirects](/docs/api#operation/ListRedirects) must match the call that provided the page token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRedirectsResponse</returns>
        System.Threading.Tasks.Task<ListRedirectsResponse> ListRedirectsAsync(string collectionId, int? pageSize = default(int?), string pageToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List redirects
        /// </summary>
        /// <remarks>
        /// Retrieve a list of redirects in a collection.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of redirects, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of redirects to return. The service may return fewer than this value.  If unspecified, at most 50 redirects are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListRedirects](/docs/api#operation/ListRedirects) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListRedirects](/docs/api#operation/ListRedirects) must match the call that provided the page token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRedirectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRedirectsResponse>> ListRedirectsWithHttpInfoAsync(string collectionId, int? pageSize = default(int?), string pageToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update redirect
        /// </summary>
        /// <remarks>
        /// Update the details of a redirect.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;condition&#x60; field, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/redirects/{redirect_id}?update_mask&#x3D;condition &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;condition\&quot;: \&quot;new value\&quot;,   \&quot;target\&quot;: \&quot;...\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;target&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to update, e.g. &#x60;1234&#x60;.</param>
        /// <param name="updateMask">The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;condition&#x60;, &#x60;target&#x60;.  For each field that you want to update, provide a corresponding value in the redirect object containing the new value.</param>
        /// <param name="redirect">Details of the redirect to update.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Redirect</returns>
        System.Threading.Tasks.Task<Redirect> UpdateRedirectAsync(string collectionId, string redirectId, string updateMask, Redirect redirect, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update redirect
        /// </summary>
        /// <remarks>
        /// Update the details of a redirect.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;condition&#x60; field, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/redirects/{redirect_id}?update_mask&#x3D;condition &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;condition\&quot;: \&quot;new value\&quot;,   \&quot;target\&quot;: \&quot;...\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;target&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to update, e.g. &#x60;1234&#x60;.</param>
        /// <param name="updateMask">The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;condition&#x60;, &#x60;target&#x60;.  For each field that you want to update, provide a corresponding value in the redirect object containing the new value.</param>
        /// <param name="redirect">Details of the redirect to update.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Redirect)</returns>
        System.Threading.Tasks.Task<ApiResponse<Redirect>> UpdateRedirectWithHttpInfoAsync(string collectionId, string redirectId, string updateMask, Redirect redirect, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedirectsApi : IRedirectsApiSync, IRedirectsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RedirectsApi : IRedirectsApi
    {
        private Com.Sajari.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RedirectsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RedirectsApi(string basePath)
        {
            this.Configuration = Com.Sajari.Sdk.Client.Configuration.MergeConfigurations(
                Com.Sajari.Sdk.Client.GlobalConfiguration.Instance,
                new Com.Sajari.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Sajari.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Sajari.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Sajari.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RedirectsApi(Com.Sajari.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Sajari.Sdk.Client.Configuration.MergeConfigurations(
                Com.Sajari.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Sajari.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Sajari.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Sajari.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RedirectsApi(Com.Sajari.Sdk.Client.ISynchronousClient client, Com.Sajari.Sdk.Client.IAsynchronousClient asyncClient, Com.Sajari.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Sajari.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Sajari.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Sajari.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Sajari.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Sajari.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create redirect Create a new redirect in a collection.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a redirect in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirect">The redirect to create.</param>
        /// <returns>Redirect</returns>
        public Redirect CreateRedirect(string collectionId, Redirect redirect)
        {
            Com.Sajari.Sdk.Client.ApiResponse<Redirect> localVarResponse = CreateRedirectWithHttpInfo(collectionId, redirect);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create redirect Create a new redirect in a collection.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a redirect in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirect">The redirect to create.</param>
        /// <returns>ApiResponse of Redirect</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<Redirect> CreateRedirectWithHttpInfo(string collectionId, Redirect redirect)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RedirectsApi->CreateRedirect");
            }

            // verify the required parameter 'redirect' is set
            if (redirect == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'redirect' when calling RedirectsApi->CreateRedirect");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = redirect;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Redirect>("/v4/collections/{collection_id}/redirects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRedirect", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create redirect Create a new redirect in a collection.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a redirect in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirect">The redirect to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Redirect</returns>
        public async System.Threading.Tasks.Task<Redirect> CreateRedirectAsync(string collectionId, Redirect redirect, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<Redirect> localVarResponse = await CreateRedirectWithHttpInfoAsync(collectionId, redirect, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create redirect Create a new redirect in a collection.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to create a redirect in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirect">The redirect to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Redirect)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<Redirect>> CreateRedirectWithHttpInfoAsync(string collectionId, Redirect redirect, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RedirectsApi->CreateRedirect");
            }

            // verify the required parameter 'redirect' is set
            if (redirect == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'redirect' when calling RedirectsApi->CreateRedirect");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = redirect;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Redirect>("/v4/collections/{collection_id}/redirects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRedirect", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete redirect Delete a redirect and all of its associated data.  &gt; Note: This operation cannot be reversed.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to delete, e.g. &#x60;1234&#x60;.</param>
        /// <returns>Object</returns>
        public Object DeleteRedirect(string collectionId, string redirectId)
        {
            Com.Sajari.Sdk.Client.ApiResponse<Object> localVarResponse = DeleteRedirectWithHttpInfo(collectionId, redirectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete redirect Delete a redirect and all of its associated data.  &gt; Note: This operation cannot be reversed.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to delete, e.g. &#x60;1234&#x60;.</param>
        /// <returns>ApiResponse of Object</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<Object> DeleteRedirectWithHttpInfo(string collectionId, string redirectId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RedirectsApi->DeleteRedirect");
            }

            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'redirectId' when calling RedirectsApi->DeleteRedirect");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("redirect_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v4/collections/{collection_id}/redirects/{redirect_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRedirect", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete redirect Delete a redirect and all of its associated data.  &gt; Note: This operation cannot be reversed.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to delete, e.g. &#x60;1234&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteRedirectAsync(string collectionId, string redirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<Object> localVarResponse = await DeleteRedirectWithHttpInfoAsync(collectionId, redirectId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete redirect Delete a redirect and all of its associated data.  &gt; Note: This operation cannot be reversed.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to delete, e.g. &#x60;1234&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<Object>> DeleteRedirectWithHttpInfoAsync(string collectionId, string redirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RedirectsApi->DeleteRedirect");
            }

            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'redirectId' when calling RedirectsApi->DeleteRedirect");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("redirect_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v4/collections/{collection_id}/redirects/{redirect_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRedirect", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get redirect Retrieve the details of a redirect.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns the redirect, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to retrieve, e.g. &#x60;1234&#x60;.</param>
        /// <returns>Redirect</returns>
        public Redirect GetRedirect(string collectionId, string redirectId)
        {
            Com.Sajari.Sdk.Client.ApiResponse<Redirect> localVarResponse = GetRedirectWithHttpInfo(collectionId, redirectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get redirect Retrieve the details of a redirect.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns the redirect, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to retrieve, e.g. &#x60;1234&#x60;.</param>
        /// <returns>ApiResponse of Redirect</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<Redirect> GetRedirectWithHttpInfo(string collectionId, string redirectId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RedirectsApi->GetRedirect");
            }

            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'redirectId' when calling RedirectsApi->GetRedirect");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("redirect_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Redirect>("/v4/collections/{collection_id}/redirects/{redirect_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRedirect", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get redirect Retrieve the details of a redirect.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns the redirect, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to retrieve, e.g. &#x60;1234&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Redirect</returns>
        public async System.Threading.Tasks.Task<Redirect> GetRedirectAsync(string collectionId, string redirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<Redirect> localVarResponse = await GetRedirectWithHttpInfoAsync(collectionId, redirectId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get redirect Retrieve the details of a redirect.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns the redirect, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to retrieve, e.g. &#x60;1234&#x60;.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Redirect)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<Redirect>> GetRedirectWithHttpInfoAsync(string collectionId, string redirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RedirectsApi->GetRedirect");
            }

            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'redirectId' when calling RedirectsApi->GetRedirect");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("redirect_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Redirect>("/v4/collections/{collection_id}/redirects/{redirect_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRedirect", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List redirects Retrieve a list of redirects in a collection.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of redirects, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of redirects to return. The service may return fewer than this value.  If unspecified, at most 50 redirects are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListRedirects](/docs/api#operation/ListRedirects) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListRedirects](/docs/api#operation/ListRedirects) must match the call that provided the page token. (optional)</param>
        /// <returns>ListRedirectsResponse</returns>
        public ListRedirectsResponse ListRedirects(string collectionId, int? pageSize = default(int?), string pageToken = default(string))
        {
            Com.Sajari.Sdk.Client.ApiResponse<ListRedirectsResponse> localVarResponse = ListRedirectsWithHttpInfo(collectionId, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List redirects Retrieve a list of redirects in a collection.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of redirects, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of redirects to return. The service may return fewer than this value.  If unspecified, at most 50 redirects are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListRedirects](/docs/api#operation/ListRedirects) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListRedirects](/docs/api#operation/ListRedirects) must match the call that provided the page token. (optional)</param>
        /// <returns>ApiResponse of ListRedirectsResponse</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<ListRedirectsResponse> ListRedirectsWithHttpInfo(string collectionId, int? pageSize = default(int?), string pageToken = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RedirectsApi->ListRedirects");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Sajari.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Sajari.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListRedirectsResponse>("/v4/collections/{collection_id}/redirects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRedirects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List redirects Retrieve a list of redirects in a collection.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of redirects, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of redirects to return. The service may return fewer than this value.  If unspecified, at most 50 redirects are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListRedirects](/docs/api#operation/ListRedirects) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListRedirects](/docs/api#operation/ListRedirects) must match the call that provided the page token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRedirectsResponse</returns>
        public async System.Threading.Tasks.Task<ListRedirectsResponse> ListRedirectsAsync(string collectionId, int? pageSize = default(int?), string pageToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<ListRedirectsResponse> localVarResponse = await ListRedirectsWithHttpInfoAsync(collectionId, pageSize, pageToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List redirects Retrieve a list of redirects in a collection.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that owns this set of redirects, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="pageSize">The maximum number of redirects to return. The service may return fewer than this value.  If unspecified, at most 50 redirects are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)</param>
        /// <param name="pageToken">A page token, received from a previous [ListRedirects](/docs/api#operation/ListRedirects) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListRedirects](/docs/api#operation/ListRedirects) must match the call that provided the page token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRedirectsResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<ListRedirectsResponse>> ListRedirectsWithHttpInfoAsync(string collectionId, int? pageSize = default(int?), string pageToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RedirectsApi->ListRedirects");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Sajari.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Sajari.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListRedirectsResponse>("/v4/collections/{collection_id}/redirects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRedirects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update redirect Update the details of a redirect.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;condition&#x60; field, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/redirects/{redirect_id}?update_mask&#x3D;condition &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;condition\&quot;: \&quot;new value\&quot;,   \&quot;target\&quot;: \&quot;...\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;target&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to update, e.g. &#x60;1234&#x60;.</param>
        /// <param name="updateMask">The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;condition&#x60;, &#x60;target&#x60;.  For each field that you want to update, provide a corresponding value in the redirect object containing the new value.</param>
        /// <param name="redirect">Details of the redirect to update.</param>
        /// <returns>Redirect</returns>
        public Redirect UpdateRedirect(string collectionId, string redirectId, string updateMask, Redirect redirect)
        {
            Com.Sajari.Sdk.Client.ApiResponse<Redirect> localVarResponse = UpdateRedirectWithHttpInfo(collectionId, redirectId, updateMask, redirect);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update redirect Update the details of a redirect.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;condition&#x60; field, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/redirects/{redirect_id}?update_mask&#x3D;condition &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;condition\&quot;: \&quot;new value\&quot;,   \&quot;target\&quot;: \&quot;...\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;target&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to update, e.g. &#x60;1234&#x60;.</param>
        /// <param name="updateMask">The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;condition&#x60;, &#x60;target&#x60;.  For each field that you want to update, provide a corresponding value in the redirect object containing the new value.</param>
        /// <param name="redirect">Details of the redirect to update.</param>
        /// <returns>ApiResponse of Redirect</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<Redirect> UpdateRedirectWithHttpInfo(string collectionId, string redirectId, string updateMask, Redirect redirect)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RedirectsApi->UpdateRedirect");
            }

            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'redirectId' when calling RedirectsApi->UpdateRedirect");
            }

            // verify the required parameter 'updateMask' is set
            if (updateMask == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'updateMask' when calling RedirectsApi->UpdateRedirect");
            }

            // verify the required parameter 'redirect' is set
            if (redirect == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'redirect' when calling RedirectsApi->UpdateRedirect");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("redirect_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(redirectId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Sajari.Sdk.Client.ClientUtils.ParameterToMultiMap("", "update_mask", updateMask));
            localVarRequestOptions.Data = redirect;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Redirect>("/v4/collections/{collection_id}/redirects/{redirect_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRedirect", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update redirect Update the details of a redirect.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;condition&#x60; field, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/redirects/{redirect_id}?update_mask&#x3D;condition &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;condition\&quot;: \&quot;new value\&quot;,   \&quot;target\&quot;: \&quot;...\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;target&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to update, e.g. &#x60;1234&#x60;.</param>
        /// <param name="updateMask">The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;condition&#x60;, &#x60;target&#x60;.  For each field that you want to update, provide a corresponding value in the redirect object containing the new value.</param>
        /// <param name="redirect">Details of the redirect to update.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Redirect</returns>
        public async System.Threading.Tasks.Task<Redirect> UpdateRedirectAsync(string collectionId, string redirectId, string updateMask, Redirect redirect, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<Redirect> localVarResponse = await UpdateRedirectWithHttpInfoAsync(collectionId, redirectId, updateMask, redirect, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update redirect Update the details of a redirect.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;condition&#x60; field, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/redirects/{redirect_id}?update_mask&#x3D;condition &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;condition\&quot;: \&quot;new value\&quot;,   \&quot;target\&quot;: \&quot;...\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;target&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection the redirect belongs to, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="redirectId">The redirect to update, e.g. &#x60;1234&#x60;.</param>
        /// <param name="updateMask">The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;condition&#x60;, &#x60;target&#x60;.  For each field that you want to update, provide a corresponding value in the redirect object containing the new value.</param>
        /// <param name="redirect">Details of the redirect to update.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Redirect)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<Redirect>> UpdateRedirectWithHttpInfoAsync(string collectionId, string redirectId, string updateMask, Redirect redirect, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RedirectsApi->UpdateRedirect");
            }

            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'redirectId' when calling RedirectsApi->UpdateRedirect");
            }

            // verify the required parameter 'updateMask' is set
            if (updateMask == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'updateMask' when calling RedirectsApi->UpdateRedirect");
            }

            // verify the required parameter 'redirect' is set
            if (redirect == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'redirect' when calling RedirectsApi->UpdateRedirect");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("redirect_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(redirectId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Com.Sajari.Sdk.Client.ClientUtils.ParameterToMultiMap("", "update_mask", updateMask));
            localVarRequestOptions.Data = redirect;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Redirect>("/v4/collections/{collection_id}/redirects/{redirect_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRedirect", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
