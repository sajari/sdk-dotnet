/*
 * Search.io API
 *
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Sajari.Sdk.Client;
using Com.Sajari.Sdk.Model;

namespace Com.Sajari.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Batch update records
        /// </summary>
        /// <remarks>
        /// The batch version of the [UpdateRecord](/docs/api#operation/UpdateRecord) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the records to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpdateRecordsRequest"></param>
        /// <returns>BatchUpdateRecordsResponse</returns>
        BatchUpdateRecordsResponse BatchUpdateRecords(string collectionId, BatchUpdateRecordsRequest batchUpdateRecordsRequest);

        /// <summary>
        /// Batch update records
        /// </summary>
        /// <remarks>
        /// The batch version of the [UpdateRecord](/docs/api#operation/UpdateRecord) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the records to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpdateRecordsRequest"></param>
        /// <returns>ApiResponse of BatchUpdateRecordsResponse</returns>
        ApiResponse<BatchUpdateRecordsResponse> BatchUpdateRecordsWithHttpInfo(string collectionId, BatchUpdateRecordsRequest batchUpdateRecordsRequest);
        /// <summary>
        /// Batch upsert records
        /// </summary>
        /// <remarks>
        /// The batch version of the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the records in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpsertRecordsRequest"></param>
        /// <returns>BatchUpsertRecordsResponse</returns>
        BatchUpsertRecordsResponse BatchUpsertRecords(string collectionId, BatchUpsertRecordsRequest batchUpsertRecordsRequest);

        /// <summary>
        /// Batch upsert records
        /// </summary>
        /// <remarks>
        /// The batch version of the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the records in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpsertRecordsRequest"></param>
        /// <returns>ApiResponse of BatchUpsertRecordsResponse</returns>
        ApiResponse<BatchUpsertRecordsResponse> BatchUpsertRecordsWithHttpInfo(string collectionId, BatchUpsertRecordsRequest batchUpsertRecordsRequest);
        /// <summary>
        /// Delete record
        /// </summary>
        /// <remarks>
        /// Delete a record with the given key.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to delete, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="deleteRecordRequest"></param>
        /// <returns>Object</returns>
        Object DeleteRecord(string collectionId, DeleteRecordRequest deleteRecordRequest);

        /// <summary>
        /// Delete record
        /// </summary>
        /// <remarks>
        /// Delete a record with the given key.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to delete, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="deleteRecordRequest"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteRecordWithHttpInfo(string collectionId, DeleteRecordRequest deleteRecordRequest);
        /// <summary>
        /// Get record
        /// </summary>
        /// <remarks>
        /// Retrieve a record with the given key.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to retrieve, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="getRecordRequest"></param>
        /// <returns>Object</returns>
        Object GetRecord(string collectionId, GetRecordRequest getRecordRequest);

        /// <summary>
        /// Get record
        /// </summary>
        /// <remarks>
        /// Retrieve a record with the given key.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to retrieve, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="getRecordRequest"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetRecordWithHttpInfo(string collectionId, GetRecordRequest getRecordRequest);
        /// <summary>
        /// Update record
        /// </summary>
        /// <remarks>
        /// Add or update specific fields within a record with the given values. The updated record is returned in the response.  To replace all fields in a record, you should use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.  Note that the update record call cannot be used to add or update indexed or unique fields. For this case use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="updateRecordRequest"></param>
        /// <returns>Object</returns>
        Object UpdateRecord(string collectionId, UpdateRecordRequest updateRecordRequest);

        /// <summary>
        /// Update record
        /// </summary>
        /// <remarks>
        /// Add or update specific fields within a record with the given values. The updated record is returned in the response.  To replace all fields in a record, you should use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.  Note that the update record call cannot be used to add or update indexed or unique fields. For this case use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="updateRecordRequest"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateRecordWithHttpInfo(string collectionId, UpdateRecordRequest updateRecordRequest);
        /// <summary>
        /// Upsert record
        /// </summary>
        /// <remarks>
        /// If the record does not exist in the collection it is inserted. If it does exist it is updated.  If no pipeline is specified, the default record pipeline is used to process the record.  If the record is inserted, the response contains the key of the inserted record. You can use this if you need to retrieve or delete the record. If the record is updated, the response does not contain a key. Callers can use this as a signal to determine if the record is inserted/created or updated.  For example, to add a single product from your ecommerce store to a collection, use the following call:  &#x60;&#x60;&#x60;json {   \&quot;pipeline\&quot;: {     \&quot;name\&quot;: \&quot;my-pipeline\&quot;,     \&quot;version\&quot;: \&quot;1\&quot;   },   \&quot;record\&quot;: {     \&quot;id\&quot;: \&quot;54hdc7h2334h\&quot;,     \&quot;name\&quot;: \&quot;Smart TV\&quot;,     \&quot;price\&quot;: 1999,     \&quot;brand\&quot;: \&quot;Acme\&quot;,     \&quot;description\&quot;: \&quot;...\&quot;,     \&quot;in_stock\&quot;: true   } } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the record in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="upsertRecordRequest"></param>
        /// <returns>UpsertRecordResponse</returns>
        UpsertRecordResponse UpsertRecord(string collectionId, UpsertRecordRequest upsertRecordRequest);

        /// <summary>
        /// Upsert record
        /// </summary>
        /// <remarks>
        /// If the record does not exist in the collection it is inserted. If it does exist it is updated.  If no pipeline is specified, the default record pipeline is used to process the record.  If the record is inserted, the response contains the key of the inserted record. You can use this if you need to retrieve or delete the record. If the record is updated, the response does not contain a key. Callers can use this as a signal to determine if the record is inserted/created or updated.  For example, to add a single product from your ecommerce store to a collection, use the following call:  &#x60;&#x60;&#x60;json {   \&quot;pipeline\&quot;: {     \&quot;name\&quot;: \&quot;my-pipeline\&quot;,     \&quot;version\&quot;: \&quot;1\&quot;   },   \&quot;record\&quot;: {     \&quot;id\&quot;: \&quot;54hdc7h2334h\&quot;,     \&quot;name\&quot;: \&quot;Smart TV\&quot;,     \&quot;price\&quot;: 1999,     \&quot;brand\&quot;: \&quot;Acme\&quot;,     \&quot;description\&quot;: \&quot;...\&quot;,     \&quot;in_stock\&quot;: true   } } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the record in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="upsertRecordRequest"></param>
        /// <returns>ApiResponse of UpsertRecordResponse</returns>
        ApiResponse<UpsertRecordResponse> UpsertRecordWithHttpInfo(string collectionId, UpsertRecordRequest upsertRecordRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Batch update records
        /// </summary>
        /// <remarks>
        /// The batch version of the [UpdateRecord](/docs/api#operation/UpdateRecord) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the records to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpdateRecordsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchUpdateRecordsResponse</returns>
        System.Threading.Tasks.Task<BatchUpdateRecordsResponse> BatchUpdateRecordsAsync(string collectionId, BatchUpdateRecordsRequest batchUpdateRecordsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Batch update records
        /// </summary>
        /// <remarks>
        /// The batch version of the [UpdateRecord](/docs/api#operation/UpdateRecord) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the records to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpdateRecordsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchUpdateRecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchUpdateRecordsResponse>> BatchUpdateRecordsWithHttpInfoAsync(string collectionId, BatchUpdateRecordsRequest batchUpdateRecordsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Batch upsert records
        /// </summary>
        /// <remarks>
        /// The batch version of the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the records in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpsertRecordsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchUpsertRecordsResponse</returns>
        System.Threading.Tasks.Task<BatchUpsertRecordsResponse> BatchUpsertRecordsAsync(string collectionId, BatchUpsertRecordsRequest batchUpsertRecordsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Batch upsert records
        /// </summary>
        /// <remarks>
        /// The batch version of the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the records in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpsertRecordsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchUpsertRecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchUpsertRecordsResponse>> BatchUpsertRecordsWithHttpInfoAsync(string collectionId, BatchUpsertRecordsRequest batchUpsertRecordsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete record
        /// </summary>
        /// <remarks>
        /// Delete a record with the given key.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to delete, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="deleteRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteRecordAsync(string collectionId, DeleteRecordRequest deleteRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete record
        /// </summary>
        /// <remarks>
        /// Delete a record with the given key.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to delete, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="deleteRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordWithHttpInfoAsync(string collectionId, DeleteRecordRequest deleteRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get record
        /// </summary>
        /// <remarks>
        /// Retrieve a record with the given key.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to retrieve, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="getRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetRecordAsync(string collectionId, GetRecordRequest getRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get record
        /// </summary>
        /// <remarks>
        /// Retrieve a record with the given key.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to retrieve, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="getRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetRecordWithHttpInfoAsync(string collectionId, GetRecordRequest getRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update record
        /// </summary>
        /// <remarks>
        /// Add or update specific fields within a record with the given values. The updated record is returned in the response.  To replace all fields in a record, you should use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.  Note that the update record call cannot be used to add or update indexed or unique fields. For this case use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="updateRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateRecordAsync(string collectionId, UpdateRecordRequest updateRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update record
        /// </summary>
        /// <remarks>
        /// Add or update specific fields within a record with the given values. The updated record is returned in the response.  To replace all fields in a record, you should use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.  Note that the update record call cannot be used to add or update indexed or unique fields. For this case use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="updateRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRecordWithHttpInfoAsync(string collectionId, UpdateRecordRequest updateRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upsert record
        /// </summary>
        /// <remarks>
        /// If the record does not exist in the collection it is inserted. If it does exist it is updated.  If no pipeline is specified, the default record pipeline is used to process the record.  If the record is inserted, the response contains the key of the inserted record. You can use this if you need to retrieve or delete the record. If the record is updated, the response does not contain a key. Callers can use this as a signal to determine if the record is inserted/created or updated.  For example, to add a single product from your ecommerce store to a collection, use the following call:  &#x60;&#x60;&#x60;json {   \&quot;pipeline\&quot;: {     \&quot;name\&quot;: \&quot;my-pipeline\&quot;,     \&quot;version\&quot;: \&quot;1\&quot;   },   \&quot;record\&quot;: {     \&quot;id\&quot;: \&quot;54hdc7h2334h\&quot;,     \&quot;name\&quot;: \&quot;Smart TV\&quot;,     \&quot;price\&quot;: 1999,     \&quot;brand\&quot;: \&quot;Acme\&quot;,     \&quot;description\&quot;: \&quot;...\&quot;,     \&quot;in_stock\&quot;: true   } } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the record in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="upsertRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpsertRecordResponse</returns>
        System.Threading.Tasks.Task<UpsertRecordResponse> UpsertRecordAsync(string collectionId, UpsertRecordRequest upsertRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upsert record
        /// </summary>
        /// <remarks>
        /// If the record does not exist in the collection it is inserted. If it does exist it is updated.  If no pipeline is specified, the default record pipeline is used to process the record.  If the record is inserted, the response contains the key of the inserted record. You can use this if you need to retrieve or delete the record. If the record is updated, the response does not contain a key. Callers can use this as a signal to determine if the record is inserted/created or updated.  For example, to add a single product from your ecommerce store to a collection, use the following call:  &#x60;&#x60;&#x60;json {   \&quot;pipeline\&quot;: {     \&quot;name\&quot;: \&quot;my-pipeline\&quot;,     \&quot;version\&quot;: \&quot;1\&quot;   },   \&quot;record\&quot;: {     \&quot;id\&quot;: \&quot;54hdc7h2334h\&quot;,     \&quot;name\&quot;: \&quot;Smart TV\&quot;,     \&quot;price\&quot;: 1999,     \&quot;brand\&quot;: \&quot;Acme\&quot;,     \&quot;description\&quot;: \&quot;...\&quot;,     \&quot;in_stock\&quot;: true   } } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the record in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="upsertRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpsertRecordResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpsertRecordResponse>> UpsertRecordWithHttpInfoAsync(string collectionId, UpsertRecordRequest upsertRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordsApi : IRecordsApiSync, IRecordsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordsApi : IRecordsApi
    {
        private Com.Sajari.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordsApi(string basePath)
        {
            this.Configuration = Com.Sajari.Sdk.Client.Configuration.MergeConfigurations(
                Com.Sajari.Sdk.Client.GlobalConfiguration.Instance,
                new Com.Sajari.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Sajari.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Sajari.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Sajari.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordsApi(Com.Sajari.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Sajari.Sdk.Client.Configuration.MergeConfigurations(
                Com.Sajari.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Sajari.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Sajari.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Sajari.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecordsApi(Com.Sajari.Sdk.Client.ISynchronousClient client, Com.Sajari.Sdk.Client.IAsynchronousClient asyncClient, Com.Sajari.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Sajari.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Sajari.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Sajari.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Sajari.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Sajari.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Batch update records The batch version of the [UpdateRecord](/docs/api#operation/UpdateRecord) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the records to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpdateRecordsRequest"></param>
        /// <returns>BatchUpdateRecordsResponse</returns>
        public BatchUpdateRecordsResponse BatchUpdateRecords(string collectionId, BatchUpdateRecordsRequest batchUpdateRecordsRequest)
        {
            Com.Sajari.Sdk.Client.ApiResponse<BatchUpdateRecordsResponse> localVarResponse = BatchUpdateRecordsWithHttpInfo(collectionId, batchUpdateRecordsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch update records The batch version of the [UpdateRecord](/docs/api#operation/UpdateRecord) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the records to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpdateRecordsRequest"></param>
        /// <returns>ApiResponse of BatchUpdateRecordsResponse</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<BatchUpdateRecordsResponse> BatchUpdateRecordsWithHttpInfo(string collectionId, BatchUpdateRecordsRequest batchUpdateRecordsRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RecordsApi->BatchUpdateRecords");
            }

            // verify the required parameter 'batchUpdateRecordsRequest' is set
            if (batchUpdateRecordsRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'batchUpdateRecordsRequest' when calling RecordsApi->BatchUpdateRecords");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = batchUpdateRecordsRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchUpdateRecordsResponse>("/v4/collections/{collection_id}/records:batchUpdate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch update records The batch version of the [UpdateRecord](/docs/api#operation/UpdateRecord) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the records to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpdateRecordsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchUpdateRecordsResponse</returns>
        public async System.Threading.Tasks.Task<BatchUpdateRecordsResponse> BatchUpdateRecordsAsync(string collectionId, BatchUpdateRecordsRequest batchUpdateRecordsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<BatchUpdateRecordsResponse> localVarResponse = await BatchUpdateRecordsWithHttpInfoAsync(collectionId, batchUpdateRecordsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch update records The batch version of the [UpdateRecord](/docs/api#operation/UpdateRecord) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the records to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpdateRecordsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchUpdateRecordsResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<BatchUpdateRecordsResponse>> BatchUpdateRecordsWithHttpInfoAsync(string collectionId, BatchUpdateRecordsRequest batchUpdateRecordsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RecordsApi->BatchUpdateRecords");
            }

            // verify the required parameter 'batchUpdateRecordsRequest' is set
            if (batchUpdateRecordsRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'batchUpdateRecordsRequest' when calling RecordsApi->BatchUpdateRecords");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = batchUpdateRecordsRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchUpdateRecordsResponse>("/v4/collections/{collection_id}/records:batchUpdate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch upsert records The batch version of the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the records in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpsertRecordsRequest"></param>
        /// <returns>BatchUpsertRecordsResponse</returns>
        public BatchUpsertRecordsResponse BatchUpsertRecords(string collectionId, BatchUpsertRecordsRequest batchUpsertRecordsRequest)
        {
            Com.Sajari.Sdk.Client.ApiResponse<BatchUpsertRecordsResponse> localVarResponse = BatchUpsertRecordsWithHttpInfo(collectionId, batchUpsertRecordsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch upsert records The batch version of the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the records in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpsertRecordsRequest"></param>
        /// <returns>ApiResponse of BatchUpsertRecordsResponse</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<BatchUpsertRecordsResponse> BatchUpsertRecordsWithHttpInfo(string collectionId, BatchUpsertRecordsRequest batchUpsertRecordsRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RecordsApi->BatchUpsertRecords");
            }

            // verify the required parameter 'batchUpsertRecordsRequest' is set
            if (batchUpsertRecordsRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'batchUpsertRecordsRequest' when calling RecordsApi->BatchUpsertRecords");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = batchUpsertRecordsRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchUpsertRecordsResponse>("/v4/collections/{collection_id}/records:batchUpsert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpsertRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch upsert records The batch version of the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the records in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpsertRecordsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchUpsertRecordsResponse</returns>
        public async System.Threading.Tasks.Task<BatchUpsertRecordsResponse> BatchUpsertRecordsAsync(string collectionId, BatchUpsertRecordsRequest batchUpsertRecordsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<BatchUpsertRecordsResponse> localVarResponse = await BatchUpsertRecordsWithHttpInfoAsync(collectionId, batchUpsertRecordsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch upsert records The batch version of the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the records in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="batchUpsertRecordsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchUpsertRecordsResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<BatchUpsertRecordsResponse>> BatchUpsertRecordsWithHttpInfoAsync(string collectionId, BatchUpsertRecordsRequest batchUpsertRecordsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RecordsApi->BatchUpsertRecords");
            }

            // verify the required parameter 'batchUpsertRecordsRequest' is set
            if (batchUpsertRecordsRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'batchUpsertRecordsRequest' when calling RecordsApi->BatchUpsertRecords");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = batchUpsertRecordsRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchUpsertRecordsResponse>("/v4/collections/{collection_id}/records:batchUpsert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpsertRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete record Delete a record with the given key.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to delete, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="deleteRecordRequest"></param>
        /// <returns>Object</returns>
        public Object DeleteRecord(string collectionId, DeleteRecordRequest deleteRecordRequest)
        {
            Com.Sajari.Sdk.Client.ApiResponse<Object> localVarResponse = DeleteRecordWithHttpInfo(collectionId, deleteRecordRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete record Delete a record with the given key.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to delete, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="deleteRecordRequest"></param>
        /// <returns>ApiResponse of Object</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<Object> DeleteRecordWithHttpInfo(string collectionId, DeleteRecordRequest deleteRecordRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RecordsApi->DeleteRecord");
            }

            // verify the required parameter 'deleteRecordRequest' is set
            if (deleteRecordRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'deleteRecordRequest' when calling RecordsApi->DeleteRecord");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = deleteRecordRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v4/collections/{collection_id}/records:delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete record Delete a record with the given key.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to delete, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="deleteRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteRecordAsync(string collectionId, DeleteRecordRequest deleteRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<Object> localVarResponse = await DeleteRecordWithHttpInfoAsync(collectionId, deleteRecordRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete record Delete a record with the given key.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to delete, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="deleteRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<Object>> DeleteRecordWithHttpInfoAsync(string collectionId, DeleteRecordRequest deleteRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RecordsApi->DeleteRecord");
            }

            // verify the required parameter 'deleteRecordRequest' is set
            if (deleteRecordRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'deleteRecordRequest' when calling RecordsApi->DeleteRecord");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = deleteRecordRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v4/collections/{collection_id}/records:delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get record Retrieve a record with the given key.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to retrieve, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="getRecordRequest"></param>
        /// <returns>Object</returns>
        public Object GetRecord(string collectionId, GetRecordRequest getRecordRequest)
        {
            Com.Sajari.Sdk.Client.ApiResponse<Object> localVarResponse = GetRecordWithHttpInfo(collectionId, getRecordRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get record Retrieve a record with the given key.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to retrieve, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="getRecordRequest"></param>
        /// <returns>ApiResponse of Object</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<Object> GetRecordWithHttpInfo(string collectionId, GetRecordRequest getRecordRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RecordsApi->GetRecord");
            }

            // verify the required parameter 'getRecordRequest' is set
            if (getRecordRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'getRecordRequest' when calling RecordsApi->GetRecord");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = getRecordRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v4/collections/{collection_id}/records:get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get record Retrieve a record with the given key.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to retrieve, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="getRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetRecordAsync(string collectionId, GetRecordRequest getRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<Object> localVarResponse = await GetRecordWithHttpInfoAsync(collectionId, getRecordRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get record Retrieve a record with the given key.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to retrieve, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="getRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<Object>> GetRecordWithHttpInfoAsync(string collectionId, GetRecordRequest getRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RecordsApi->GetRecord");
            }

            // verify the required parameter 'getRecordRequest' is set
            if (getRecordRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'getRecordRequest' when calling RecordsApi->GetRecord");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = getRecordRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v4/collections/{collection_id}/records:get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update record Add or update specific fields within a record with the given values. The updated record is returned in the response.  To replace all fields in a record, you should use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.  Note that the update record call cannot be used to add or update indexed or unique fields. For this case use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="updateRecordRequest"></param>
        /// <returns>Object</returns>
        public Object UpdateRecord(string collectionId, UpdateRecordRequest updateRecordRequest)
        {
            Com.Sajari.Sdk.Client.ApiResponse<Object> localVarResponse = UpdateRecordWithHttpInfo(collectionId, updateRecordRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update record Add or update specific fields within a record with the given values. The updated record is returned in the response.  To replace all fields in a record, you should use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.  Note that the update record call cannot be used to add or update indexed or unique fields. For this case use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="updateRecordRequest"></param>
        /// <returns>ApiResponse of Object</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<Object> UpdateRecordWithHttpInfo(string collectionId, UpdateRecordRequest updateRecordRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RecordsApi->UpdateRecord");
            }

            // verify the required parameter 'updateRecordRequest' is set
            if (updateRecordRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'updateRecordRequest' when calling RecordsApi->UpdateRecord");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = updateRecordRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v4/collections/{collection_id}/records:update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update record Add or update specific fields within a record with the given values. The updated record is returned in the response.  To replace all fields in a record, you should use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.  Note that the update record call cannot be used to add or update indexed or unique fields. For this case use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="updateRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateRecordAsync(string collectionId, UpdateRecordRequest updateRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<Object> localVarResponse = await UpdateRecordWithHttpInfoAsync(collectionId, updateRecordRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update record Add or update specific fields within a record with the given values. The updated record is returned in the response.  To replace all fields in a record, you should use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.  Note that the update record call cannot be used to add or update indexed or unique fields. For this case use the [UpsertRecord](/docs/api#operation/UpsertRecord) call.
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection that contains the record to update, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="updateRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<Object>> UpdateRecordWithHttpInfoAsync(string collectionId, UpdateRecordRequest updateRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RecordsApi->UpdateRecord");
            }

            // verify the required parameter 'updateRecordRequest' is set
            if (updateRecordRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'updateRecordRequest' when calling RecordsApi->UpdateRecord");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = updateRecordRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v4/collections/{collection_id}/records:update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upsert record If the record does not exist in the collection it is inserted. If it does exist it is updated.  If no pipeline is specified, the default record pipeline is used to process the record.  If the record is inserted, the response contains the key of the inserted record. You can use this if you need to retrieve or delete the record. If the record is updated, the response does not contain a key. Callers can use this as a signal to determine if the record is inserted/created or updated.  For example, to add a single product from your ecommerce store to a collection, use the following call:  &#x60;&#x60;&#x60;json {   \&quot;pipeline\&quot;: {     \&quot;name\&quot;: \&quot;my-pipeline\&quot;,     \&quot;version\&quot;: \&quot;1\&quot;   },   \&quot;record\&quot;: {     \&quot;id\&quot;: \&quot;54hdc7h2334h\&quot;,     \&quot;name\&quot;: \&quot;Smart TV\&quot;,     \&quot;price\&quot;: 1999,     \&quot;brand\&quot;: \&quot;Acme\&quot;,     \&quot;description\&quot;: \&quot;...\&quot;,     \&quot;in_stock\&quot;: true   } } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the record in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="upsertRecordRequest"></param>
        /// <returns>UpsertRecordResponse</returns>
        public UpsertRecordResponse UpsertRecord(string collectionId, UpsertRecordRequest upsertRecordRequest)
        {
            Com.Sajari.Sdk.Client.ApiResponse<UpsertRecordResponse> localVarResponse = UpsertRecordWithHttpInfo(collectionId, upsertRecordRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert record If the record does not exist in the collection it is inserted. If it does exist it is updated.  If no pipeline is specified, the default record pipeline is used to process the record.  If the record is inserted, the response contains the key of the inserted record. You can use this if you need to retrieve or delete the record. If the record is updated, the response does not contain a key. Callers can use this as a signal to determine if the record is inserted/created or updated.  For example, to add a single product from your ecommerce store to a collection, use the following call:  &#x60;&#x60;&#x60;json {   \&quot;pipeline\&quot;: {     \&quot;name\&quot;: \&quot;my-pipeline\&quot;,     \&quot;version\&quot;: \&quot;1\&quot;   },   \&quot;record\&quot;: {     \&quot;id\&quot;: \&quot;54hdc7h2334h\&quot;,     \&quot;name\&quot;: \&quot;Smart TV\&quot;,     \&quot;price\&quot;: 1999,     \&quot;brand\&quot;: \&quot;Acme\&quot;,     \&quot;description\&quot;: \&quot;...\&quot;,     \&quot;in_stock\&quot;: true   } } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the record in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="upsertRecordRequest"></param>
        /// <returns>ApiResponse of UpsertRecordResponse</returns>
        public Com.Sajari.Sdk.Client.ApiResponse<UpsertRecordResponse> UpsertRecordWithHttpInfo(string collectionId, UpsertRecordRequest upsertRecordRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RecordsApi->UpsertRecord");
            }

            // verify the required parameter 'upsertRecordRequest' is set
            if (upsertRecordRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'upsertRecordRequest' when calling RecordsApi->UpsertRecord");
            }

            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = upsertRecordRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UpsertRecordResponse>("/v4/collections/{collection_id}/records:upsert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpsertRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upsert record If the record does not exist in the collection it is inserted. If it does exist it is updated.  If no pipeline is specified, the default record pipeline is used to process the record.  If the record is inserted, the response contains the key of the inserted record. You can use this if you need to retrieve or delete the record. If the record is updated, the response does not contain a key. Callers can use this as a signal to determine if the record is inserted/created or updated.  For example, to add a single product from your ecommerce store to a collection, use the following call:  &#x60;&#x60;&#x60;json {   \&quot;pipeline\&quot;: {     \&quot;name\&quot;: \&quot;my-pipeline\&quot;,     \&quot;version\&quot;: \&quot;1\&quot;   },   \&quot;record\&quot;: {     \&quot;id\&quot;: \&quot;54hdc7h2334h\&quot;,     \&quot;name\&quot;: \&quot;Smart TV\&quot;,     \&quot;price\&quot;: 1999,     \&quot;brand\&quot;: \&quot;Acme\&quot;,     \&quot;description\&quot;: \&quot;...\&quot;,     \&quot;in_stock\&quot;: true   } } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the record in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="upsertRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpsertRecordResponse</returns>
        public async System.Threading.Tasks.Task<UpsertRecordResponse> UpsertRecordAsync(string collectionId, UpsertRecordRequest upsertRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Sajari.Sdk.Client.ApiResponse<UpsertRecordResponse> localVarResponse = await UpsertRecordWithHttpInfoAsync(collectionId, upsertRecordRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert record If the record does not exist in the collection it is inserted. If it does exist it is updated.  If no pipeline is specified, the default record pipeline is used to process the record.  If the record is inserted, the response contains the key of the inserted record. You can use this if you need to retrieve or delete the record. If the record is updated, the response does not contain a key. Callers can use this as a signal to determine if the record is inserted/created or updated.  For example, to add a single product from your ecommerce store to a collection, use the following call:  &#x60;&#x60;&#x60;json {   \&quot;pipeline\&quot;: {     \&quot;name\&quot;: \&quot;my-pipeline\&quot;,     \&quot;version\&quot;: \&quot;1\&quot;   },   \&quot;record\&quot;: {     \&quot;id\&quot;: \&quot;54hdc7h2334h\&quot;,     \&quot;name\&quot;: \&quot;Smart TV\&quot;,     \&quot;price\&quot;: 1999,     \&quot;brand\&quot;: \&quot;Acme\&quot;,     \&quot;description\&quot;: \&quot;...\&quot;,     \&quot;in_stock\&quot;: true   } } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Com.Sajari.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection to upsert the record in, e.g. &#x60;my-collection&#x60;.</param>
        /// <param name="upsertRecordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpsertRecordResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Sajari.Sdk.Client.ApiResponse<UpsertRecordResponse>> UpsertRecordWithHttpInfoAsync(string collectionId, UpsertRecordRequest upsertRecordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'collectionId' when calling RecordsApi->UpsertRecord");
            }

            // verify the required parameter 'upsertRecordRequest' is set
            if (upsertRecordRequest == null)
            {
                throw new Com.Sajari.Sdk.Client.ApiException(400, "Missing required parameter 'upsertRecordRequest' when calling RecordsApi->UpsertRecord");
            }


            Com.Sajari.Sdk.Client.RequestOptions localVarRequestOptions = new Com.Sajari.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Sajari.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Com.Sajari.Sdk.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = upsertRecordRequest;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Sajari.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UpsertRecordResponse>("/v4/collections/{collection_id}/records:upsert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpsertRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
