// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sajari/api/query/v1/query.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sajari.Api.Query.V1 {

  /// <summary>Holder for reflection information generated from sajari/api/query/v1/query.proto</summary>
  public static partial class QueryReflection {

    #region Descriptor
    /// <summary>File descriptor for sajari/api/query/v1/query.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QueryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9zYWphcmkvYXBpL3F1ZXJ5L3YxL3F1ZXJ5LnByb3RvEhNzYWphcmkuYXBp",
            "LnF1ZXJ5LnYxGiJzYWphcmkvZW5naW5lL3F1ZXJ5L3YxL3F1ZXJ5LnByb3Rv",
            "It0DCg1TZWFyY2hSZXF1ZXN0Ej0KDnNlYXJjaF9yZXF1ZXN0GAEgASgLMiUu",
            "c2FqYXJpLmVuZ2luZS5xdWVyeS52MS5TZWFyY2hSZXF1ZXN0Ej0KCHRyYWNr",
            "aW5nGAQgASgLMisuc2FqYXJpLmFwaS5xdWVyeS52MS5TZWFyY2hSZXF1ZXN0",
            "LlRyYWNraW5nEjIKCnRyYW5zZm9ybXMYBSADKAsyHi5zYWphcmkuYXBpLnF1",
            "ZXJ5LnYxLlRyYW5zZm9ybRqZAgoIVHJhY2tpbmcSPgoEdHlwZRgBIAEoDjIw",
            "LnNhamFyaS5hcGkucXVlcnkudjEuU2VhcmNoUmVxdWVzdC5UcmFja2luZy5U",
            "eXBlEhAKCHF1ZXJ5X2lkGAIgASgJEhAKCHNlcXVlbmNlGAMgASgFEg0KBWZp",
            "ZWxkGAQgASgJEkMKBGRhdGEYBSADKAsyNS5zYWphcmkuYXBpLnF1ZXJ5LnYx",
            "LlNlYXJjaFJlcXVlc3QuVHJhY2tpbmcuRGF0YUVudHJ5GisKCURhdGFFbnRy",
            "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIigKBFR5cGUSCAoE",
            "Tk9ORRAAEgkKBUNMSUNLEAESCwoHUE9TX05FRxACIrwBCg5TZWFyY2hSZXNw",
            "b25zZRI/Cg9zZWFyY2hfcmVzcG9uc2UYASABKAsyJi5zYWphcmkuZW5naW5l",
            "LnF1ZXJ5LnYxLlNlYXJjaFJlc3BvbnNlEj0KDnNlYXJjaF9yZXF1ZXN0GAIg",
            "ASgLMiUuc2FqYXJpLmVuZ2luZS5xdWVyeS52MS5TZWFyY2hSZXF1ZXN0EioK",
            "BnRva2VucxgDIAMoCzIaLnNhamFyaS5hcGkucXVlcnkudjEuVG9rZW4itQEK",
            "BVRva2VuEjEKBWNsaWNrGAEgASgLMiAuc2FqYXJpLmFwaS5xdWVyeS52MS5U",
            "b2tlbi5DbGlja0gAEjQKB3Bvc19uZWcYAiABKAsyIS5zYWphcmkuYXBpLnF1",
            "ZXJ5LnYxLlRva2VuLlBvc05lZ0gAGhYKBUNsaWNrEg0KBXRva2VuGAEgASgJ",
            "GiIKBlBvc05lZxILCgNwb3MYASABKAkSCwoDbmVnGAIgASgJQgcKBXRva2Vu",
            "IqEBCglUcmFuc2Zvcm0SOAoIcnVuX3R5cGUYASABKA4yJi5zYWphcmkuYXBp",
            "LnF1ZXJ5LnYxLlRyYW5zZm9ybS5SdW5UeXBlEhIKCmlkZW50aWZpZXIYAiAB",
            "KAkiRgoHUnVuVHlwZRINCglQUkVfUVVFUlkQABISCg5QT1NUX05PTl9FTVBU",
            "WRABEhgKFFBPU1RfRU1QVFlfUFJFX1JFVFJZEAIyWgoFUXVlcnkSUQoGU2Vh",
            "cmNoEiIuc2FqYXJpLmFwaS5xdWVyeS52MS5TZWFyY2hSZXF1ZXN0GiMuc2Fq",
            "YXJpLmFwaS5xdWVyeS52MS5TZWFyY2hSZXNwb25zZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Sajari.Engine.Query.V1.QueryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Api.Query.V1.SearchRequest), global::Sajari.Api.Query.V1.SearchRequest.Parser, new[]{ "SearchRequest_", "Tracking", "Transforms" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Api.Query.V1.SearchRequest.Types.Tracking), global::Sajari.Api.Query.V1.SearchRequest.Types.Tracking.Parser, new[]{ "Type", "QueryId", "Sequence", "Field", "Data" }, null, new[]{ typeof(global::Sajari.Api.Query.V1.SearchRequest.Types.Tracking.Types.Type) }, new pbr::GeneratedClrTypeInfo[] { null, })}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Api.Query.V1.SearchResponse), global::Sajari.Api.Query.V1.SearchResponse.Parser, new[]{ "SearchResponse_", "SearchRequest", "Tokens" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Api.Query.V1.Token), global::Sajari.Api.Query.V1.Token.Parser, new[]{ "Click", "PosNeg" }, new[]{ "Token" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Api.Query.V1.Token.Types.Click), global::Sajari.Api.Query.V1.Token.Types.Click.Parser, new[]{ "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Api.Query.V1.Token.Types.PosNeg), global::Sajari.Api.Query.V1.Token.Types.PosNeg.Parser, new[]{ "Pos", "Neg" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Api.Query.V1.Transform), global::Sajari.Api.Query.V1.Transform.Parser, new[]{ "RunType", "Identifier" }, null, new[]{ typeof(global::Sajari.Api.Query.V1.Transform.Types.RunType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// SearchRequest
  /// </summary>
  public sealed partial class SearchRequest : pb::IMessage<SearchRequest> {
    private static readonly pb::MessageParser<SearchRequest> _parser = new pb::MessageParser<SearchRequest>(() => new SearchRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Api.Query.V1.QueryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRequest(SearchRequest other) : this() {
      SearchRequest_ = other.searchRequest_ != null ? other.SearchRequest_.Clone() : null;
      Tracking = other.tracking_ != null ? other.Tracking.Clone() : null;
      transforms_ = other.transforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRequest Clone() {
      return new SearchRequest(this);
    }

    /// <summary>Field number for the "search_request" field.</summary>
    public const int SearchRequest_FieldNumber = 1;
    private global::Sajari.Engine.Query.V1.SearchRequest searchRequest_;
    /// <summary>
    /// Underlying search request to be passed to the engine
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.SearchRequest SearchRequest_ {
      get { return searchRequest_; }
      set {
        searchRequest_ = value;
      }
    }

    /// <summary>Field number for the "tracking" field.</summary>
    public const int TrackingFieldNumber = 4;
    private global::Sajari.Api.Query.V1.SearchRequest.Types.Tracking tracking_;
    /// <summary>
    /// Tracking configuration for the query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Api.Query.V1.SearchRequest.Types.Tracking Tracking {
      get { return tracking_; }
      set {
        tracking_ = value;
      }
    }

    /// <summary>Field number for the "transforms" field.</summary>
    public const int TransformsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Sajari.Api.Query.V1.Transform> _repeated_transforms_codec
        = pb::FieldCodec.ForMessage(42, global::Sajari.Api.Query.V1.Transform.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Api.Query.V1.Transform> transforms_ = new pbc::RepeatedField<global::Sajari.Api.Query.V1.Transform>();
    /// <summary>
    /// Transforms to be applied to the query (can be before, after or even on failure).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Api.Query.V1.Transform> Transforms {
      get { return transforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SearchRequest_, other.SearchRequest_)) return false;
      if (!object.Equals(Tracking, other.Tracking)) return false;
      if(!transforms_.Equals(other.transforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (searchRequest_ != null) hash ^= SearchRequest_.GetHashCode();
      if (tracking_ != null) hash ^= Tracking.GetHashCode();
      hash ^= transforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (searchRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SearchRequest_);
      }
      if (tracking_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Tracking);
      }
      transforms_.WriteTo(output, _repeated_transforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (searchRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchRequest_);
      }
      if (tracking_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tracking);
      }
      size += transforms_.CalculateSize(_repeated_transforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.searchRequest_ != null) {
        if (searchRequest_ == null) {
          searchRequest_ = new global::Sajari.Engine.Query.V1.SearchRequest();
        }
        SearchRequest_.MergeFrom(other.SearchRequest_);
      }
      if (other.tracking_ != null) {
        if (tracking_ == null) {
          tracking_ = new global::Sajari.Api.Query.V1.SearchRequest.Types.Tracking();
        }
        Tracking.MergeFrom(other.Tracking);
      }
      transforms_.Add(other.transforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (searchRequest_ == null) {
              searchRequest_ = new global::Sajari.Engine.Query.V1.SearchRequest();
            }
            input.ReadMessage(searchRequest_);
            break;
          }
          case 34: {
            if (tracking_ == null) {
              tracking_ = new global::Sajari.Api.Query.V1.SearchRequest.Types.Tracking();
            }
            input.ReadMessage(tracking_);
            break;
          }
          case 42: {
            transforms_.AddEntriesFrom(input, _repeated_transforms_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SearchRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Tracking : pb::IMessage<Tracking> {
        private static readonly pb::MessageParser<Tracking> _parser = new pb::MessageParser<Tracking>(() => new Tracking());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Tracking> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Api.Query.V1.SearchRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tracking() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tracking(Tracking other) : this() {
          type_ = other.type_;
          queryId_ = other.queryId_;
          sequence_ = other.sequence_;
          field_ = other.field_;
          data_ = other.data_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tracking Clone() {
          return new Tracking(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Sajari.Api.Query.V1.SearchRequest.Types.Tracking.Types.Type type_ = 0;
        /// <summary>
        /// Tracking mode for query.
        ///
        /// Tracking is done using tokens which are added to result sets and identify individual results.
        /// Tokens are used to improve the ranking of records by reporting clicks (i.e. positive action)
        /// or pos/neg (i.e positive or negative reporting) on the position of a record in results.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Sajari.Api.Query.V1.SearchRequest.Types.Tracking.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "query_id" field.</summary>
        public const int QueryIdFieldNumber = 2;
        private string queryId_ = "";
        /// <summary>
        /// Query ID of the query.  If this is empty, then one is generated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string QueryId {
          get { return queryId_; }
          set {
            queryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sequence" field.</summary>
        public const int SequenceFieldNumber = 3;
        private int sequence_;
        /// <summary>
        /// Sequence number of query.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Sequence {
          get { return sequence_; }
          set {
            sequence_ = value;
          }
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 4;
        private string field_ = "";
        /// <summary>
        /// Tracking field (must be unique in the collection) used to identify records in the collection.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 5;
        private static readonly pbc::MapField<string, string>.Codec _map_data_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
        private readonly pbc::MapField<string, string> data_ = new pbc::MapField<string, string>();
        /// <summary>
        /// Custom values to be included in tracking data.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> Data {
          get { return data_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Tracking);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Tracking other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (QueryId != other.QueryId) return false;
          if (Sequence != other.Sequence) return false;
          if (Field != other.Field) return false;
          if (!Data.Equals(other.Data)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (QueryId.Length != 0) hash ^= QueryId.GetHashCode();
          if (Sequence != 0) hash ^= Sequence.GetHashCode();
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          hash ^= Data.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (QueryId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(QueryId);
          }
          if (Sequence != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Sequence);
          }
          if (Field.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Field);
          }
          data_.WriteTo(output, _map_data_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (QueryId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryId);
          }
          if (Sequence != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
          }
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          size += data_.CalculateSize(_map_data_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Tracking other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.QueryId.Length != 0) {
            QueryId = other.QueryId;
          }
          if (other.Sequence != 0) {
            Sequence = other.Sequence;
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          data_.Add(other.data_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                type_ = (global::Sajari.Api.Query.V1.SearchRequest.Types.Tracking.Types.Type) input.ReadEnum();
                break;
              }
              case 18: {
                QueryId = input.ReadString();
                break;
              }
              case 24: {
                Sequence = input.ReadInt32();
                break;
              }
              case 34: {
                Field = input.ReadString();
                break;
              }
              case 42: {
                data_.AddEntriesFrom(input, _map_data_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Tracking message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            /// <summary>
            /// No tracking will occur.
            /// </summary>
            [pbr::OriginalName("NONE")] None = 0,
            /// <summary>
            /// Click tracking will be used.
            ///
            /// A click token will be generated for each result.  To register a click see &lt;the other
            /// API calls>.  Results which are returned and not clicked on will fall down rankings, and
            /// similarly low-ranked records which receive clicks will be moved up the rankings.
            /// </summary>
            [pbr::OriginalName("CLICK")] Click = 1,
            /// <summary>
            /// Pos/neg tokens will be generated for each result.  Each record in the result set can be
            /// marked with pos/neg value for the search.  This is then fed back into the ranking algorithm
            /// to improve future results.  Unlike CLICK, if no tokens are reported for records then
            /// no action is taken.
            /// </summary>
            [pbr::OriginalName("POS_NEG")] PosNeg = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// SearchResponse is a wrapped response from the engine with interaction tokens
  /// and other information which was used to construct the query from the SearchRequest.
  /// </summary>
  public sealed partial class SearchResponse : pb::IMessage<SearchResponse> {
    private static readonly pb::MessageParser<SearchResponse> _parser = new pb::MessageParser<SearchResponse>(() => new SearchResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Api.Query.V1.QueryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResponse(SearchResponse other) : this() {
      SearchResponse_ = other.searchResponse_ != null ? other.SearchResponse_.Clone() : null;
      SearchRequest = other.searchRequest_ != null ? other.SearchRequest.Clone() : null;
      tokens_ = other.tokens_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResponse Clone() {
      return new SearchResponse(this);
    }

    /// <summary>Field number for the "search_response" field.</summary>
    public const int SearchResponse_FieldNumber = 1;
    private global::Sajari.Engine.Query.V1.SearchResponse searchResponse_;
    /// <summary>
    /// SearchResponse from the engine request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.SearchResponse SearchResponse_ {
      get { return searchResponse_; }
      set {
        searchResponse_ = value;
      }
    }

    /// <summary>Field number for the "search_request" field.</summary>
    public const int SearchRequestFieldNumber = 2;
    private global::Sajari.Engine.Query.V1.SearchRequest searchRequest_;
    /// <summary>
    /// SearchRequest used in the query (if this has been changed).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.SearchRequest SearchRequest {
      get { return searchRequest_; }
      set {
        searchRequest_ = value;
      }
    }

    /// <summary>Field number for the "tokens" field.</summary>
    public const int TokensFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Sajari.Api.Query.V1.Token> _repeated_tokens_codec
        = pb::FieldCodec.ForMessage(26, global::Sajari.Api.Query.V1.Token.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Api.Query.V1.Token> tokens_ = new pbc::RepeatedField<global::Sajari.Api.Query.V1.Token>();
    /// <summary>
    /// Tokens which correspond to the result records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Api.Query.V1.Token> Tokens {
      get { return tokens_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SearchResponse_, other.SearchResponse_)) return false;
      if (!object.Equals(SearchRequest, other.SearchRequest)) return false;
      if(!tokens_.Equals(other.tokens_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (searchResponse_ != null) hash ^= SearchResponse_.GetHashCode();
      if (searchRequest_ != null) hash ^= SearchRequest.GetHashCode();
      hash ^= tokens_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (searchResponse_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SearchResponse_);
      }
      if (searchRequest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SearchRequest);
      }
      tokens_.WriteTo(output, _repeated_tokens_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (searchResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchResponse_);
      }
      if (searchRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchRequest);
      }
      size += tokens_.CalculateSize(_repeated_tokens_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchResponse other) {
      if (other == null) {
        return;
      }
      if (other.searchResponse_ != null) {
        if (searchResponse_ == null) {
          searchResponse_ = new global::Sajari.Engine.Query.V1.SearchResponse();
        }
        SearchResponse_.MergeFrom(other.SearchResponse_);
      }
      if (other.searchRequest_ != null) {
        if (searchRequest_ == null) {
          searchRequest_ = new global::Sajari.Engine.Query.V1.SearchRequest();
        }
        SearchRequest.MergeFrom(other.SearchRequest);
      }
      tokens_.Add(other.tokens_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (searchResponse_ == null) {
              searchResponse_ = new global::Sajari.Engine.Query.V1.SearchResponse();
            }
            input.ReadMessage(searchResponse_);
            break;
          }
          case 18: {
            if (searchRequest_ == null) {
              searchRequest_ = new global::Sajari.Engine.Query.V1.SearchRequest();
            }
            input.ReadMessage(searchRequest_);
            break;
          }
          case 26: {
            tokens_.AddEntriesFrom(input, _repeated_tokens_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Tokens are used to mark result records as well/poorly ranked for a query.
  /// TODO(dhowden): fix this comment!
  /// </summary>
  public sealed partial class Token : pb::IMessage<Token> {
    private static readonly pb::MessageParser<Token> _parser = new pb::MessageParser<Token>(() => new Token());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Token> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Api.Query.V1.QueryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token(Token other) : this() {
      switch (other.TokenCase) {
        case TokenOneofCase.Click:
          Click = other.Click.Clone();
          break;
        case TokenOneofCase.PosNeg:
          PosNeg = other.PosNeg.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token Clone() {
      return new Token(this);
    }

    /// <summary>Field number for the "click" field.</summary>
    public const int ClickFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Api.Query.V1.Token.Types.Click Click {
      get { return tokenCase_ == TokenOneofCase.Click ? (global::Sajari.Api.Query.V1.Token.Types.Click) token_ : null; }
      set {
        token_ = value;
        tokenCase_ = value == null ? TokenOneofCase.None : TokenOneofCase.Click;
      }
    }

    /// <summary>Field number for the "pos_neg" field.</summary>
    public const int PosNegFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Api.Query.V1.Token.Types.PosNeg PosNeg {
      get { return tokenCase_ == TokenOneofCase.PosNeg ? (global::Sajari.Api.Query.V1.Token.Types.PosNeg) token_ : null; }
      set {
        token_ = value;
        tokenCase_ = value == null ? TokenOneofCase.None : TokenOneofCase.PosNeg;
      }
    }

    private object token_;
    /// <summary>Enum of possible cases for the "token" oneof.</summary>
    public enum TokenOneofCase {
      None = 0,
      Click = 1,
      PosNeg = 2,
    }
    private TokenOneofCase tokenCase_ = TokenOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenOneofCase TokenCase {
      get { return tokenCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToken() {
      tokenCase_ = TokenOneofCase.None;
      token_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Token);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Token other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Click, other.Click)) return false;
      if (!object.Equals(PosNeg, other.PosNeg)) return false;
      if (TokenCase != other.TokenCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tokenCase_ == TokenOneofCase.Click) hash ^= Click.GetHashCode();
      if (tokenCase_ == TokenOneofCase.PosNeg) hash ^= PosNeg.GetHashCode();
      hash ^= (int) tokenCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tokenCase_ == TokenOneofCase.Click) {
        output.WriteRawTag(10);
        output.WriteMessage(Click);
      }
      if (tokenCase_ == TokenOneofCase.PosNeg) {
        output.WriteRawTag(18);
        output.WriteMessage(PosNeg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tokenCase_ == TokenOneofCase.Click) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Click);
      }
      if (tokenCase_ == TokenOneofCase.PosNeg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PosNeg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Token other) {
      if (other == null) {
        return;
      }
      switch (other.TokenCase) {
        case TokenOneofCase.Click:
          Click = other.Click;
          break;
        case TokenOneofCase.PosNeg:
          PosNeg = other.PosNeg;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Sajari.Api.Query.V1.Token.Types.Click subBuilder = new global::Sajari.Api.Query.V1.Token.Types.Click();
            if (tokenCase_ == TokenOneofCase.Click) {
              subBuilder.MergeFrom(Click);
            }
            input.ReadMessage(subBuilder);
            Click = subBuilder;
            break;
          }
          case 18: {
            global::Sajari.Api.Query.V1.Token.Types.PosNeg subBuilder = new global::Sajari.Api.Query.V1.Token.Types.PosNeg();
            if (tokenCase_ == TokenOneofCase.PosNeg) {
              subBuilder.MergeFrom(PosNeg);
            }
            input.ReadMessage(subBuilder);
            PosNeg = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Token message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Click is a token that corresponds to selecting a record from a result set.
      /// It is taken as an indication that this record is a good match for the
      /// corresponding SearchRequest.
      /// </summary>
      public sealed partial class Click : pb::IMessage<Click> {
        private static readonly pb::MessageParser<Click> _parser = new pb::MessageParser<Click>(() => new Click());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Click> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Api.Query.V1.Token.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Click() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Click(Click other) : this() {
          token_ = other.token_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Click Clone() {
          return new Click(this);
        }

        /// <summary>Field number for the "token" field.</summary>
        public const int TokenFieldNumber = 1;
        private string token_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Token {
          get { return token_; }
          set {
            token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Click);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Click other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Token != other.Token) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Token.Length != 0) hash ^= Token.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Token.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Token);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Token.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Click other) {
          if (other == null) {
            return;
          }
          if (other.Token.Length != 0) {
            Token = other.Token;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Token = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// PosNeg is a pair of tokens which are used to mark a record as a good/bad
      /// result for a SearchRequest.
      /// </summary>
      public sealed partial class PosNeg : pb::IMessage<PosNeg> {
        private static readonly pb::MessageParser<PosNeg> _parser = new pb::MessageParser<PosNeg>(() => new PosNeg());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PosNeg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Api.Query.V1.Token.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PosNeg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PosNeg(PosNeg other) : this() {
          pos_ = other.pos_;
          neg_ = other.neg_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PosNeg Clone() {
          return new PosNeg(this);
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 1;
        private string pos_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Pos {
          get { return pos_; }
          set {
            pos_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "neg" field.</summary>
        public const int NegFieldNumber = 2;
        private string neg_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Neg {
          get { return neg_; }
          set {
            neg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PosNeg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PosNeg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Pos != other.Pos) return false;
          if (Neg != other.Neg) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Pos.Length != 0) hash ^= Pos.GetHashCode();
          if (Neg.Length != 0) hash ^= Neg.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Pos.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Pos);
          }
          if (Neg.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Neg);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Pos.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Pos);
          }
          if (Neg.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Neg);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PosNeg other) {
          if (other == null) {
            return;
          }
          if (other.Pos.Length != 0) {
            Pos = other.Pos;
          }
          if (other.Neg.Length != 0) {
            Neg = other.Neg;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Pos = input.ReadString();
                break;
              }
              case 18: {
                Neg = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Api.Query.V1.QueryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      runType_ = other.runType_;
      identifier_ = other.identifier_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "run_type" field.</summary>
    public const int RunTypeFieldNumber = 1;
    private global::Sajari.Api.Query.V1.Transform.Types.RunType runType_ = 0;
    /// <summary>
    /// When to run the transform.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Api.Query.V1.Transform.Types.RunType RunType {
      get { return runType_; }
      set {
        runType_ = value;
      }
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 2;
    private string identifier_ = "";
    /// <summary>
    /// Identifier for the transform.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identifier {
      get { return identifier_; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunType != other.RunType) return false;
      if (Identifier != other.Identifier) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunType != 0) hash ^= RunType.GetHashCode();
      if (Identifier.Length != 0) hash ^= Identifier.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RunType);
      }
      if (Identifier.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Identifier);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RunType);
      }
      if (Identifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.RunType != 0) {
        RunType = other.RunType;
      }
      if (other.Identifier.Length != 0) {
        Identifier = other.Identifier;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            runType_ = (global::Sajari.Api.Query.V1.Transform.Types.RunType) input.ReadEnum();
            break;
          }
          case 18: {
            Identifier = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Transform message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum RunType {
        /// <summary>
        /// Run the transform before the query.
        /// </summary>
        [pbr::OriginalName("PRE_QUERY")] PreQuery = 0,
        /// <summary>
        /// Run the transform on the request.
        /// </summary>
        [pbr::OriginalName("POST_NON_EMPTY")] PostNonEmpty = 1,
        /// <summary>
        /// After an empty query this will apply the transform to the query and the re-run the query.
        /// </summary>
        [pbr::OriginalName("POST_EMPTY_PRE_RETRY")] PostEmptyPreRetry = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
