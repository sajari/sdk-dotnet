// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sajari/engine/schema/schema.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sajari.Engine.Schema {

  /// <summary>Holder for reflection information generated from sajari/engine/schema/schema.proto</summary>
  public static partial class SchemaReflection {

    #region Descriptor
    /// <summary>File descriptor for sajari/engine/schema/schema.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SchemaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFzYWphcmkvZW5naW5lL3NjaGVtYS9zY2hlbWEucHJvdG8SFHNhamFyaS5l",
            "bmdpbmUuc2NoZW1hGhZzYWphcmkvcnBjL2VtcHR5LnByb3RvGhdzYWphcmkv",
            "cnBjL3N0YXR1cy5wcm90byI1CgZGaWVsZHMSKwoGZmllbGRzGAEgAygLMhsu",
            "c2FqYXJpLmVuZ2luZS5zY2hlbWEuRmllbGQiggIKBUZpZWxkEgoKAmlkGAEg",
            "ASgNEgwKBG5hbWUYAiABKAkSEwoLZGVzY3JpcHRpb24YAyABKAkSLgoEdHlw",
            "ZRgEIAEoDjIgLnNhamFyaS5lbmdpbmUuc2NoZW1hLkZpZWxkLlR5cGUSEAoI",
            "cmVwZWF0ZWQYBSABKAgSEAoIcmVxdWlyZWQYBiABKAgSDQoFc3RvcmUYByAB",
            "KAgSDwoHaW5kZXhlZBgIIAEoCBIOCgZ1bmlxdWUYCSABKAgiRgoEVHlwZRIK",
            "CgZTVFJJTkcQABILCgdJTlRFR0VSEAESCQoFRkxPQVQQAhILCgdCT09MRUFO",
            "EAMSDQoJVElNRVNUQU1QEAQiLgoIUmVzcG9uc2USIgoGc3RhdHVzGAEgAygL",
            "MhIuc2FqYXJpLnJwYy5TdGF0dXMipwIKEk11dGF0ZUZpZWxkUmVxdWVzdBIM",
            "CgRuYW1lGAEgASgJEkQKCW11dGF0aW9ucxgCIAMoCzIxLnNhamFyaS5lbmdp",
            "bmUuc2NoZW1hLk11dGF0ZUZpZWxkUmVxdWVzdC5NdXRhdGlvbhq8AQoITXV0",
            "YXRpb24SDgoEbmFtZRgBIAEoCUgAEhUKC2Rlc2NyaXB0aW9uGAIgASgJSAAS",
            "MAoEdHlwZRgDIAEoDjIgLnNhamFyaS5lbmdpbmUuc2NoZW1hLkZpZWxkLlR5",
            "cGVIABISCghyZXBlYXRlZBgEIAEoCEgAEhIKCHJlcXVpcmVkGAUgASgISAAS",
            "EAoGdW5pcXVlGAYgASgISAASEQoHaW5kZXhlZBgHIAEoCEgAQgoKCG11dGF0",
            "aW9uMuoBCgZTY2hlbWESPAoJR2V0RmllbGRzEhEuc2FqYXJpLnJwYy5FbXB0",
            "eRocLnNhamFyaS5lbmdpbmUuc2NoZW1hLkZpZWxkcxJJCglBZGRGaWVsZHMS",
            "HC5zYWphcmkuZW5naW5lLnNjaGVtYS5GaWVsZHMaHi5zYWphcmkuZW5naW5l",
            "LnNjaGVtYS5SZXNwb25zZRJXCgtNdXRhdGVGaWVsZBIoLnNhamFyaS5lbmdp",
            "bmUuc2NoZW1hLk11dGF0ZUZpZWxkUmVxdWVzdBoeLnNhamFyaS5lbmdpbmUu",
            "c2NoZW1hLlJlc3BvbnNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Sajari.Rpc.EmptyReflection.Descriptor, global::Sajari.Rpc.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Schema.Fields), global::Sajari.Engine.Schema.Fields.Parser, new[]{ "Fields_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Schema.Field), global::Sajari.Engine.Schema.Field.Parser, new[]{ "Id", "Name", "Description", "Type", "Repeated", "Required", "Store", "Indexed", "Unique" }, null, new[]{ typeof(global::Sajari.Engine.Schema.Field.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Schema.Response), global::Sajari.Engine.Schema.Response.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Schema.MutateFieldRequest), global::Sajari.Engine.Schema.MutateFieldRequest.Parser, new[]{ "Name", "Mutations" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Schema.MutateFieldRequest.Types.Mutation), global::Sajari.Engine.Schema.MutateFieldRequest.Types.Mutation.Parser, new[]{ "Name", "Description", "Type", "Repeated", "Required", "Unique", "Indexed" }, new[]{ "Mutation" }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Fields is a list of Fields.
  /// </summary>
  public sealed partial class Fields : pb::IMessage<Fields> {
    private static readonly pb::MessageParser<Fields> _parser = new pb::MessageParser<Fields>(() => new Fields());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Fields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Schema.SchemaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fields(Fields other) : this() {
      fields_ = other.fields_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fields Clone() {
      return new Fields(this);
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int Fields_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Schema.Field> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Engine.Schema.Field.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Schema.Field> fields_ = new pbc::RepeatedField<global::Sajari.Engine.Schema.Field>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Schema.Field> Fields_ {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Fields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Fields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fields_.Equals(other.fields_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fields_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fields_.WriteTo(output, _repeated_fields_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fields_.CalculateSize(_repeated_fields_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Fields other) {
      if (other == null) {
        return;
      }
      fields_.Add(other.fields_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Field defines the properties of of a field in the schema.
  /// </summary>
  public sealed partial class Field : pb::IMessage<Field> {
    private static readonly pb::MessageParser<Field> _parser = new pb::MessageParser<Field>(() => new Field());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Field> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Schema.SchemaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Field() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Field(Field other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      type_ = other.type_;
      repeated_ = other.repeated_;
      required_ = other.required_;
      store_ = other.store_;
      indexed_ = other.indexed_;
      unique_ = other.unique_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Field Clone() {
      return new Field(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// ID used internally
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of the field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Sajari.Engine.Schema.Field.Types.Type type_ = 0;
    /// <summary>
    /// Type of the field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Schema.Field.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "repeated" field.</summary>
    public const int RepeatedFieldNumber = 5;
    private bool repeated_;
    /// <summary>
    /// Repeated sets that fields are repeated values (i.e. a list of values).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Repeated {
      get { return repeated_; }
      set {
        repeated_ = value;
      }
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 6;
    private bool required_;
    /// <summary>
    /// Required sets that the field must be specified when adding new records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Required {
      get { return required_; }
      set {
        required_ = value;
      }
    }

    /// <summary>Field number for the "store" field.</summary>
    public const int StoreFieldNumber = 7;
    private bool store_;
    /// <summary>
    /// Store is set to false if original values should not be stored. Ideal for large text
    /// fields that need to be indexed but will never be returned in results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Store {
      get { return store_; }
      set {
        store_ = value;
      }
    }

    /// <summary>Field number for the "indexed" field.</summary>
    public const int IndexedFieldNumber = 8;
    private bool indexed_;
    /// <summary>
    /// Indexed is set to true if this field should be indexed into a reverse index.
    /// Only string and string array fields can be indexed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Indexed {
      get { return indexed_; }
      set {
        indexed_ = value;
      }
    }

    /// <summary>Field number for the "unique" field.</summary>
    public const int UniqueFieldNumber = 9;
    private bool unique_;
    /// <summary>
    /// Unique is set to true if this field should contain unique values. Unique
    /// fields also support indexing to assist with fast record lookups
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unique {
      get { return unique_; }
      set {
        unique_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Field);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Field other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Type != other.Type) return false;
      if (Repeated != other.Repeated) return false;
      if (Required != other.Required) return false;
      if (Store != other.Store) return false;
      if (Indexed != other.Indexed) return false;
      if (Unique != other.Unique) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Repeated != false) hash ^= Repeated.GetHashCode();
      if (Required != false) hash ^= Required.GetHashCode();
      if (Store != false) hash ^= Store.GetHashCode();
      if (Indexed != false) hash ^= Indexed.GetHashCode();
      if (Unique != false) hash ^= Unique.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (Repeated != false) {
        output.WriteRawTag(40);
        output.WriteBool(Repeated);
      }
      if (Required != false) {
        output.WriteRawTag(48);
        output.WriteBool(Required);
      }
      if (Store != false) {
        output.WriteRawTag(56);
        output.WriteBool(Store);
      }
      if (Indexed != false) {
        output.WriteRawTag(64);
        output.WriteBool(Indexed);
      }
      if (Unique != false) {
        output.WriteRawTag(72);
        output.WriteBool(Unique);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Repeated != false) {
        size += 1 + 1;
      }
      if (Required != false) {
        size += 1 + 1;
      }
      if (Store != false) {
        size += 1 + 1;
      }
      if (Indexed != false) {
        size += 1 + 1;
      }
      if (Unique != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Field other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Repeated != false) {
        Repeated = other.Repeated;
      }
      if (other.Required != false) {
        Required = other.Required;
      }
      if (other.Store != false) {
        Store = other.Store;
      }
      if (other.Indexed != false) {
        Indexed = other.Indexed;
      }
      if (other.Unique != false) {
        Unique = other.Unique;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            type_ = (global::Sajari.Engine.Schema.Field.Types.Type) input.ReadEnum();
            break;
          }
          case 40: {
            Repeated = input.ReadBool();
            break;
          }
          case 48: {
            Required = input.ReadBool();
            break;
          }
          case 56: {
            Store = input.ReadBool();
            break;
          }
          case 64: {
            Indexed = input.ReadBool();
            break;
          }
          case 72: {
            Unique = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Field message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type represents the underlying data type of the field. Default is a string.
      /// </summary>
      public enum Type {
        [pbr::OriginalName("STRING")] String = 0,
        [pbr::OriginalName("INTEGER")] Integer = 1,
        [pbr::OriginalName("FLOAT")] Float = 2,
        [pbr::OriginalName("BOOLEAN")] Boolean = 3,
        [pbr::OriginalName("TIMESTAMP")] Timestamp = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// Response is the message type returned from AddFields and MutateField calls.
  /// </summary>
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Schema.SchemaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      status_ = other.status_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Rpc.Status> _repeated_status_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Rpc.Status.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Rpc.Status> status_ = new pbc::RepeatedField<global::Sajari.Rpc.Status>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Rpc.Status> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!status_.Equals(other.status_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= status_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      status_.Add(other.status_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MutateFieldRequest is a message type passed to the MutateField method.
  /// </summary>
  public sealed partial class MutateFieldRequest : pb::IMessage<MutateFieldRequest> {
    private static readonly pb::MessageParser<MutateFieldRequest> _parser = new pb::MessageParser<MutateFieldRequest>(() => new MutateFieldRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MutateFieldRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Schema.SchemaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateFieldRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateFieldRequest(MutateFieldRequest other) : this() {
      name_ = other.name_;
      mutations_ = other.mutations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateFieldRequest Clone() {
      return new MutateFieldRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the field to mutate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mutations" field.</summary>
    public const int MutationsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Schema.MutateFieldRequest.Types.Mutation> _repeated_mutations_codec
        = pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Schema.MutateFieldRequest.Types.Mutation.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Schema.MutateFieldRequest.Types.Mutation> mutations_ = new pbc::RepeatedField<global::Sajari.Engine.Schema.MutateFieldRequest.Types.Mutation>();
    /// <summary>
    /// List of mutations to apply to the field.  Each is taken individually, if there
    /// are any errors then the rest are ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Schema.MutateFieldRequest.Types.Mutation> Mutations {
      get { return mutations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MutateFieldRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MutateFieldRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!mutations_.Equals(other.mutations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= mutations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      mutations_.WriteTo(output, _repeated_mutations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += mutations_.CalculateSize(_repeated_mutations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MutateFieldRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      mutations_.Add(other.mutations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            mutations_.AddEntriesFrom(input, _repeated_mutations_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MutateFieldRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Mutation is a mutation of a schema field.
      /// </summary>
      public sealed partial class Mutation : pb::IMessage<Mutation> {
        private static readonly pb::MessageParser<Mutation> _parser = new pb::MessageParser<Mutation>(() => new Mutation());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mutation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Schema.MutateFieldRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mutation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mutation(Mutation other) : this() {
          switch (other.MutationCase) {
            case MutationOneofCase.Name:
              Name = other.Name;
              break;
            case MutationOneofCase.Description:
              Description = other.Description;
              break;
            case MutationOneofCase.Type:
              Type = other.Type;
              break;
            case MutationOneofCase.Repeated:
              Repeated = other.Repeated;
              break;
            case MutationOneofCase.Required:
              Required = other.Required;
              break;
            case MutationOneofCase.Unique:
              Unique = other.Unique;
              break;
            case MutationOneofCase.Indexed:
              Indexed = other.Indexed;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mutation Clone() {
          return new Mutation(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        /// <summary>
        /// Name is a new name for the field.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return mutationCase_ == MutationOneofCase.Name ? (string) mutation_ : ""; }
          set {
            mutation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            mutationCase_ = MutationOneofCase.Name;
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 2;
        /// <summary>
        /// Description is the new description for the field.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return mutationCase_ == MutationOneofCase.Description ? (string) mutation_ : ""; }
          set {
            mutation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            mutationCase_ = MutationOneofCase.Description;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        /// <summary>
        /// Type changes the underlying type of the field.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Sajari.Engine.Schema.Field.Types.Type Type {
          get { return mutationCase_ == MutationOneofCase.Type ? (global::Sajari.Engine.Schema.Field.Types.Type) mutation_ : 0; }
          set {
            mutation_ = value;
            mutationCase_ = MutationOneofCase.Type;
          }
        }

        /// <summary>Field number for the "repeated" field.</summary>
        public const int RepeatedFieldNumber = 4;
        /// <summary>
        /// Repeated sets whether the field values are repeated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Repeated {
          get { return mutationCase_ == MutationOneofCase.Repeated ? (bool) mutation_ : false; }
          set {
            mutation_ = value;
            mutationCase_ = MutationOneofCase.Repeated;
          }
        }

        /// <summary>Field number for the "required" field.</summary>
        public const int RequiredFieldNumber = 5;
        /// <summary>
        /// Required sets whether the field value is required for index records.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Required {
          get { return mutationCase_ == MutationOneofCase.Required ? (bool) mutation_ : false; }
          set {
            mutation_ = value;
            mutationCase_ = MutationOneofCase.Required;
          }
        }

        /// <summary>Field number for the "unique" field.</summary>
        public const int UniqueFieldNumber = 6;
        /// <summary>
        /// Unique sets whether the field must contain unique values.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Unique {
          get { return mutationCase_ == MutationOneofCase.Unique ? (bool) mutation_ : false; }
          set {
            mutation_ = value;
            mutationCase_ = MutationOneofCase.Unique;
          }
        }

        /// <summary>Field number for the "indexed" field.</summary>
        public const int IndexedFieldNumber = 7;
        /// <summary>
        /// Indexed sets whether the field data is indexed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Indexed {
          get { return mutationCase_ == MutationOneofCase.Indexed ? (bool) mutation_ : false; }
          set {
            mutation_ = value;
            mutationCase_ = MutationOneofCase.Indexed;
          }
        }

        private object mutation_;
        /// <summary>Enum of possible cases for the "mutation" oneof.</summary>
        public enum MutationOneofCase {
          None = 0,
          Name = 1,
          Description = 2,
          Type = 3,
          Repeated = 4,
          Required = 5,
          Unique = 6,
          Indexed = 7,
        }
        private MutationOneofCase mutationCase_ = MutationOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MutationOneofCase MutationCase {
          get { return mutationCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMutation() {
          mutationCase_ = MutationOneofCase.None;
          mutation_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mutation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mutation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Description != other.Description) return false;
          if (Type != other.Type) return false;
          if (Repeated != other.Repeated) return false;
          if (Required != other.Required) return false;
          if (Unique != other.Unique) return false;
          if (Indexed != other.Indexed) return false;
          if (MutationCase != other.MutationCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (mutationCase_ == MutationOneofCase.Name) hash ^= Name.GetHashCode();
          if (mutationCase_ == MutationOneofCase.Description) hash ^= Description.GetHashCode();
          if (mutationCase_ == MutationOneofCase.Type) hash ^= Type.GetHashCode();
          if (mutationCase_ == MutationOneofCase.Repeated) hash ^= Repeated.GetHashCode();
          if (mutationCase_ == MutationOneofCase.Required) hash ^= Required.GetHashCode();
          if (mutationCase_ == MutationOneofCase.Unique) hash ^= Unique.GetHashCode();
          if (mutationCase_ == MutationOneofCase.Indexed) hash ^= Indexed.GetHashCode();
          hash ^= (int) mutationCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (mutationCase_ == MutationOneofCase.Name) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (mutationCase_ == MutationOneofCase.Description) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
          if (mutationCase_ == MutationOneofCase.Type) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Type);
          }
          if (mutationCase_ == MutationOneofCase.Repeated) {
            output.WriteRawTag(32);
            output.WriteBool(Repeated);
          }
          if (mutationCase_ == MutationOneofCase.Required) {
            output.WriteRawTag(40);
            output.WriteBool(Required);
          }
          if (mutationCase_ == MutationOneofCase.Unique) {
            output.WriteRawTag(48);
            output.WriteBool(Unique);
          }
          if (mutationCase_ == MutationOneofCase.Indexed) {
            output.WriteRawTag(56);
            output.WriteBool(Indexed);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (mutationCase_ == MutationOneofCase.Name) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (mutationCase_ == MutationOneofCase.Description) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (mutationCase_ == MutationOneofCase.Type) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (mutationCase_ == MutationOneofCase.Repeated) {
            size += 1 + 1;
          }
          if (mutationCase_ == MutationOneofCase.Required) {
            size += 1 + 1;
          }
          if (mutationCase_ == MutationOneofCase.Unique) {
            size += 1 + 1;
          }
          if (mutationCase_ == MutationOneofCase.Indexed) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mutation other) {
          if (other == null) {
            return;
          }
          switch (other.MutationCase) {
            case MutationOneofCase.Name:
              Name = other.Name;
              break;
            case MutationOneofCase.Description:
              Description = other.Description;
              break;
            case MutationOneofCase.Type:
              Type = other.Type;
              break;
            case MutationOneofCase.Repeated:
              Repeated = other.Repeated;
              break;
            case MutationOneofCase.Required:
              Required = other.Required;
              break;
            case MutationOneofCase.Unique:
              Unique = other.Unique;
              break;
            case MutationOneofCase.Indexed:
              Indexed = other.Indexed;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
              case 24: {
                mutation_ = input.ReadEnum();
                mutationCase_ = MutationOneofCase.Type;
                break;
              }
              case 32: {
                Repeated = input.ReadBool();
                break;
              }
              case 40: {
                Required = input.ReadBool();
                break;
              }
              case 48: {
                Unique = input.ReadBool();
                break;
              }
              case 56: {
                Indexed = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
