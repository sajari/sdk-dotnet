// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sajari/engine/store/term/term.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sajari.Engine.Store.Term {

  /// <summary>Holder for reflection information generated from sajari/engine/store/term/term.proto</summary>
  public static partial class TermReflection {

    #region Descriptor
    /// <summary>File descriptor for sajari/engine/store/term/term.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TermReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNzYWphcmkvZW5naW5lL3N0b3JlL3Rlcm0vdGVybS5wcm90bxIYc2FqYXJp",
            "LmVuZ2luZS5zdG9yZS50ZXJtIhgKBlZhbHVlcxIOCgZ2YWx1ZXMYASADKAki",
            "xAEKBUluZm9zEjMKBWluZm9zGAEgAygLMiQuc2FqYXJpLmVuZ2luZS5zdG9y",
            "ZS50ZXJtLkluZm9zLkluZm8ahQEKBEluZm8SCgoCaWQYASABKA0SDQoFdmFs",
            "dWUYAiABKAkSEAoIbnVtX2RvY3MYAyABKA0SEQoJbnVtX3dvcmRzGAQgASgN",
            "EhEKCWhhcmRjb2RlZBgFIAEoDRIQCghpbmZvZ2FpbhgGIAEoDRILCgNwb3MY",
            "ByABKA0SCwoDbmVnGAggASgNMlAKBFRlcm0SSAoDR2V0EiAuc2FqYXJpLmVu",
            "Z2luZS5zdG9yZS50ZXJtLlZhbHVlcxofLnNhamFyaS5lbmdpbmUuc3RvcmUu",
            "dGVybS5JbmZvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Term.Values), global::Sajari.Engine.Store.Term.Values.Parser, new[]{ "Values_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Term.Infos), global::Sajari.Engine.Store.Term.Infos.Parser, new[]{ "Infos_" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Term.Infos.Types.Info), global::Sajari.Engine.Store.Term.Infos.Types.Info.Parser, new[]{ "Id", "Value", "NumDocs", "NumWords", "Hardcoded", "Infogain", "Pos", "Neg" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Values contains a list of term values to lookup.
  /// </summary>
  public sealed partial class Values : pb::IMessage<Values> {
    private static readonly pb::MessageParser<Values> _parser = new pb::MessageParser<Values>(() => new Values());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Values> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Term.TermReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Values() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Values(Values other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Values Clone() {
      return new Values(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int Values_FieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_values_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> values_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Value representation of a term.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Values_ {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Values);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Values other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Values other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Information for a list of terms.
  /// </summary>
  public sealed partial class Infos : pb::IMessage<Infos> {
    private static readonly pb::MessageParser<Infos> _parser = new pb::MessageParser<Infos>(() => new Infos());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Infos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Term.TermReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Infos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Infos(Infos other) : this() {
      infos_ = other.infos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Infos Clone() {
      return new Infos(this);
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int Infos_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Store.Term.Infos.Types.Info> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Engine.Store.Term.Infos.Types.Info.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Store.Term.Infos.Types.Info> infos_ = new pbc::RepeatedField<global::Sajari.Engine.Store.Term.Infos.Types.Info>();
    /// <summary>
    /// Information for a list of terms.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Store.Term.Infos.Types.Info> Infos_ {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Infos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Infos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infos_.Equals(other.infos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Infos other) {
      if (other == null) {
        return;
      }
      infos_.Add(other.infos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Infos message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Term information
      /// </summary>
      public sealed partial class Info : pb::IMessage<Info> {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Store.Term.Infos.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info(Info other) : this() {
          id_ = other.id_;
          value_ = other.value_;
          numDocs_ = other.numDocs_;
          numWords_ = other.numWords_;
          hardcoded_ = other.hardcoded_;
          infogain_ = other.infogain_;
          pos_ = other.pos_;
          neg_ = other.neg_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Info Clone() {
          return new Info(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        /// <summary>
        /// Internal identifier for term.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private string value_ = "";
        /// <summary>
        /// String representation.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "num_docs" field.</summary>
        public const int NumDocsFieldNumber = 3;
        private uint numDocs_;
        /// <summary>
        /// Number of records that contain the term.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NumDocs {
          get { return numDocs_; }
          set {
            numDocs_ = value;
          }
        }

        /// <summary>Field number for the "num_words" field.</summary>
        public const int NumWordsFieldNumber = 4;
        private uint numWords_;
        /// <summary>
        /// Number of words in the term.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NumWords {
          get { return numWords_; }
          set {
            numWords_ = value;
          }
        }

        /// <summary>Field number for the "hardcoded" field.</summary>
        public const int HardcodedFieldNumber = 5;
        private uint hardcoded_;
        /// <summary>
        /// Hardcoded score attributed to the term.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Hardcoded {
          get { return hardcoded_; }
          set {
            hardcoded_ = value;
          }
        }

        /// <summary>Field number for the "infogain" field.</summary>
        public const int InfogainFieldNumber = 6;
        private uint infogain_;
        /// <summary>
        /// Infogain score attributed to the term.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Infogain {
          get { return infogain_; }
          set {
            infogain_ = value;
          }
        }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 7;
        private uint pos_;
        /// <summary>
        /// Positive interactions (count).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "neg" field.</summary>
        public const int NegFieldNumber = 8;
        private uint neg_;
        /// <summary>
        /// Negative interactions (count).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Neg {
          get { return neg_; }
          set {
            neg_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Info);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Info other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Value != other.Value) return false;
          if (NumDocs != other.NumDocs) return false;
          if (NumWords != other.NumWords) return false;
          if (Hardcoded != other.Hardcoded) return false;
          if (Infogain != other.Infogain) return false;
          if (Pos != other.Pos) return false;
          if (Neg != other.Neg) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (NumDocs != 0) hash ^= NumDocs.GetHashCode();
          if (NumWords != 0) hash ^= NumWords.GetHashCode();
          if (Hardcoded != 0) hash ^= Hardcoded.GetHashCode();
          if (Infogain != 0) hash ^= Infogain.GetHashCode();
          if (Pos != 0) hash ^= Pos.GetHashCode();
          if (Neg != 0) hash ^= Neg.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Value);
          }
          if (NumDocs != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(NumDocs);
          }
          if (NumWords != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(NumWords);
          }
          if (Hardcoded != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Hardcoded);
          }
          if (Infogain != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Infogain);
          }
          if (Pos != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(Pos);
          }
          if (Neg != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(Neg);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          if (NumDocs != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumDocs);
          }
          if (NumWords != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumWords);
          }
          if (Hardcoded != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hardcoded);
          }
          if (Infogain != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Infogain);
          }
          if (Pos != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
          }
          if (Neg != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Neg);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Info other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          if (other.NumDocs != 0) {
            NumDocs = other.NumDocs;
          }
          if (other.NumWords != 0) {
            NumWords = other.NumWords;
          }
          if (other.Hardcoded != 0) {
            Hardcoded = other.Hardcoded;
          }
          if (other.Infogain != 0) {
            Infogain = other.Infogain;
          }
          if (other.Pos != 0) {
            Pos = other.Pos;
          }
          if (other.Neg != 0) {
            Neg = other.Neg;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 18: {
                Value = input.ReadString();
                break;
              }
              case 24: {
                NumDocs = input.ReadUInt32();
                break;
              }
              case 32: {
                NumWords = input.ReadUInt32();
                break;
              }
              case 40: {
                Hardcoded = input.ReadUInt32();
                break;
              }
              case 48: {
                Infogain = input.ReadUInt32();
                break;
              }
              case 56: {
                Pos = input.ReadUInt32();
                break;
              }
              case 64: {
                Neg = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
