// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sajari/engine/store/term/term.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Sajari.Engine.Store.Term {
  /// <summary>
  ///  Term defines methods for accesing terms.
  /// </summary>
  public static class Term
  {
    static readonly string __ServiceName = "sajari.engine.store.term.Term";

    static readonly Marshaller<global::Sajari.Engine.Store.Term.Values> __Marshaller_Values = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Engine.Store.Term.Values.Parser.ParseFrom);
    static readonly Marshaller<global::Sajari.Engine.Store.Term.Infos> __Marshaller_Infos = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Engine.Store.Term.Infos.Parser.ParseFrom);

    static readonly Method<global::Sajari.Engine.Store.Term.Values, global::Sajari.Engine.Store.Term.Infos> __Method_Get = new Method<global::Sajari.Engine.Store.Term.Values, global::Sajari.Engine.Store.Term.Infos>(
        MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_Values,
        __Marshaller_Infos);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sajari.Engine.Store.Term.TermReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Term</summary>
    public abstract class TermBase
    {
      /// <summary>
      ///  Get the term with specified values.  Ignores any values which don't
      ///  have an associated term.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Sajari.Engine.Store.Term.Infos> Get(global::Sajari.Engine.Store.Term.Values request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Term</summary>
    public class TermClient : ClientBase<TermClient>
    {
      /// <summary>Creates a new client for Term</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TermClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Term that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TermClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TermClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TermClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Get the term with specified values.  Ignores any values which don't
      ///  have an associated term.
      /// </summary>
      public virtual global::Sajari.Engine.Store.Term.Infos Get(global::Sajari.Engine.Store.Term.Values request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Get(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Get the term with specified values.  Ignores any values which don't
      ///  have an associated term.
      /// </summary>
      public virtual global::Sajari.Engine.Store.Term.Infos Get(global::Sajari.Engine.Store.Term.Values request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      ///  Get the term with specified values.  Ignores any values which don't
      ///  have an associated term.
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Engine.Store.Term.Infos> GetAsync(global::Sajari.Engine.Store.Term.Values request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Get the term with specified values.  Ignores any values which don't
      ///  have an associated term.
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Engine.Store.Term.Infos> GetAsync(global::Sajari.Engine.Store.Term.Values request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      protected override TermClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TermClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(TermBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Get, serviceImpl.Get).Build();
    }

  }
}
#endregion
