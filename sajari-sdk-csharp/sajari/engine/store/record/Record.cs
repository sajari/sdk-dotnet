// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sajari/engine/store/record/record.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sajari.Engine.Store.Record {

  /// <summary>Holder for reflection information generated from sajari/engine/store/record/record.proto</summary>
  public static partial class RecordReflection {

    #region Descriptor
    /// <summary>File descriptor for sajari/engine/store/record/record.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RecordReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CidzYWphcmkvZW5naW5lL3N0b3JlL3JlY29yZC9yZWNvcmQucHJvdG8SGnNh",
            "amFyaS5lbmdpbmUuc3RvcmUucmVjb3JkGhlzYWphcmkvZW5naW5lL3ZhbHVl",
            "LnByb3RvGhdzYWphcmkvZW5naW5lL2tleS5wcm90bxoXc2FqYXJpL3JwYy9z",
            "dGF0dXMucHJvdG8iNAoORXhpc3RzUmVzcG9uc2USIgoGc3RhdHVzGAEgAygL",
            "MhIuc2FqYXJpLnJwYy5TdGF0dXMiHwoJVHJhbnNmb3JtEhIKCmlkZW50aWZp",
            "ZXIYASABKAkijQEKBlJlY29yZBI+CgZ2YWx1ZXMYASADKAsyLi5zYWphcmku",
            "ZW5naW5lLnN0b3JlLnJlY29yZC5SZWNvcmQuVmFsdWVzRW50cnkaQwoLVmFs",
            "dWVzRW50cnkSCwoDa2V5GAEgASgJEiMKBXZhbHVlGAIgASgLMhQuc2FqYXJp",
            "LmVuZ2luZS5WYWx1ZToCOAEieQoHUmVjb3JkcxIzCgdyZWNvcmRzGAEgAygL",
            "MiIuc2FqYXJpLmVuZ2luZS5zdG9yZS5yZWNvcmQuUmVjb3JkEjkKCnRyYW5z",
            "Zm9ybXMYAiADKAsyJS5zYWphcmkuZW5naW5lLnN0b3JlLnJlY29yZC5UcmFu",
            "c2Zvcm0iUwoLQWRkUmVzcG9uc2USIAoEa2V5cxgBIAMoCzISLnNhamFyaS5l",
            "bmdpbmUuS2V5EiIKBnN0YXR1cxgCIAMoCzISLnNhamFyaS5ycGMuU3RhdHVz",
            "ImYKC0dldFJlc3BvbnNlEjMKB3JlY29yZHMYASADKAsyIi5zYWphcmkuZW5n",
            "aW5lLnN0b3JlLnJlY29yZC5SZWNvcmQSIgoGc3RhdHVzGAIgAygLMhIuc2Fq",
            "YXJpLnJwYy5TdGF0dXMiNAoORGVsZXRlUmVzcG9uc2USIgoGc3RhdHVzGAEg",
            "AygLMhIuc2FqYXJpLnJwYy5TdGF0dXMiKAoES2V5cxIgCgRrZXlzGAEgAygL",
            "MhIuc2FqYXJpLmVuZ2luZS5LZXkinQMKDU11dGF0ZVJlcXVlc3QSUgoQcmVj",
            "b3JkX211dGF0aW9ucxgBIAMoCzI4LnNhamFyaS5lbmdpbmUuc3RvcmUucmVj",
            "b3JkLk11dGF0ZVJlcXVlc3QuUmVjb3JkTXV0YXRpb24atwIKDlJlY29yZE11",
            "dGF0aW9uEh8KA2tleRgBIAEoCzISLnNhamFyaS5lbmdpbmUuS2V5El8KD2Zp",
            "ZWxkX211dGF0aW9ucxgCIAMoCzJGLnNhamFyaS5lbmdpbmUuc3RvcmUucmVj",
            "b3JkLk11dGF0ZVJlcXVlc3QuUmVjb3JkTXV0YXRpb24uRmllbGRNdXRhdGlv",
            "bhqiAQoNRmllbGRNdXRhdGlvbhINCgVmaWVsZBgBIAEoCRIjCgNzZXQYAiAB",
            "KAsyFC5zYWphcmkuZW5naW5lLlZhbHVlSAASKQoJaW5jcmVtZW50GAMgASgL",
            "MhQuc2FqYXJpLmVuZ2luZS5WYWx1ZUgAEiYKBmFwcGVuZBgEIAEoCzIULnNh",
            "amFyaS5lbmdpbmUuVmFsdWVIAEIKCghtdXRhdGlvbiI0Cg5NdXRhdGVSZXNw",
            "b25zZRIiCgZzdGF0dXMYASADKAsyEi5zYWphcmkucnBjLlN0YXR1cyJICgpT",
            "ZXRSZXF1ZXN0EjoKC2tleXNfc2NvcmVzGAEgAygLMiUuc2FqYXJpLmVuZ2lu",
            "ZS5zdG9yZS5yZWNvcmQuS2V5U2NvcmVzIjEKC1NldFJlc3BvbnNlEiIKBnN0",
            "YXR1cxgBIAMoCzISLnNhamFyaS5ycGMuU3RhdHVzIk4KEEluY3JlbWVudFJl",
            "cXVlc3QSOgoLa2V5c19zY29yZXMYASADKAsyJS5zYWphcmkuZW5naW5lLnN0",
            "b3JlLnJlY29yZC5LZXlTY29yZXMiNwoRSW5jcmVtZW50UmVzcG9uc2USIgoG",
            "c3RhdHVzGAEgAygLMhIuc2FqYXJpLnJwYy5TdGF0dXMinwEKCUtleVNjb3Jl",
            "cxIfCgNrZXkYASABKAsyEi5zYWphcmkuZW5naW5lLktleRI7CgZzY29yZXMY",
            "AiADKAsyKy5zYWphcmkuZW5naW5lLnN0b3JlLnJlY29yZC5LZXlTY29yZXMu",
            "U2NvcmUaNAoFU2NvcmUSDQoFdGVybXMYASADKAkSDQoFY291bnQYAiABKAUS",
            "DQoFc2NvcmUYAyABKAIyvwMKBVN0b3JlElMKA0FkZBIjLnNhamFyaS5lbmdp",
            "bmUuc3RvcmUucmVjb3JkLlJlY29yZHMaJy5zYWphcmkuZW5naW5lLnN0b3Jl",
            "LnJlY29yZC5BZGRSZXNwb25zZRJQCgNHZXQSIC5zYWphcmkuZW5naW5lLnN0",
            "b3JlLnJlY29yZC5LZXlzGicuc2FqYXJpLmVuZ2luZS5zdG9yZS5yZWNvcmQu",
            "R2V0UmVzcG9uc2USVgoGRGVsZXRlEiAuc2FqYXJpLmVuZ2luZS5zdG9yZS5y",
            "ZWNvcmQuS2V5cxoqLnNhamFyaS5lbmdpbmUuc3RvcmUucmVjb3JkLkRlbGV0",
            "ZVJlc3BvbnNlEl8KBk11dGF0ZRIpLnNhamFyaS5lbmdpbmUuc3RvcmUucmVj",
            "b3JkLk11dGF0ZVJlcXVlc3QaKi5zYWphcmkuZW5naW5lLnN0b3JlLnJlY29y",
            "ZC5NdXRhdGVSZXNwb25zZRJWCgZFeGlzdHMSIC5zYWphcmkuZW5naW5lLnN0",
            "b3JlLnJlY29yZC5LZXlzGiouc2FqYXJpLmVuZ2luZS5zdG9yZS5yZWNvcmQu",
            "RXhpc3RzUmVzcG9uc2UyyQEKBVNjb3JlElYKA1NldBImLnNhamFyaS5lbmdp",
            "bmUuc3RvcmUucmVjb3JkLlNldFJlcXVlc3QaJy5zYWphcmkuZW5naW5lLnN0",
            "b3JlLnJlY29yZC5TZXRSZXNwb25zZRJoCglJbmNyZW1lbnQSLC5zYWphcmku",
            "ZW5naW5lLnN0b3JlLnJlY29yZC5JbmNyZW1lbnRSZXF1ZXN0Gi0uc2FqYXJp",
            "LmVuZ2luZS5zdG9yZS5yZWNvcmQuSW5jcmVtZW50UmVzcG9uc2ViBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Sajari.Engine.ValueReflection.Descriptor, global::Sajari.Engine.KeyReflection.Descriptor, global::Sajari.Rpc.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.ExistsResponse), global::Sajari.Engine.Store.Record.ExistsResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.Transform), global::Sajari.Engine.Store.Record.Transform.Parser, new[]{ "Identifier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.Record), global::Sajari.Engine.Store.Record.Record.Parser, new[]{ "Values" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.Records), global::Sajari.Engine.Store.Record.Records.Parser, new[]{ "Records_", "Transforms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.AddResponse), global::Sajari.Engine.Store.Record.AddResponse.Parser, new[]{ "Keys", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.GetResponse), global::Sajari.Engine.Store.Record.GetResponse.Parser, new[]{ "Records", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.DeleteResponse), global::Sajari.Engine.Store.Record.DeleteResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.Keys), global::Sajari.Engine.Store.Record.Keys.Parser, new[]{ "Keys_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.MutateRequest), global::Sajari.Engine.Store.Record.MutateRequest.Parser, new[]{ "RecordMutations" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation), global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation.Parser, new[]{ "Key", "FieldMutations" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation.Types.FieldMutation), global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation.Types.FieldMutation.Parser, new[]{ "Field", "Set", "Increment", "Append" }, new[]{ "Mutation" }, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.MutateResponse), global::Sajari.Engine.Store.Record.MutateResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.SetRequest), global::Sajari.Engine.Store.Record.SetRequest.Parser, new[]{ "KeysScores" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.SetResponse), global::Sajari.Engine.Store.Record.SetResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.IncrementRequest), global::Sajari.Engine.Store.Record.IncrementRequest.Parser, new[]{ "KeysScores" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.IncrementResponse), global::Sajari.Engine.Store.Record.IncrementResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.KeyScores), global::Sajari.Engine.Store.Record.KeyScores.Parser, new[]{ "Key", "Scores" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Store.Record.KeyScores.Types.Score), global::Sajari.Engine.Store.Record.KeyScores.Types.Score.Parser, new[]{ "Terms", "Count", "Score_" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ExistsResponse : pb::IMessage<ExistsResponse> {
    private static readonly pb::MessageParser<ExistsResponse> _parser = new pb::MessageParser<ExistsResponse>(() => new ExistsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExistsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExistsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExistsResponse(ExistsResponse other) : this() {
      status_ = other.status_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExistsResponse Clone() {
      return new ExistsResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Rpc.Status> _repeated_status_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Rpc.Status.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Rpc.Status> status_ = new pbc::RepeatedField<global::Sajari.Rpc.Status>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Rpc.Status> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExistsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExistsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!status_.Equals(other.status_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= status_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExistsResponse other) {
      if (other == null) {
        return;
      }
      status_.Add(other.status_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Transform is a representation of a transform process which is applied to a record
  /// before it is added.
  /// </summary>
  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      identifier_ = other.identifier_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private string identifier_ = "";
    /// <summary>
    /// Identifier unique identifies a transform
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identifier {
      get { return identifier_; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Identifier != other.Identifier) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Identifier.Length != 0) hash ^= Identifier.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Identifier.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Identifier);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Identifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.Identifier.Length != 0) {
        Identifier = other.Identifier;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Identifier = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Record is a single record made up of key-value pairs.
  /// </summary>
  public sealed partial class Record : pb::IMessage<Record> {
    private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Record> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record(Record other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record Clone() {
      return new Record(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Sajari.Engine.Value>.Codec _map_values_codec
        = new pbc::MapField<string, global::Sajari.Engine.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Value.Parser), 10);
    private readonly pbc::MapField<string, global::Sajari.Engine.Value> values_ = new pbc::MapField<string, global::Sajari.Engine.Value>();
    /// <summary>
    /// A map of key-value pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Sajari.Engine.Value> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Record);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Values.Equals(other.Values)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Values.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _map_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_map_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Record other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _map_values_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Records is a message which represents a list of records.
  /// </summary>
  public sealed partial class Records : pb::IMessage<Records> {
    private static readonly pb::MessageParser<Records> _parser = new pb::MessageParser<Records>(() => new Records());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Records> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Records() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Records(Records other) : this() {
      records_ = other.records_.Clone();
      transforms_ = other.transforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Records Clone() {
      return new Records(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int Records_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Store.Record.Record> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Engine.Store.Record.Record.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Store.Record.Record> records_ = new pbc::RepeatedField<global::Sajari.Engine.Store.Record.Record>();
    /// <summary>
    /// The list of records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Store.Record.Record> Records_ {
      get { return records_; }
    }

    /// <summary>Field number for the "transforms" field.</summary>
    public const int TransformsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Store.Record.Transform> _repeated_transforms_codec
        = pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Store.Record.Transform.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Store.Record.Transform> transforms_ = new pbc::RepeatedField<global::Sajari.Engine.Store.Record.Transform>();
    /// <summary>
    /// Transforms is a list of transformations to be applied to the records
    /// before they are added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Store.Record.Transform> Transforms {
      get { return transforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Records);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Records other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      if(!transforms_.Equals(other.transforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      hash ^= transforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      transforms_.WriteTo(output, _repeated_transforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      size += transforms_.CalculateSize(_repeated_transforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Records other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      transforms_.Add(other.transforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 18: {
            transforms_.AddEntriesFrom(input, _repeated_transforms_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// AddResponse is returned from Add.
  /// </summary>
  public sealed partial class AddResponse : pb::IMessage<AddResponse> {
    private static readonly pb::MessageParser<AddResponse> _parser = new pb::MessageParser<AddResponse>(() => new AddResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse(AddResponse other) : this() {
      keys_ = other.keys_.Clone();
      status_ = other.status_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddResponse Clone() {
      return new AddResponse(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Key> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Engine.Key.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Key> keys_ = new pbc::RepeatedField<global::Sajari.Engine.Key>();
    /// <summary>
    /// Keys for the inserted records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Key> Keys {
      get { return keys_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sajari.Rpc.Status> _repeated_status_codec
        = pb::FieldCodec.ForMessage(18, global::Sajari.Rpc.Status.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Rpc.Status> status_ = new pbc::RepeatedField<global::Sajari.Rpc.Status>();
    /// <summary>
    /// Status for each insert.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Rpc.Status> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      if(!status_.Equals(other.status_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      hash ^= status_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddResponse other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
      status_.Add(other.status_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
          case 18: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GetResponse is returned from Get.
  /// </summary>
  public sealed partial class GetResponse : pb::IMessage<GetResponse> {
    private static readonly pb::MessageParser<GetResponse> _parser = new pb::MessageParser<GetResponse>(() => new GetResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse(GetResponse other) : this() {
      records_ = other.records_.Clone();
      status_ = other.status_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse Clone() {
      return new GetResponse(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Store.Record.Record> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Engine.Store.Record.Record.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Store.Record.Record> records_ = new pbc::RepeatedField<global::Sajari.Engine.Store.Record.Record>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Store.Record.Record> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sajari.Rpc.Status> _repeated_status_codec
        = pb::FieldCodec.ForMessage(18, global::Sajari.Rpc.Status.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Rpc.Status> status_ = new pbc::RepeatedField<global::Sajari.Rpc.Status>();
    /// <summary>
    /// Status for each get.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Rpc.Status> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      if(!status_.Equals(other.status_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      hash ^= status_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetResponse other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      status_.Add(other.status_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 18: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DeleteResponse is returned from Delete.
  /// </summary>
  public sealed partial class DeleteResponse : pb::IMessage<DeleteResponse> {
    private static readonly pb::MessageParser<DeleteResponse> _parser = new pb::MessageParser<DeleteResponse>(() => new DeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse(DeleteResponse other) : this() {
      status_ = other.status_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteResponse Clone() {
      return new DeleteResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Rpc.Status> _repeated_status_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Rpc.Status.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Rpc.Status> status_ = new pbc::RepeatedField<global::Sajari.Rpc.Status>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Rpc.Status> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!status_.Equals(other.status_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= status_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteResponse other) {
      if (other == null) {
        return;
      }
      status_.Add(other.status_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Keys is a list of keys.
  /// </summary>
  public sealed partial class Keys : pb::IMessage<Keys> {
    private static readonly pb::MessageParser<Keys> _parser = new pb::MessageParser<Keys>(() => new Keys());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Keys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keys(Keys other) : this() {
      keys_ = other.keys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keys Clone() {
      return new Keys(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int Keys_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Key> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Engine.Key.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Key> keys_ = new pbc::RepeatedField<global::Sajari.Engine.Key>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Key> Keys_ {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Keys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Keys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Keys other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MutateRequest : pb::IMessage<MutateRequest> {
    private static readonly pb::MessageParser<MutateRequest> _parser = new pb::MessageParser<MutateRequest>(() => new MutateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MutateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateRequest(MutateRequest other) : this() {
      recordMutations_ = other.recordMutations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateRequest Clone() {
      return new MutateRequest(this);
    }

    /// <summary>Field number for the "record_mutations" field.</summary>
    public const int RecordMutationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation> _repeated_recordMutations_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation> recordMutations_ = new pbc::RepeatedField<global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation>();
    /// <summary>
    /// List of record murations to apply.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation> RecordMutations {
      get { return recordMutations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MutateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MutateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!recordMutations_.Equals(other.recordMutations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= recordMutations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recordMutations_.WriteTo(output, _repeated_recordMutations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recordMutations_.CalculateSize(_repeated_recordMutations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MutateRequest other) {
      if (other == null) {
        return;
      }
      recordMutations_.Add(other.recordMutations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            recordMutations_.AddEntriesFrom(input, _repeated_recordMutations_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MutateRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class RecordMutation : pb::IMessage<RecordMutation> {
        private static readonly pb::MessageParser<RecordMutation> _parser = new pb::MessageParser<RecordMutation>(() => new RecordMutation());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecordMutation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Store.Record.MutateRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordMutation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordMutation(RecordMutation other) : this() {
          Key = other.key_ != null ? other.Key.Clone() : null;
          fieldMutations_ = other.fieldMutations_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordMutation Clone() {
          return new RecordMutation(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private global::Sajari.Engine.Key key_;
        /// <summary>
        /// Key which uniquely identifies record.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Sajari.Engine.Key Key {
          get { return key_; }
          set {
            key_ = value;
          }
        }

        /// <summary>Field number for the "field_mutations" field.</summary>
        public const int FieldMutationsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation.Types.FieldMutation> _repeated_fieldMutations_codec
            = pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation.Types.FieldMutation.Parser);
        private readonly pbc::RepeatedField<global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation.Types.FieldMutation> fieldMutations_ = new pbc::RepeatedField<global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation.Types.FieldMutation>();
        /// <summary>
        /// List of fields to mutate.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation.Types.FieldMutation> FieldMutations {
          get { return fieldMutations_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RecordMutation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RecordMutation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Key, other.Key)) return false;
          if(!fieldMutations_.Equals(other.fieldMutations_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (key_ != null) hash ^= Key.GetHashCode();
          hash ^= fieldMutations_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (key_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Key);
          }
          fieldMutations_.WriteTo(output, _repeated_fieldMutations_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (key_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
          }
          size += fieldMutations_.CalculateSize(_repeated_fieldMutations_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RecordMutation other) {
          if (other == null) {
            return;
          }
          if (other.key_ != null) {
            if (key_ == null) {
              key_ = new global::Sajari.Engine.Key();
            }
            Key.MergeFrom(other.Key);
          }
          fieldMutations_.Add(other.fieldMutations_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (key_ == null) {
                  key_ = new global::Sajari.Engine.Key();
                }
                input.ReadMessage(key_);
                break;
              }
              case 18: {
                fieldMutations_.AddEntriesFrom(input, _repeated_fieldMutations_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the RecordMutation message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// MutateField defines a mutation of a field.
          /// </summary>
          public sealed partial class FieldMutation : pb::IMessage<FieldMutation> {
            private static readonly pb::MessageParser<FieldMutation> _parser = new pb::MessageParser<FieldMutation>(() => new FieldMutation());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<FieldMutation> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Sajari.Engine.Store.Record.MutateRequest.Types.RecordMutation.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FieldMutation() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FieldMutation(FieldMutation other) : this() {
              field_ = other.field_;
              switch (other.MutationCase) {
                case MutationOneofCase.Set:
                  Set = other.Set.Clone();
                  break;
                case MutationOneofCase.Increment:
                  Increment = other.Increment.Clone();
                  break;
                case MutationOneofCase.Append:
                  Append = other.Append.Clone();
                  break;
              }

            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FieldMutation Clone() {
              return new FieldMutation(this);
            }

            /// <summary>Field number for the "field" field.</summary>
            public const int FieldFieldNumber = 1;
            private string field_ = "";
            /// <summary>
            /// Field is the name of the field to mutate.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Field {
              get { return field_; }
              set {
                field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "set" field.</summary>
            public const int SetFieldNumber = 2;
            /// <summary>
            /// Set overrides the current value with the value in set.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Sajari.Engine.Value Set {
              get { return mutationCase_ == MutationOneofCase.Set ? (global::Sajari.Engine.Value) mutation_ : null; }
              set {
                mutation_ = value;
                mutationCase_ = value == null ? MutationOneofCase.None : MutationOneofCase.Set;
              }
            }

            /// <summary>Field number for the "increment" field.</summary>
            public const int IncrementFieldNumber = 3;
            /// <summary>
            /// Increment takes the current value and incremenets it using the
            /// numerical representation of incremenet.  Can only be used on numeric
            /// fields.
            ///
            /// Not yet implemented.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Sajari.Engine.Value Increment {
              get { return mutationCase_ == MutationOneofCase.Increment ? (global::Sajari.Engine.Value) mutation_ : null; }
              set {
                mutation_ = value;
                mutationCase_ = value == null ? MutationOneofCase.None : MutationOneofCase.Increment;
              }
            }

            /// <summary>Field number for the "append" field.</summary>
            public const int AppendFieldNumber = 4;
            /// <summary>
            /// Append takes the current value and appends a new element to the
            /// end.  Can only be used on array fields.
            ///
            /// Not yet implemented.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Sajari.Engine.Value Append {
              get { return mutationCase_ == MutationOneofCase.Append ? (global::Sajari.Engine.Value) mutation_ : null; }
              set {
                mutation_ = value;
                mutationCase_ = value == null ? MutationOneofCase.None : MutationOneofCase.Append;
              }
            }

            private object mutation_;
            /// <summary>Enum of possible cases for the "mutation" oneof.</summary>
            public enum MutationOneofCase {
              None = 0,
              Set = 2,
              Increment = 3,
              Append = 4,
            }
            private MutationOneofCase mutationCase_ = MutationOneofCase.None;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MutationOneofCase MutationCase {
              get { return mutationCase_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearMutation() {
              mutationCase_ = MutationOneofCase.None;
              mutation_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as FieldMutation);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(FieldMutation other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Field != other.Field) return false;
              if (!object.Equals(Set, other.Set)) return false;
              if (!object.Equals(Increment, other.Increment)) return false;
              if (!object.Equals(Append, other.Append)) return false;
              if (MutationCase != other.MutationCase) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Field.Length != 0) hash ^= Field.GetHashCode();
              if (mutationCase_ == MutationOneofCase.Set) hash ^= Set.GetHashCode();
              if (mutationCase_ == MutationOneofCase.Increment) hash ^= Increment.GetHashCode();
              if (mutationCase_ == MutationOneofCase.Append) hash ^= Append.GetHashCode();
              hash ^= (int) mutationCase_;
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Field.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Field);
              }
              if (mutationCase_ == MutationOneofCase.Set) {
                output.WriteRawTag(18);
                output.WriteMessage(Set);
              }
              if (mutationCase_ == MutationOneofCase.Increment) {
                output.WriteRawTag(26);
                output.WriteMessage(Increment);
              }
              if (mutationCase_ == MutationOneofCase.Append) {
                output.WriteRawTag(34);
                output.WriteMessage(Append);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Field.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
              }
              if (mutationCase_ == MutationOneofCase.Set) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Set);
              }
              if (mutationCase_ == MutationOneofCase.Increment) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Increment);
              }
              if (mutationCase_ == MutationOneofCase.Append) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Append);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(FieldMutation other) {
              if (other == null) {
                return;
              }
              if (other.Field.Length != 0) {
                Field = other.Field;
              }
              switch (other.MutationCase) {
                case MutationOneofCase.Set:
                  Set = other.Set;
                  break;
                case MutationOneofCase.Increment:
                  Increment = other.Increment;
                  break;
                case MutationOneofCase.Append:
                  Append = other.Append;
                  break;
              }

            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    Field = input.ReadString();
                    break;
                  }
                  case 18: {
                    global::Sajari.Engine.Value subBuilder = new global::Sajari.Engine.Value();
                    if (mutationCase_ == MutationOneofCase.Set) {
                      subBuilder.MergeFrom(Set);
                    }
                    input.ReadMessage(subBuilder);
                    Set = subBuilder;
                    break;
                  }
                  case 26: {
                    global::Sajari.Engine.Value subBuilder = new global::Sajari.Engine.Value();
                    if (mutationCase_ == MutationOneofCase.Increment) {
                      subBuilder.MergeFrom(Increment);
                    }
                    input.ReadMessage(subBuilder);
                    Increment = subBuilder;
                    break;
                  }
                  case 34: {
                    global::Sajari.Engine.Value subBuilder = new global::Sajari.Engine.Value();
                    if (mutationCase_ == MutationOneofCase.Append) {
                      subBuilder.MergeFrom(Append);
                    }
                    input.ReadMessage(subBuilder);
                    Append = subBuilder;
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class MutateResponse : pb::IMessage<MutateResponse> {
    private static readonly pb::MessageParser<MutateResponse> _parser = new pb::MessageParser<MutateResponse>(() => new MutateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MutateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateResponse(MutateResponse other) : this() {
      status_ = other.status_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateResponse Clone() {
      return new MutateResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Rpc.Status> _repeated_status_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Rpc.Status.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Rpc.Status> status_ = new pbc::RepeatedField<global::Sajari.Rpc.Status>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Rpc.Status> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MutateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MutateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!status_.Equals(other.status_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= status_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MutateResponse other) {
      if (other == null) {
        return;
      }
      status_.Add(other.status_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetRequest : pb::IMessage<SetRequest> {
    private static readonly pb::MessageParser<SetRequest> _parser = new pb::MessageParser<SetRequest>(() => new SetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRequest(SetRequest other) : this() {
      keysScores_ = other.keysScores_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRequest Clone() {
      return new SetRequest(this);
    }

    /// <summary>Field number for the "keys_scores" field.</summary>
    public const int KeysScoresFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Store.Record.KeyScores> _repeated_keysScores_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Engine.Store.Record.KeyScores.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Store.Record.KeyScores> keysScores_ = new pbc::RepeatedField<global::Sajari.Engine.Store.Record.KeyScores>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Store.Record.KeyScores> KeysScores {
      get { return keysScores_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keysScores_.Equals(other.keysScores_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keysScores_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keysScores_.WriteTo(output, _repeated_keysScores_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keysScores_.CalculateSize(_repeated_keysScores_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetRequest other) {
      if (other == null) {
        return;
      }
      keysScores_.Add(other.keysScores_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keysScores_.AddEntriesFrom(input, _repeated_keysScores_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetResponse : pb::IMessage<SetResponse> {
    private static readonly pb::MessageParser<SetResponse> _parser = new pb::MessageParser<SetResponse>(() => new SetResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetResponse(SetResponse other) : this() {
      status_ = other.status_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetResponse Clone() {
      return new SetResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Rpc.Status> _repeated_status_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Rpc.Status.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Rpc.Status> status_ = new pbc::RepeatedField<global::Sajari.Rpc.Status>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Rpc.Status> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!status_.Equals(other.status_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= status_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetResponse other) {
      if (other == null) {
        return;
      }
      status_.Add(other.status_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IncrementRequest : pb::IMessage<IncrementRequest> {
    private static readonly pb::MessageParser<IncrementRequest> _parser = new pb::MessageParser<IncrementRequest>(() => new IncrementRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncrementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementRequest(IncrementRequest other) : this() {
      keysScores_ = other.keysScores_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementRequest Clone() {
      return new IncrementRequest(this);
    }

    /// <summary>Field number for the "keys_scores" field.</summary>
    public const int KeysScoresFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Store.Record.KeyScores> _repeated_keysScores_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Engine.Store.Record.KeyScores.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Store.Record.KeyScores> keysScores_ = new pbc::RepeatedField<global::Sajari.Engine.Store.Record.KeyScores>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Store.Record.KeyScores> KeysScores {
      get { return keysScores_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncrementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncrementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keysScores_.Equals(other.keysScores_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keysScores_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keysScores_.WriteTo(output, _repeated_keysScores_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keysScores_.CalculateSize(_repeated_keysScores_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncrementRequest other) {
      if (other == null) {
        return;
      }
      keysScores_.Add(other.keysScores_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keysScores_.AddEntriesFrom(input, _repeated_keysScores_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Increment response is
  /// </summary>
  public sealed partial class IncrementResponse : pb::IMessage<IncrementResponse> {
    private static readonly pb::MessageParser<IncrementResponse> _parser = new pb::MessageParser<IncrementResponse>(() => new IncrementResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncrementResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementResponse(IncrementResponse other) : this() {
      status_ = other.status_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncrementResponse Clone() {
      return new IncrementResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Rpc.Status> _repeated_status_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Rpc.Status.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Rpc.Status> status_ = new pbc::RepeatedField<global::Sajari.Rpc.Status>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Rpc.Status> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncrementResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncrementResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!status_.Equals(other.status_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= status_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncrementResponse other) {
      if (other == null) {
        return;
      }
      status_.Add(other.status_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyScores : pb::IMessage<KeyScores> {
    private static readonly pb::MessageParser<KeyScores> _parser = new pb::MessageParser<KeyScores>(() => new KeyScores());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyScores> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Store.Record.RecordReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyScores() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyScores(KeyScores other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      scores_ = other.scores_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyScores Clone() {
      return new KeyScores(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Sajari.Engine.Key key_;
    /// <summary>
    /// Record identifier key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Key Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "scores" field.</summary>
    public const int ScoresFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Store.Record.KeyScores.Types.Score> _repeated_scores_codec
        = pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Store.Record.KeyScores.Types.Score.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Store.Record.KeyScores.Types.Score> scores_ = new pbc::RepeatedField<global::Sajari.Engine.Store.Record.KeyScores.Types.Score>();
    /// <summary>
    /// Scores to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Store.Record.KeyScores.Types.Score> Scores {
      get { return scores_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyScores);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyScores other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if(!scores_.Equals(other.scores_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      hash ^= scores_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      scores_.WriteTo(output, _repeated_scores_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      size += scores_.CalculateSize(_repeated_scores_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyScores other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Sajari.Engine.Key();
        }
        Key.MergeFrom(other.Key);
      }
      scores_.Add(other.scores_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::Sajari.Engine.Key();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            scores_.AddEntriesFrom(input, _repeated_scores_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the KeyScores message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Score values for an array of terms.
      /// </summary>
      public sealed partial class Score : pb::IMessage<Score> {
        private static readonly pb::MessageParser<Score> _parser = new pb::MessageParser<Score>(() => new Score());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Score> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Store.Record.KeyScores.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Score() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Score(Score other) : this() {
          terms_ = other.terms_.Clone();
          count_ = other.count_;
          score_ = other.score_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Score Clone() {
          return new Score(this);
        }

        /// <summary>Field number for the "terms" field.</summary>
        public const int TermsFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_terms_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> terms_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// Terms to score.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Terms {
          get { return terms_; }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private int count_;
        /// <summary>
        /// Count of interactions (uint16).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int Score_FieldNumber = 3;
        private float score_;
        /// <summary>
        /// Score for interactions.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Score_ {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Score);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Score other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!terms_.Equals(other.terms_)) return false;
          if (Count != other.Count) return false;
          if (Score_ != other.Score_) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= terms_.GetHashCode();
          if (Count != 0) hash ^= Count.GetHashCode();
          if (Score_ != 0F) hash ^= Score_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          terms_.WriteTo(output, _repeated_terms_codec);
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Count);
          }
          if (Score_ != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Score_);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += terms_.CalculateSize(_repeated_terms_codec);
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
          }
          if (Score_ != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Score other) {
          if (other == null) {
            return;
          }
          terms_.Add(other.terms_);
          if (other.Count != 0) {
            Count = other.Count;
          }
          if (other.Score_ != 0F) {
            Score_ = other.Score_;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                terms_.AddEntriesFrom(input, _repeated_terms_codec);
                break;
              }
              case 16: {
                Count = input.ReadInt32();
                break;
              }
              case 29: {
                Score_ = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
