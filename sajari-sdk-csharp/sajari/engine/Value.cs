// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sajari/engine/value.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sajari.Engine {

  /// <summary>Holder for reflection information generated from sajari/engine/value.proto</summary>
  public static partial class ValueReflection {

    #region Descriptor
    /// <summary>File descriptor for sajari/engine/value.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ValueReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlzYWphcmkvZW5naW5lL3ZhbHVlLnByb3RvEg1zYWphcmkuZW5naW5lIoEB",
            "CgVWYWx1ZRIOCgRudWxsGAEgASgISAASEAoGc2luZ2xlGAIgASgJSAASMQoI",
            "cmVwZWF0ZWQYAyABKAsyHS5zYWphcmkuZW5naW5lLlZhbHVlLlJlcGVhdGVk",
            "SAAaGgoIUmVwZWF0ZWQSDgoGdmFsdWVzGAEgAygJQgcKBXZhbHVlYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Value), global::Sajari.Engine.Value.Parser, new[]{ "Null", "Single", "Repeated" }, new[]{ "Value" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Value.Types.Repeated), global::Sajari.Engine.Value.Types.Repeated.Parser, new[]{ "Values" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Value is a repesentation data of columnular data for a record.
  /// </summary>
  public sealed partial class Value : pb::IMessage<Value> {
    private static readonly pb::MessageParser<Value> _parser = new pb::MessageParser<Value>(() => new Value());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Value> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.ValueReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value(Value other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.Null:
          Null = other.Null;
          break;
        case ValueOneofCase.Single:
          Single = other.Single;
          break;
        case ValueOneofCase.Repeated:
          Repeated = other.Repeated.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value Clone() {
      return new Value(this);
    }

    /// <summary>Field number for the "null" field.</summary>
    public const int NullFieldNumber = 1;
    /// <summary>
    /// Null value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Null {
      get { return valueCase_ == ValueOneofCase.Null ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Null;
      }
    }

    /// <summary>Field number for the "single" field.</summary>
    public const int SingleFieldNumber = 2;
    /// <summary>
    /// Single value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Single {
      get { return valueCase_ == ValueOneofCase.Single ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.Single;
      }
    }

    /// <summary>Field number for the "repeated" field.</summary>
    public const int RepeatedFieldNumber = 3;
    /// <summary>
    /// Repeated values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Value.Types.Repeated Repeated {
      get { return valueCase_ == ValueOneofCase.Repeated ? (global::Sajari.Engine.Value.Types.Repeated) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Repeated;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Null = 1,
      Single = 2,
      Repeated = 3,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Value);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Null != other.Null) return false;
      if (Single != other.Single) return false;
      if (!object.Equals(Repeated, other.Repeated)) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.Null) hash ^= Null.GetHashCode();
      if (valueCase_ == ValueOneofCase.Single) hash ^= Single.GetHashCode();
      if (valueCase_ == ValueOneofCase.Repeated) hash ^= Repeated.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.Null) {
        output.WriteRawTag(8);
        output.WriteBool(Null);
      }
      if (valueCase_ == ValueOneofCase.Single) {
        output.WriteRawTag(18);
        output.WriteString(Single);
      }
      if (valueCase_ == ValueOneofCase.Repeated) {
        output.WriteRawTag(26);
        output.WriteMessage(Repeated);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.Null) {
        size += 1 + 1;
      }
      if (valueCase_ == ValueOneofCase.Single) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Single);
      }
      if (valueCase_ == ValueOneofCase.Repeated) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Repeated);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Value other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Null:
          Null = other.Null;
          break;
        case ValueOneofCase.Single:
          Single = other.Single;
          break;
        case ValueOneofCase.Repeated:
          Repeated = other.Repeated;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Null = input.ReadBool();
            break;
          }
          case 18: {
            Single = input.ReadString();
            break;
          }
          case 26: {
            global::Sajari.Engine.Value.Types.Repeated subBuilder = new global::Sajari.Engine.Value.Types.Repeated();
            if (valueCase_ == ValueOneofCase.Repeated) {
              subBuilder.MergeFrom(Repeated);
            }
            input.ReadMessage(subBuilder);
            Repeated = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Value message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Repeated values
      /// </summary>
      public sealed partial class Repeated : pb::IMessage<Repeated> {
        private static readonly pb::MessageParser<Repeated> _parser = new pb::MessageParser<Repeated>(() => new Repeated());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Repeated> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Value.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Repeated() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Repeated(Repeated other) : this() {
          values_ = other.values_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Repeated Clone() {
          return new Repeated(this);
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_values_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> values_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Repeated);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Repeated other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!values_.Equals(other.values_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= values_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          values_.WriteTo(output, _repeated_values_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += values_.CalculateSize(_repeated_values_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Repeated other) {
          if (other == null) {
            return;
          }
          values_.Add(other.values_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
