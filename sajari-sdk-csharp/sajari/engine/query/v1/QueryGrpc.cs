// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sajari/engine/query/v1/query.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Sajari.Engine.Query.V1 {
  /// <summary>
  ///  Service Query defines methods for querying a collection.
  /// </summary>
  public static class Query
  {
    static readonly string __ServiceName = "sajari.engine.query.v1.Query";

    static readonly Marshaller<global::Sajari.Engine.Query.V1.SearchRequest> __Marshaller_SearchRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Engine.Query.V1.SearchRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Sajari.Engine.Query.V1.SearchResponse> __Marshaller_SearchResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Engine.Query.V1.SearchResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Sajari.Engine.Query.V1.EvaluateRequest> __Marshaller_EvaluateRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Engine.Query.V1.EvaluateRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Sajari.Engine.Query.V1.SubstituteRequest> __Marshaller_SubstituteRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Engine.Query.V1.SubstituteRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Sajari.Engine.Query.V1.AnalyseRequest> __Marshaller_AnalyseRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Engine.Query.V1.AnalyseRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Sajari.Engine.Query.V1.AnalyseResponse> __Marshaller_AnalyseResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Engine.Query.V1.AnalyseResponse.Parser.ParseFrom);

    static readonly Method<global::Sajari.Engine.Query.V1.SearchRequest, global::Sajari.Engine.Query.V1.SearchResponse> __Method_Search = new Method<global::Sajari.Engine.Query.V1.SearchRequest, global::Sajari.Engine.Query.V1.SearchResponse>(
        MethodType.Unary,
        __ServiceName,
        "Search",
        __Marshaller_SearchRequest,
        __Marshaller_SearchResponse);

    static readonly Method<global::Sajari.Engine.Query.V1.EvaluateRequest, global::Sajari.Engine.Query.V1.SearchResponse> __Method_Evaluate = new Method<global::Sajari.Engine.Query.V1.EvaluateRequest, global::Sajari.Engine.Query.V1.SearchResponse>(
        MethodType.Unary,
        __ServiceName,
        "Evaluate",
        __Marshaller_EvaluateRequest,
        __Marshaller_SearchResponse);

    static readonly Method<global::Sajari.Engine.Query.V1.SubstituteRequest, global::Sajari.Engine.Query.V1.SearchRequest> __Method_Substitute = new Method<global::Sajari.Engine.Query.V1.SubstituteRequest, global::Sajari.Engine.Query.V1.SearchRequest>(
        MethodType.Unary,
        __ServiceName,
        "Substitute",
        __Marshaller_SubstituteRequest,
        __Marshaller_SearchRequest);

    static readonly Method<global::Sajari.Engine.Query.V1.AnalyseRequest, global::Sajari.Engine.Query.V1.AnalyseResponse> __Method_Analyse = new Method<global::Sajari.Engine.Query.V1.AnalyseRequest, global::Sajari.Engine.Query.V1.AnalyseResponse>(
        MethodType.Unary,
        __ServiceName,
        "Analyse",
        __Marshaller_AnalyseRequest,
        __Marshaller_AnalyseResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Query</summary>
    public abstract class QueryBase
    {
      /// <summary>
      ///  Search runs a search query over all records in a collection.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Sajari.Engine.Query.V1.SearchResponse> Search(global::Sajari.Engine.Query.V1.SearchRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Evaluate runs a search query on a single record in a collection.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Sajari.Engine.Query.V1.SearchResponse> Evaluate(global::Sajari.Engine.Query.V1.EvaluateRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Substitute takes a search request and a record and substitutes the record values
      ///  in the request.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Sajari.Engine.Query.V1.SearchRequest> Substitute(global::Sajari.Engine.Query.V1.SubstituteRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Analyse takes an AnalyseRequest (comprised of a search query and a record identifier)
      ///  and computes the term overlap between the two.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Sajari.Engine.Query.V1.AnalyseResponse> Analyse(global::Sajari.Engine.Query.V1.AnalyseRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Query</summary>
    public class QueryClient : ClientBase<QueryClient>
    {
      /// <summary>Creates a new client for Query</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public QueryClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Query that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public QueryClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected QueryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected QueryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Search runs a search query over all records in a collection.
      /// </summary>
      public virtual global::Sajari.Engine.Query.V1.SearchResponse Search(global::Sajari.Engine.Query.V1.SearchRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Search(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Search runs a search query over all records in a collection.
      /// </summary>
      public virtual global::Sajari.Engine.Query.V1.SearchResponse Search(global::Sajari.Engine.Query.V1.SearchRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Search, null, options, request);
      }
      /// <summary>
      ///  Search runs a search query over all records in a collection.
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Engine.Query.V1.SearchResponse> SearchAsync(global::Sajari.Engine.Query.V1.SearchRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Search runs a search query over all records in a collection.
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Engine.Query.V1.SearchResponse> SearchAsync(global::Sajari.Engine.Query.V1.SearchRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Search, null, options, request);
      }
      /// <summary>
      ///  Evaluate runs a search query on a single record in a collection.
      /// </summary>
      public virtual global::Sajari.Engine.Query.V1.SearchResponse Evaluate(global::Sajari.Engine.Query.V1.EvaluateRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Evaluate(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Evaluate runs a search query on a single record in a collection.
      /// </summary>
      public virtual global::Sajari.Engine.Query.V1.SearchResponse Evaluate(global::Sajari.Engine.Query.V1.EvaluateRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Evaluate, null, options, request);
      }
      /// <summary>
      ///  Evaluate runs a search query on a single record in a collection.
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Engine.Query.V1.SearchResponse> EvaluateAsync(global::Sajari.Engine.Query.V1.EvaluateRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return EvaluateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Evaluate runs a search query on a single record in a collection.
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Engine.Query.V1.SearchResponse> EvaluateAsync(global::Sajari.Engine.Query.V1.EvaluateRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Evaluate, null, options, request);
      }
      /// <summary>
      ///  Substitute takes a search request and a record and substitutes the record values
      ///  in the request.
      /// </summary>
      public virtual global::Sajari.Engine.Query.V1.SearchRequest Substitute(global::Sajari.Engine.Query.V1.SubstituteRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Substitute(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Substitute takes a search request and a record and substitutes the record values
      ///  in the request.
      /// </summary>
      public virtual global::Sajari.Engine.Query.V1.SearchRequest Substitute(global::Sajari.Engine.Query.V1.SubstituteRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Substitute, null, options, request);
      }
      /// <summary>
      ///  Substitute takes a search request and a record and substitutes the record values
      ///  in the request.
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Engine.Query.V1.SearchRequest> SubstituteAsync(global::Sajari.Engine.Query.V1.SubstituteRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubstituteAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Substitute takes a search request and a record and substitutes the record values
      ///  in the request.
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Engine.Query.V1.SearchRequest> SubstituteAsync(global::Sajari.Engine.Query.V1.SubstituteRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Substitute, null, options, request);
      }
      /// <summary>
      ///  Analyse takes an AnalyseRequest (comprised of a search query and a record identifier)
      ///  and computes the term overlap between the two.
      /// </summary>
      public virtual global::Sajari.Engine.Query.V1.AnalyseResponse Analyse(global::Sajari.Engine.Query.V1.AnalyseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Analyse(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Analyse takes an AnalyseRequest (comprised of a search query and a record identifier)
      ///  and computes the term overlap between the two.
      /// </summary>
      public virtual global::Sajari.Engine.Query.V1.AnalyseResponse Analyse(global::Sajari.Engine.Query.V1.AnalyseRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Analyse, null, options, request);
      }
      /// <summary>
      ///  Analyse takes an AnalyseRequest (comprised of a search query and a record identifier)
      ///  and computes the term overlap between the two.
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Engine.Query.V1.AnalyseResponse> AnalyseAsync(global::Sajari.Engine.Query.V1.AnalyseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AnalyseAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Analyse takes an AnalyseRequest (comprised of a search query and a record identifier)
      ///  and computes the term overlap between the two.
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Engine.Query.V1.AnalyseResponse> AnalyseAsync(global::Sajari.Engine.Query.V1.AnalyseRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Analyse, null, options, request);
      }
      protected override QueryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(QueryBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Search, serviceImpl.Search)
          .AddMethod(__Method_Evaluate, serviceImpl.Evaluate)
          .AddMethod(__Method_Substitute, serviceImpl.Substitute)
          .AddMethod(__Method_Analyse, serviceImpl.Analyse).Build();
    }

  }
}
#endregion
