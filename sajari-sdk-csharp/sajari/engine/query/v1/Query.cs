// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sajari/engine/query/v1/query.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sajari.Engine.Query.V1 {

  /// <summary>Holder for reflection information generated from sajari/engine/query/v1/query.proto</summary>
  public static partial class QueryReflection {

    #region Descriptor
    /// <summary>File descriptor for sajari/engine/query/v1/query.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QueryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJzYWphcmkvZW5naW5lL3F1ZXJ5L3YxL3F1ZXJ5LnByb3RvEhZzYWphcmku",
            "ZW5naW5lLnF1ZXJ5LnYxGhlzYWphcmkvZW5naW5lL3ZhbHVlLnByb3RvGhdz",
            "YWphcmkvZW5naW5lL2tleS5wcm90bxoXc2FqYXJpL3JwYy9zdGF0dXMucHJv",
            "dG8iqggKDVNlYXJjaFJlcXVlc3QSLgoGZmlsdGVyGAEgASgLMh4uc2FqYXJp",
            "LmVuZ2luZS5xdWVyeS52MS5GaWx0ZXISRQoLaW5kZXhfcXVlcnkYAiABKAsy",
            "MC5zYWphcmkuZW5naW5lLnF1ZXJ5LnYxLlNlYXJjaFJlcXVlc3QuSW5kZXhR",
            "dWVyeRJJCg1mZWF0dXJlX3F1ZXJ5GAMgASgLMjIuc2FqYXJpLmVuZ2luZS5x",
            "dWVyeS52MS5TZWFyY2hSZXF1ZXN0LkZlYXR1cmVRdWVyeRIOCgZvZmZzZXQY",
            "BCABKAUSDQoFbGltaXQYBSABKAUSDgoGZmllbGRzGAYgAygJEioKBHNvcnQY",
            "ByADKAsyHC5zYWphcmkuZW5naW5lLnF1ZXJ5LnYxLlNvcnQSSQoKYWdncmVn",
            "YXRlcxgIIAMoCzI1LnNhamFyaS5lbmdpbmUucXVlcnkudjEuU2VhcmNoUmVx",
            "dWVzdC5BZ2dyZWdhdGVzRW50cnkSNQoKdHJhbnNmb3JtcxgJIAMoCzIhLnNh",
            "amFyaS5lbmdpbmUucXVlcnkudjEuVHJhbnNmb3JtGucCCgpJbmRleFF1ZXJ5",
            "EioKBGJvZHkYASADKAsyHC5zYWphcmkuZW5naW5lLnF1ZXJ5LnYxLkJvZHkS",
            "KwoFdGVybXMYAiADKAsyHC5zYWphcmkuZW5naW5lLnF1ZXJ5LnYxLlRlcm0S",
            "PgoPaW5zdGFuY2VfYm9vc3RzGAMgAygLMiUuc2FqYXJpLmVuZ2luZS5xdWVy",
            "eS52MS5JbnN0YW5jZUJvb3N0El8KE2luc3RhbmNlX3Njb3JlX21vZGUYBSAB",
            "KA4yQi5zYWphcmkuZW5naW5lLnF1ZXJ5LnYxLlNlYXJjaFJlcXVlc3QuSW5k",
            "ZXhRdWVyeS5JbnN0YW5jZVNjb3JlTW9kZRI4CgxmaWVsZF9ib29zdHMYBCAD",
            "KAsyIi5zYWphcmkuZW5naW5lLnF1ZXJ5LnYxLkZpZWxkQm9vc3QiJQoRSW5z",
            "dGFuY2VTY29yZU1vZGUSBwoDQUJTEAASBwoDTUFYEAEauQEKDEZlYXR1cmVR",
            "dWVyeRJTCgxmaWVsZF9ib29zdHMYASADKAsyPS5zYWphcmkuZW5naW5lLnF1",
            "ZXJ5LnYxLlNlYXJjaFJlcXVlc3QuRmVhdHVyZVF1ZXJ5LkZpZWxkQm9vc3Qa",
            "VAoKRmllbGRCb29zdBI3CgtmaWVsZF9ib29zdBgBIAEoCzIiLnNhamFyaS5l",
            "bmdpbmUucXVlcnkudjEuRmllbGRCb29zdBINCgV2YWx1ZRgCIAEoARpUCg9B",
            "Z2dyZWdhdGVzRW50cnkSCwoDa2V5GAEgASgJEjAKBXZhbHVlGAIgASgLMiEu",
            "c2FqYXJpLmVuZ2luZS5xdWVyeS52MS5BZ2dyZWdhdGU6AjgBIh8KCVRyYW5z",
            "Zm9ybRISCgppZGVudGlmaWVyGAEgASgJIngKBFRlcm0SDQoFdmFsdWUYASAB",
            "KAkSDQoFZmllbGQYAiABKAkSCwoDcG9zGAMgASgNEgsKA25lZxgEIAEoDRIO",
            "CgZ3ZWlnaHQYBSABKAESEwoLd29yZF9vZmZzZXQYBiABKA0SEwoLcGFyYV9v",
            "ZmZzZXQYByABKA0i2gEKD0V2YWx1YXRlUmVxdWVzdBI9Cg5zZWFyY2hfcmVx",
            "dWVzdBgBIAEoCzIlLnNhamFyaS5lbmdpbmUucXVlcnkudjEuU2VhcmNoUmVx",
            "dWVzdBJDCgZyZWNvcmQYAiADKAsyMy5zYWphcmkuZW5naW5lLnF1ZXJ5LnYx",
            "LkV2YWx1YXRlUmVxdWVzdC5SZWNvcmRFbnRyeRpDCgtSZWNvcmRFbnRyeRIL",
            "CgNrZXkYASABKAkSIwoFdmFsdWUYAiABKAsyFC5zYWphcmkuZW5naW5lLlZh",
            "bHVlOgI4ASLeAQoRU3Vic3RpdHV0ZVJlcXVlc3QSPQoOc2VhcmNoX3JlcXVl",
            "c3QYASABKAsyJS5zYWphcmkuZW5naW5lLnF1ZXJ5LnYxLlNlYXJjaFJlcXVl",
            "c3QSRQoGcmVjb3JkGAIgAygLMjUuc2FqYXJpLmVuZ2luZS5xdWVyeS52MS5T",
            "dWJzdGl0dXRlUmVxdWVzdC5SZWNvcmRFbnRyeRpDCgtSZWNvcmRFbnRyeRIL",
            "CgNrZXkYASABKAkSIwoFdmFsdWUYAiABKAsyFC5zYWphcmkuZW5naW5lLlZh",
            "bHVlOgI4ASIkCgRCb2R5EgwKBHRleHQYASABKAkSDgoGd2VpZ2h0GAIgASgB",
            "IosGCglBZ2dyZWdhdGUSOgoGbWV0cmljGAEgASgLMiguc2FqYXJpLmVuZ2lu",
            "ZS5xdWVyeS52MS5BZ2dyZWdhdGUuTWV0cmljSAASOAoFY291bnQYAiABKAsy",
            "Jy5zYWphcmkuZW5naW5lLnF1ZXJ5LnYxLkFnZ3JlZ2F0ZS5Db3VudEgAEjoK",
            "BmJ1Y2tldBgDIAEoCzIoLnNhamFyaS5lbmdpbmUucXVlcnkudjEuQWdncmVn",
            "YXRlLkJ1Y2tldEgAEj4KCGFuYWx5c2lzGAQgASgLMiouc2FqYXJpLmVuZ2lu",
            "ZS5xdWVyeS52MS5BZ2dyZWdhdGUuQW5hbHlzaXNIABqAAQoGTWV0cmljEg0K",
            "BWZpZWxkGAEgASgJEjsKBHR5cGUYAiABKA4yLS5zYWphcmkuZW5naW5lLnF1",
            "ZXJ5LnYxLkFnZ3JlZ2F0ZS5NZXRyaWMuVHlwZSIqCgRUeXBlEgcKA0FWRxAA",
            "EgcKA01JThABEgcKA01BWBACEgcKA1NVTRADGhYKBUNvdW50Eg0KBWZpZWxk",
            "GAEgASgJGpIBCgZCdWNrZXQSQAoHYnVja2V0cxgBIAMoCzIvLnNhamFyaS5l",
            "bmdpbmUucXVlcnkudjEuQWdncmVnYXRlLkJ1Y2tldC5CdWNrZXQaRgoGQnVj",
            "a2V0EgwKBG5hbWUYASABKAkSLgoGZmlsdGVyGAIgASgLMh4uc2FqYXJpLmVu",
            "Z2luZS5xdWVyeS52MS5GaWx0ZXIazgEKCEFuYWx5c2lzEg0KBWZpZWxkGAEg",
            "ASgJEj0KBHR5cGUYAiABKA4yLy5zYWphcmkuZW5naW5lLnF1ZXJ5LnYxLkFn",
            "Z3JlZ2F0ZS5BbmFseXNpcy5UeXBlInQKBFR5cGUSDAoIQ09WRVJBR0UQABIK",
            "CgZVTklRVUUQARILCgdBVkdfTEVOEAISCwoHTUlOX0xFThADEgsKB01BWF9M",
            "RU4QBBINCglBVkdfQ09VTlQQBRINCglNSU5fQ09VTlQQBhINCglNQVhfQ09V",
            "TlQQB0ILCglhZ2dyZWdhdGUirwEKBFNvcnQSDwoFc2NvcmUYASABKAhIABIV",
            "CgtxdWVyeV9zY29yZRgCIAEoCEgAEhcKDWZlYXR1cmVfc2NvcmUYAyABKAhI",
            "ABIPCgVmaWVsZBgEIAEoCUgAEjEKBW9yZGVyGAUgASgOMiIuc2FqYXJpLmVu",
            "Z2luZS5xdWVyeS52MS5Tb3J0Lk9yZGVyIhoKBU9yZGVyEgcKA0FTQxAAEggK",
            "BERFU0MQAUIGCgR0eXBlIvQGCgZGaWx0ZXISPwoKY29tYmluYXRvchgBIAEo",
            "CzIpLnNhamFyaS5lbmdpbmUucXVlcnkudjEuRmlsdGVyLkNvbWJpbmF0b3JI",
            "ABI1CgVmaWVsZBgCIAEoCzIkLnNhamFyaS5lbmdpbmUucXVlcnkudjEuRmls",
            "dGVyLkZpZWxkSAASMQoDZ2VvGAMgASgLMiIuc2FqYXJpLmVuZ2luZS5xdWVy",
            "eS52MS5GaWx0ZXIuR2VvSAAaxwIKBUZpZWxkEj8KCG9wZXJhdG9yGAEgASgO",
            "Mi0uc2FqYXJpLmVuZ2luZS5xdWVyeS52MS5GaWx0ZXIuRmllbGQuT3BlcmF0",
            "b3ISDQoFZmllbGQYAiABKAkSIwoFdmFsdWUYAyABKAsyFC5zYWphcmkuZW5n",
            "aW5lLlZhbHVlIsgBCghPcGVyYXRvchIMCghFUVVBTF9UTxAAEhAKDE5PVF9F",
            "UVVBTF9UTxABEhAKDEdSRUFURVJfVEhBThACEhwKGEdSRUFURVJfVEhBTl9P",
            "Ul9FUVVBTF9UTxADEg0KCUxFU1NfVEhBThAEEhkKFUxFU1NfVEhBTl9PUl9F",
            "UVVBTF9UTxAFEgwKCENPTlRBSU5TEAYSFAoQRE9FU19OT1RfQ09OVEFJThAH",
            "Eg4KCkhBU19TVUZGSVgQCBIOCgpIQVNfUFJFRklYEAkaswEKA0dlbxIRCglm",
            "aWVsZF9sYXQYASABKAkSEQoJZmllbGRfbG5nGAIgASgJEgsKA2xhdBgDIAEo",
            "ARILCgNsbmcYBCABKAESDgoGcmFkaXVzGAUgASgBEjkKBnJlZ2lvbhgGIAEo",
            "DjIpLnNhamFyaS5lbmdpbmUucXVlcnkudjEuRmlsdGVyLkdlby5SZWdpb24i",
            "IQoGUmVnaW9uEgoKBklOU0lERRAAEgsKB09VVFNJREUQARq0AQoKQ29tYmlu",
            "YXRvchJECghvcGVyYXRvchgBIAEoDjIyLnNhamFyaS5lbmdpbmUucXVlcnku",
            "djEuRmlsdGVyLkNvbWJpbmF0b3IuT3BlcmF0b3ISLwoHZmlsdGVycxgCIAMo",
            "CzIeLnNhamFyaS5lbmdpbmUucXVlcnkudjEuRmlsdGVyIi8KCE9wZXJhdG9y",
            "EgcKA0FMTBAAEgcKA0FOWRABEgcKA09ORRACEggKBE5PTkUQA0IICgZmaWx0",
            "ZXIirQQKCkZpZWxkQm9vc3QSOwoGZmlsdGVyGAEgASgLMikuc2FqYXJpLmVu",
            "Z2luZS5xdWVyeS52MS5GaWVsZEJvb3N0LkZpbHRlckgAEj8KCGludGVydmFs",
            "GAIgASgLMisuc2FqYXJpLmVuZ2luZS5xdWVyeS52MS5GaWVsZEJvb3N0Lklu",
            "dGVydmFsSAASPQoHZWxlbWVudBgDIAEoCzIqLnNhamFyaS5lbmdpbmUucXVl",
            "cnkudjEuRmllbGRCb29zdC5FbGVtZW50SAASNwoEdGV4dBgEIAEoCzInLnNh",
            "amFyaS5lbmdpbmUucXVlcnkudjEuRmllbGRCb29zdC5UZXh0SAAaRwoGRmls",
            "dGVyEi4KBmZpbHRlchgBIAEoCzIeLnNhamFyaS5lbmdpbmUucXVlcnkudjEu",
            "RmlsdGVyEg0KBXZhbHVlGAIgASgBGoMBCghJbnRlcnZhbBINCgVmaWVsZBgB",
            "IAEoCRJBCgZwb2ludHMYAiADKAsyMS5zYWphcmkuZW5naW5lLnF1ZXJ5LnYx",
            "LkZpZWxkQm9vc3QuSW50ZXJ2YWwuUG9pbnQaJQoFUG9pbnQSDQoFcG9pbnQY",
            "ASABKAESDQoFdmFsdWUYAiABKAEaJgoHRWxlbWVudBINCgVmaWVsZBgBIAEo",
            "CRIMCgRlbHRzGAMgAygJGiMKBFRleHQSDQoFZmllbGQYASABKAkSDAoEdGV4",
            "dBgDIAEoCUINCgtmaWVsZF9ib29zdCLzAQoNSW5zdGFuY2VCb29zdBI8CgVm",
            "aWVsZBgBIAEoCzIrLnNhamFyaS5lbmdpbmUucXVlcnkudjEuSW5zdGFuY2VC",
            "b29zdC5GaWVsZEgAEjwKBXNjb3JlGAIgASgLMisuc2FqYXJpLmVuZ2luZS5x",
            "dWVyeS52MS5JbnN0YW5jZUJvb3N0LlNjb3JlSAAaJQoFRmllbGQSDQoFZmll",
            "bGQYASABKAkSDQoFdmFsdWUYAiABKAEaLQoFU2NvcmUSEQoJdGhyZXNob2xk",
            "GAEgASgBEhEKCW1pbl9jb3VudBgCIAEoDUIQCg5pbnN0YW5jZV9ib29zdCK0",
            "BQoRQWdncmVnYXRlUmVzcG9uc2USQgoGbWV0cmljGAEgASgLMjAuc2FqYXJp",
            "LmVuZ2luZS5xdWVyeS52MS5BZ2dyZWdhdGVSZXNwb25zZS5NZXRyaWNIABJA",
            "CgVjb3VudBgCIAEoCzIvLnNhamFyaS5lbmdpbmUucXVlcnkudjEuQWdncmVn",
            "YXRlUmVzcG9uc2UuQ291bnRIABJECgdidWNrZXRzGAMgASgLMjEuc2FqYXJp",
            "LmVuZ2luZS5xdWVyeS52MS5BZ2dyZWdhdGVSZXNwb25zZS5CdWNrZXRzSAAa",
            "FwoGTWV0cmljEg0KBXZhbHVlGAEgASgBGoMBCgVDb3VudBJLCgZjb3VudHMY",
            "ASADKAsyOy5zYWphcmkuZW5naW5lLnF1ZXJ5LnYxLkFnZ3JlZ2F0ZVJlc3Bv",
            "bnNlLkNvdW50LkNvdW50c0VudHJ5Gi0KC0NvdW50c0VudHJ5EgsKA2tleRgB",
            "IAEoCRINCgV2YWx1ZRgCIAEoBToCOAEa6wEKB0J1Y2tldHMSTwoHYnVja2V0",
            "cxgBIAMoCzI+LnNhamFyaS5lbmdpbmUucXVlcnkudjEuQWdncmVnYXRlUmVz",
            "cG9uc2UuQnVja2V0cy5CdWNrZXRzRW50cnkaJQoGQnVja2V0EgwKBG5hbWUY",
            "ASABKAkSDQoFY291bnQYAiABKAUaaAoMQnVja2V0c0VudHJ5EgsKA2tleRgB",
            "IAEoCRJHCgV2YWx1ZRgCIAEoCzI4LnNhamFyaS5lbmdpbmUucXVlcnkudjEu",
            "QWdncmVnYXRlUmVzcG9uc2UuQnVja2V0cy5CdWNrZXQ6AjgBGjAKCEFuYWx5",
            "c2lzEhIKCmZsb2F0VmFsdWUYASABKAESEAoIaW50VmFsdWUYAiABKANCFAoS",
            "YWdncmVnYXRlX3Jlc3BvbnNlIp8CCg5TZWFyY2hSZXNwb25zZRINCgVyZWFk",
            "cxgBIAEoAxIVCg10b3RhbF9yZXN1bHRzGAIgASgDEgwKBHRpbWUYAyABKAkS",
            "SgoKYWdncmVnYXRlcxgEIAMoCzI2LnNhamFyaS5lbmdpbmUucXVlcnkudjEu",
            "U2VhcmNoUmVzcG9uc2UuQWdncmVnYXRlc0VudHJ5Ei8KB3Jlc3VsdHMYBSAD",
            "KAsyHi5zYWphcmkuZW5naW5lLnF1ZXJ5LnYxLlJlc3VsdBpcCg9BZ2dyZWdh",
            "dGVzRW50cnkSCwoDa2V5GAEgASgJEjgKBXZhbHVlGAIgASgLMikuc2FqYXJp",
            "LmVuZ2luZS5xdWVyeS52MS5BZ2dyZWdhdGVSZXNwb25zZToCOAEirQEKBlJl",
            "c3VsdBI6CgZ2YWx1ZXMYASADKAsyKi5zYWphcmkuZW5naW5lLnF1ZXJ5LnYx",
            "LlJlc3VsdC5WYWx1ZXNFbnRyeRINCgVzY29yZRgCIAEoARITCgtpbmRleF9z",
            "Y29yZRgDIAEoARpDCgtWYWx1ZXNFbnRyeRILCgNrZXkYASABKAkSIwoFdmFs",
            "dWUYAiABKAsyFC5zYWphcmkuZW5naW5lLlZhbHVlOgI4ASJxCg5BbmFseXNl",
            "UmVxdWVzdBI9Cg5zZWFyY2hfcmVxdWVzdBgBIAEoCzIlLnNhamFyaS5lbmdp",
            "bmUucXVlcnkudjEuU2VhcmNoUmVxdWVzdBIgCgRrZXlzGAIgAygLMhIuc2Fq",
            "YXJpLmVuZ2luZS5LZXkiiwEKD0FuYWx5c2VSZXNwb25zZRI8CgV0ZXJtcxgB",
            "IAMoCzItLnNhamFyaS5lbmdpbmUucXVlcnkudjEuQW5hbHlzZVJlc3BvbnNl",
            "LlRlcm1zEiIKBnN0YXR1cxgCIAMoCzISLnNhamFyaS5ycGMuU3RhdHVzGhYK",
            "BVRlcm1zEg0KBXRlcm1zGAEgAygJMvkCCgVRdWVyeRJXCgZTZWFyY2gSJS5z",
            "YWphcmkuZW5naW5lLnF1ZXJ5LnYxLlNlYXJjaFJlcXVlc3QaJi5zYWphcmku",
            "ZW5naW5lLnF1ZXJ5LnYxLlNlYXJjaFJlc3BvbnNlElsKCEV2YWx1YXRlEicu",
            "c2FqYXJpLmVuZ2luZS5xdWVyeS52MS5FdmFsdWF0ZVJlcXVlc3QaJi5zYWph",
            "cmkuZW5naW5lLnF1ZXJ5LnYxLlNlYXJjaFJlc3BvbnNlEl4KClN1YnN0aXR1",
            "dGUSKS5zYWphcmkuZW5naW5lLnF1ZXJ5LnYxLlN1YnN0aXR1dGVSZXF1ZXN0",
            "GiUuc2FqYXJpLmVuZ2luZS5xdWVyeS52MS5TZWFyY2hSZXF1ZXN0EloKB0Fu",
            "YWx5c2USJi5zYWphcmkuZW5naW5lLnF1ZXJ5LnYxLkFuYWx5c2VSZXF1ZXN0",
            "Gicuc2FqYXJpLmVuZ2luZS5xdWVyeS52MS5BbmFseXNlUmVzcG9uc2ViBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Sajari.Engine.ValueReflection.Descriptor, global::Sajari.Engine.KeyReflection.Descriptor, global::Sajari.Rpc.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.SearchRequest), global::Sajari.Engine.Query.V1.SearchRequest.Parser, new[]{ "Filter", "IndexQuery", "FeatureQuery", "Offset", "Limit", "Fields", "Sort", "Aggregates", "Transforms" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.SearchRequest.Types.IndexQuery), global::Sajari.Engine.Query.V1.SearchRequest.Types.IndexQuery.Parser, new[]{ "Body", "Terms", "InstanceBoosts", "InstanceScoreMode", "FieldBoosts" }, null, new[]{ typeof(global::Sajari.Engine.Query.V1.SearchRequest.Types.IndexQuery.Types.InstanceScoreMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery), global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery.Parser, new[]{ "FieldBoosts" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery.Types.FieldBoost), global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery.Types.FieldBoost.Parser, new[]{ "FieldBoost_", "Value" }, null, null, null)}),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Transform), global::Sajari.Engine.Query.V1.Transform.Parser, new[]{ "Identifier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Term), global::Sajari.Engine.Query.V1.Term.Parser, new[]{ "Value", "Field", "Pos", "Neg", "Weight", "WordOffset", "ParaOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.EvaluateRequest), global::Sajari.Engine.Query.V1.EvaluateRequest.Parser, new[]{ "SearchRequest", "Record" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.SubstituteRequest), global::Sajari.Engine.Query.V1.SubstituteRequest.Parser, new[]{ "SearchRequest", "Record" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Body), global::Sajari.Engine.Query.V1.Body.Parser, new[]{ "Text", "Weight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Aggregate), global::Sajari.Engine.Query.V1.Aggregate.Parser, new[]{ "Metric", "Count", "Bucket", "Analysis" }, new[]{ "Aggregate" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Aggregate.Types.Metric), global::Sajari.Engine.Query.V1.Aggregate.Types.Metric.Parser, new[]{ "Field", "Type" }, null, new[]{ typeof(global::Sajari.Engine.Query.V1.Aggregate.Types.Metric.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Aggregate.Types.Count), global::Sajari.Engine.Query.V1.Aggregate.Types.Count.Parser, new[]{ "Field" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket), global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket.Parser, new[]{ "Buckets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket.Types.Bucket), global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket.Types.Bucket.Parser, new[]{ "Name", "Filter" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Aggregate.Types.Analysis), global::Sajari.Engine.Query.V1.Aggregate.Types.Analysis.Parser, new[]{ "Field", "Type" }, null, new[]{ typeof(global::Sajari.Engine.Query.V1.Aggregate.Types.Analysis.Types.Type) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Sort), global::Sajari.Engine.Query.V1.Sort.Parser, new[]{ "Score", "QueryScore", "FeatureScore", "Field", "Order" }, new[]{ "Type" }, new[]{ typeof(global::Sajari.Engine.Query.V1.Sort.Types.Order) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Filter), global::Sajari.Engine.Query.V1.Filter.Parser, new[]{ "Combinator", "Field", "Geo" }, new[]{ "Filter" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Filter.Types.Field), global::Sajari.Engine.Query.V1.Filter.Types.Field.Parser, new[]{ "Operator", "Field_", "Value" }, null, new[]{ typeof(global::Sajari.Engine.Query.V1.Filter.Types.Field.Types.Operator) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Filter.Types.Geo), global::Sajari.Engine.Query.V1.Filter.Types.Geo.Parser, new[]{ "FieldLat", "FieldLng", "Lat", "Lng", "Radius", "Region" }, null, new[]{ typeof(global::Sajari.Engine.Query.V1.Filter.Types.Geo.Types.Region) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Filter.Types.Combinator), global::Sajari.Engine.Query.V1.Filter.Types.Combinator.Parser, new[]{ "Operator", "Filters" }, null, new[]{ typeof(global::Sajari.Engine.Query.V1.Filter.Types.Combinator.Types.Operator) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.FieldBoost), global::Sajari.Engine.Query.V1.FieldBoost.Parser, new[]{ "Filter", "Interval", "Element", "Text" }, new[]{ "FieldBoost" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.FieldBoost.Types.Filter), global::Sajari.Engine.Query.V1.FieldBoost.Types.Filter.Parser, new[]{ "Filter_", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval), global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval.Parser, new[]{ "Field", "Points" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval.Types.Point), global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval.Types.Point.Parser, new[]{ "Point_", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.FieldBoost.Types.Element), global::Sajari.Engine.Query.V1.FieldBoost.Types.Element.Parser, new[]{ "Field", "Elts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.FieldBoost.Types.Text), global::Sajari.Engine.Query.V1.FieldBoost.Types.Text.Parser, new[]{ "Field", "Text_" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.InstanceBoost), global::Sajari.Engine.Query.V1.InstanceBoost.Parser, new[]{ "Field", "Score" }, new[]{ "InstanceBoost" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.InstanceBoost.Types.Field), global::Sajari.Engine.Query.V1.InstanceBoost.Types.Field.Parser, new[]{ "Field_", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.InstanceBoost.Types.Score), global::Sajari.Engine.Query.V1.InstanceBoost.Types.Score.Parser, new[]{ "Threshold", "MinCount" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.AggregateResponse), global::Sajari.Engine.Query.V1.AggregateResponse.Parser, new[]{ "Metric", "Count", "Buckets" }, new[]{ "AggregateResponse" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.AggregateResponse.Types.Metric), global::Sajari.Engine.Query.V1.AggregateResponse.Types.Metric.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.AggregateResponse.Types.Count), global::Sajari.Engine.Query.V1.AggregateResponse.Types.Count.Parser, new[]{ "Counts" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets), global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets.Parser, new[]{ "Buckets_" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets.Types.Bucket), global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets.Types.Bucket.Parser, new[]{ "Name", "Count" }, null, null, null),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.AggregateResponse.Types.Analysis), global::Sajari.Engine.Query.V1.AggregateResponse.Types.Analysis.Parser, new[]{ "FloatValue", "IntValue" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.SearchResponse), global::Sajari.Engine.Query.V1.SearchResponse.Parser, new[]{ "Reads", "TotalResults", "Time", "Aggregates", "Results" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.Result), global::Sajari.Engine.Query.V1.Result.Parser, new[]{ "Values", "Score", "IndexScore" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.AnalyseRequest), global::Sajari.Engine.Query.V1.AnalyseRequest.Parser, new[]{ "SearchRequest", "Keys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.AnalyseResponse), global::Sajari.Engine.Query.V1.AnalyseResponse.Parser, new[]{ "Terms", "Status" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Engine.Query.V1.AnalyseResponse.Types.Terms), global::Sajari.Engine.Query.V1.AnalyseResponse.Types.Terms.Parser, new[]{ "Terms_" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// SearchRequest contains all the parameters to query a collection.
  ///
  /// Records in the collection can be queried/scored using a combination of:
  /// 1. Field values (key-value pairs set by the user).  See Filter, FieldBoost, Sort.
  /// 2. Terms (extracted from the body of the record, or from string-based indexed fields,
  ///    i.e. full-text style searching).  See Body, Terms, InstanceBoost.
  ///
  /// Quering a collection follows three main steps:
  /// 1. Select suitable records to include in a result set.
  /// 2. Rank and sort the records based on scoring and/or sorting rules.
  /// 3. Compute and aggregate statistical information from the result set.
  /// </summary>
  public sealed partial class SearchRequest : pb::IMessage<SearchRequest> {
    private static readonly pb::MessageParser<SearchRequest> _parser = new pb::MessageParser<SearchRequest>(() => new SearchRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRequest(SearchRequest other) : this() {
      Filter = other.filter_ != null ? other.Filter.Clone() : null;
      IndexQuery = other.indexQuery_ != null ? other.IndexQuery.Clone() : null;
      FeatureQuery = other.featureQuery_ != null ? other.FeatureQuery.Clone() : null;
      offset_ = other.offset_;
      limit_ = other.limit_;
      fields_ = other.fields_.Clone();
      sort_ = other.sort_.Clone();
      aggregates_ = other.aggregates_.Clone();
      transforms_ = other.transforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRequest Clone() {
      return new SearchRequest(this);
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 1;
    private global::Sajari.Engine.Query.V1.Filter filter_;
    /// <summary>
    /// Filter is a rule checked against record field values.
    ///
    /// Only records that match the filter will be included in the result.
    /// By default all records are included.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.Filter Filter {
      get { return filter_; }
      set {
        filter_ = value;
      }
    }

    /// <summary>Field number for the "index_query" field.</summary>
    public const int IndexQueryFieldNumber = 2;
    private global::Sajari.Engine.Query.V1.SearchRequest.Types.IndexQuery indexQuery_;
    /// <summary>
    /// IndexQuery is the matching configuration for index-based matching.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.SearchRequest.Types.IndexQuery IndexQuery {
      get { return indexQuery_; }
      set {
        indexQuery_ = value;
      }
    }

    /// <summary>Field number for the "feature_query" field.</summary>
    public const int FeatureQueryFieldNumber = 3;
    private global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery featureQuery_;
    /// <summary>
    /// Feature query is the matching configuration for feature-based matching.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery FeatureQuery {
      get { return featureQuery_; }
      set {
        featureQuery_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private int offset_;
    /// <summary>
    /// Offset is the offset to return results from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 5;
    private int limit_;
    /// <summary>
    /// Limit is the number of results to return.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_fields_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> fields_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Fields to be returned for each record in the results.
    /// By default all fields are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Fields {
      get { return fields_; }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Query.V1.Sort> _repeated_sort_codec
        = pb::FieldCodec.ForMessage(58, global::Sajari.Engine.Query.V1.Sort.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Query.V1.Sort> sort_ = new pbc::RepeatedField<global::Sajari.Engine.Query.V1.Sort>();
    /// <summary>
    /// Sort ordering applied to results.
    /// Multiple sorts can be applied sequentially.
    /// By default all results are ordered by score.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Query.V1.Sort> Sort {
      get { return sort_; }
    }

    /// <summary>Field number for the "aggregates" field.</summary>
    public const int AggregatesFieldNumber = 8;
    private static readonly pbc::MapField<string, global::Sajari.Engine.Query.V1.Aggregate>.Codec _map_aggregates_codec
        = new pbc::MapField<string, global::Sajari.Engine.Query.V1.Aggregate>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Query.V1.Aggregate.Parser), 66);
    private readonly pbc::MapField<string, global::Sajari.Engine.Query.V1.Aggregate> aggregates_ = new pbc::MapField<string, global::Sajari.Engine.Query.V1.Aggregate>();
    /// <summary>
    /// A set of Aggregates to be run on the result set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Sajari.Engine.Query.V1.Aggregate> Aggregates {
      get { return aggregates_; }
    }

    /// <summary>Field number for the "transforms" field.</summary>
    public const int TransformsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Query.V1.Transform> _repeated_transforms_codec
        = pb::FieldCodec.ForMessage(74, global::Sajari.Engine.Query.V1.Transform.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Query.V1.Transform> transforms_ = new pbc::RepeatedField<global::Sajari.Engine.Query.V1.Transform>();
    /// <summary>
    /// Transforms to be applied to the request before it is run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Query.V1.Transform> Transforms {
      get { return transforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Filter, other.Filter)) return false;
      if (!object.Equals(IndexQuery, other.IndexQuery)) return false;
      if (!object.Equals(FeatureQuery, other.FeatureQuery)) return false;
      if (Offset != other.Offset) return false;
      if (Limit != other.Limit) return false;
      if(!fields_.Equals(other.fields_)) return false;
      if(!sort_.Equals(other.sort_)) return false;
      if (!Aggregates.Equals(other.Aggregates)) return false;
      if(!transforms_.Equals(other.transforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (filter_ != null) hash ^= Filter.GetHashCode();
      if (indexQuery_ != null) hash ^= IndexQuery.GetHashCode();
      if (featureQuery_ != null) hash ^= FeatureQuery.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      hash ^= fields_.GetHashCode();
      hash ^= sort_.GetHashCode();
      hash ^= Aggregates.GetHashCode();
      hash ^= transforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (filter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Filter);
      }
      if (indexQuery_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IndexQuery);
      }
      if (featureQuery_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FeatureQuery);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Offset);
      }
      if (Limit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Limit);
      }
      fields_.WriteTo(output, _repeated_fields_codec);
      sort_.WriteTo(output, _repeated_sort_codec);
      aggregates_.WriteTo(output, _map_aggregates_codec);
      transforms_.WriteTo(output, _repeated_transforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (filter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
      }
      if (indexQuery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IndexQuery);
      }
      if (featureQuery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeatureQuery);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      size += fields_.CalculateSize(_repeated_fields_codec);
      size += sort_.CalculateSize(_repeated_sort_codec);
      size += aggregates_.CalculateSize(_map_aggregates_codec);
      size += transforms_.CalculateSize(_repeated_transforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.filter_ != null) {
        if (filter_ == null) {
          filter_ = new global::Sajari.Engine.Query.V1.Filter();
        }
        Filter.MergeFrom(other.Filter);
      }
      if (other.indexQuery_ != null) {
        if (indexQuery_ == null) {
          indexQuery_ = new global::Sajari.Engine.Query.V1.SearchRequest.Types.IndexQuery();
        }
        IndexQuery.MergeFrom(other.IndexQuery);
      }
      if (other.featureQuery_ != null) {
        if (featureQuery_ == null) {
          featureQuery_ = new global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery();
        }
        FeatureQuery.MergeFrom(other.FeatureQuery);
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      fields_.Add(other.fields_);
      sort_.Add(other.sort_);
      aggregates_.Add(other.aggregates_);
      transforms_.Add(other.transforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (filter_ == null) {
              filter_ = new global::Sajari.Engine.Query.V1.Filter();
            }
            input.ReadMessage(filter_);
            break;
          }
          case 18: {
            if (indexQuery_ == null) {
              indexQuery_ = new global::Sajari.Engine.Query.V1.SearchRequest.Types.IndexQuery();
            }
            input.ReadMessage(indexQuery_);
            break;
          }
          case 26: {
            if (featureQuery_ == null) {
              featureQuery_ = new global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery();
            }
            input.ReadMessage(featureQuery_);
            break;
          }
          case 32: {
            Offset = input.ReadInt32();
            break;
          }
          case 40: {
            Limit = input.ReadInt32();
            break;
          }
          case 50: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
          case 58: {
            sort_.AddEntriesFrom(input, _repeated_sort_codec);
            break;
          }
          case 66: {
            aggregates_.AddEntriesFrom(input, _map_aggregates_codec);
            break;
          }
          case 74: {
            transforms_.AddEntriesFrom(input, _repeated_transforms_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SearchRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// IndexQuery defines criteria for matching and scoring records based on full-text style
      /// term matching and record field values.
      ///
      /// All boost applied here are multiplicative.
      /// </summary>
      public sealed partial class IndexQuery : pb::IMessage<IndexQuery> {
        private static readonly pb::MessageParser<IndexQuery> _parser = new pb::MessageParser<IndexQuery>(() => new IndexQuery());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IndexQuery> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.SearchRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IndexQuery() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IndexQuery(IndexQuery other) : this() {
          body_ = other.body_.Clone();
          terms_ = other.terms_.Clone();
          instanceBoosts_ = other.instanceBoosts_.Clone();
          instanceScoreMode_ = other.instanceScoreMode_;
          fieldBoosts_ = other.fieldBoosts_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IndexQuery Clone() {
          return new IndexQuery(this);
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Sajari.Engine.Query.V1.Body> _repeated_body_codec
            = pb::FieldCodec.ForMessage(10, global::Sajari.Engine.Query.V1.Body.Parser);
        private readonly pbc::RepeatedField<global::Sajari.Engine.Query.V1.Body> body_ = new pbc::RepeatedField<global::Sajari.Engine.Query.V1.Body>();
        /// <summary>
        /// Body is a list of weighted free text.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Sajari.Engine.Query.V1.Body> Body {
          get { return body_; }
        }

        /// <summary>Field number for the "terms" field.</summary>
        public const int TermsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Sajari.Engine.Query.V1.Term> _repeated_terms_codec
            = pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Query.V1.Term.Parser);
        private readonly pbc::RepeatedField<global::Sajari.Engine.Query.V1.Term> terms_ = new pbc::RepeatedField<global::Sajari.Engine.Query.V1.Term>();
        /// <summary>
        /// Terms is a list of weighted terms, where terms represent tokenised sequences of text.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Sajari.Engine.Query.V1.Term> Terms {
          get { return terms_; }
        }

        /// <summary>Field number for the "instance_boosts" field.</summary>
        public const int InstanceBoostsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Sajari.Engine.Query.V1.InstanceBoost> _repeated_instanceBoosts_codec
            = pb::FieldCodec.ForMessage(26, global::Sajari.Engine.Query.V1.InstanceBoost.Parser);
        private readonly pbc::RepeatedField<global::Sajari.Engine.Query.V1.InstanceBoost> instanceBoosts_ = new pbc::RepeatedField<global::Sajari.Engine.Query.V1.InstanceBoost>();
        /// <summary>
        /// InstanceBoosts are boost rules computed against a record's term instances.
        ///
        /// Instance boosting allows callers to boost records which have terms that match
        /// a rule.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Sajari.Engine.Query.V1.InstanceBoost> InstanceBoosts {
          get { return instanceBoosts_; }
        }

        /// <summary>Field number for the "instance_score_mode" field.</summary>
        public const int InstanceScoreModeFieldNumber = 5;
        private global::Sajari.Engine.Query.V1.SearchRequest.Types.IndexQuery.Types.InstanceScoreMode instanceScoreMode_ = 0;
        /// <summary>
        /// Score mode used for computing.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Sajari.Engine.Query.V1.SearchRequest.Types.IndexQuery.Types.InstanceScoreMode InstanceScoreMode {
          get { return instanceScoreMode_; }
          set {
            instanceScoreMode_ = value;
          }
        }

        /// <summary>Field number for the "field_boosts" field.</summary>
        public const int FieldBoostsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Sajari.Engine.Query.V1.FieldBoost> _repeated_fieldBoosts_codec
            = pb::FieldCodec.ForMessage(34, global::Sajari.Engine.Query.V1.FieldBoost.Parser);
        private readonly pbc::RepeatedField<global::Sajari.Engine.Query.V1.FieldBoost> fieldBoosts_ = new pbc::RepeatedField<global::Sajari.Engine.Query.V1.FieldBoost>();
        /// <summary>
        /// FieldBoosts are rules checked against a record's field values.
        ///
        /// Field boosting allows callers to boost records which have field values that
        /// match a rule.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Sajari.Engine.Query.V1.FieldBoost> FieldBoosts {
          get { return fieldBoosts_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as IndexQuery);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IndexQuery other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!body_.Equals(other.body_)) return false;
          if(!terms_.Equals(other.terms_)) return false;
          if(!instanceBoosts_.Equals(other.instanceBoosts_)) return false;
          if (InstanceScoreMode != other.InstanceScoreMode) return false;
          if(!fieldBoosts_.Equals(other.fieldBoosts_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= body_.GetHashCode();
          hash ^= terms_.GetHashCode();
          hash ^= instanceBoosts_.GetHashCode();
          if (InstanceScoreMode != 0) hash ^= InstanceScoreMode.GetHashCode();
          hash ^= fieldBoosts_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          body_.WriteTo(output, _repeated_body_codec);
          terms_.WriteTo(output, _repeated_terms_codec);
          instanceBoosts_.WriteTo(output, _repeated_instanceBoosts_codec);
          fieldBoosts_.WriteTo(output, _repeated_fieldBoosts_codec);
          if (InstanceScoreMode != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int) InstanceScoreMode);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += body_.CalculateSize(_repeated_body_codec);
          size += terms_.CalculateSize(_repeated_terms_codec);
          size += instanceBoosts_.CalculateSize(_repeated_instanceBoosts_codec);
          if (InstanceScoreMode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstanceScoreMode);
          }
          size += fieldBoosts_.CalculateSize(_repeated_fieldBoosts_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IndexQuery other) {
          if (other == null) {
            return;
          }
          body_.Add(other.body_);
          terms_.Add(other.terms_);
          instanceBoosts_.Add(other.instanceBoosts_);
          if (other.InstanceScoreMode != 0) {
            InstanceScoreMode = other.InstanceScoreMode;
          }
          fieldBoosts_.Add(other.fieldBoosts_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                body_.AddEntriesFrom(input, _repeated_body_codec);
                break;
              }
              case 18: {
                terms_.AddEntriesFrom(input, _repeated_terms_codec);
                break;
              }
              case 26: {
                instanceBoosts_.AddEntriesFrom(input, _repeated_instanceBoosts_codec);
                break;
              }
              case 34: {
                fieldBoosts_.AddEntriesFrom(input, _repeated_fieldBoosts_codec);
                break;
              }
              case 40: {
                instanceScoreMode_ = (global::Sajari.Engine.Query.V1.SearchRequest.Types.IndexQuery.Types.InstanceScoreMode) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the IndexQuery message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Instance score mode sets the scoring mode for computing score normalisation.
          /// </summary>
          public enum InstanceScoreMode {
            /// <summary>
            /// Absolute scoring sets the maximum possible score to be when the exact
            /// terms are matched in every indexed field.
            /// </summary>
            [pbr::OriginalName("ABS")] Abs = 0,
            /// <summary>
            /// Instance scoring is normalised against the maximum possible score
            /// for a match in the maximumally boosted field.
            /// </summary>
            [pbr::OriginalName("MAX")] Max = 1,
          }

        }
        #endregion

      }

      /// <summary>
      /// FeatureQuery defines criteria for boosting
      /// </summary>
      public sealed partial class FeatureQuery : pb::IMessage<FeatureQuery> {
        private static readonly pb::MessageParser<FeatureQuery> _parser = new pb::MessageParser<FeatureQuery>(() => new FeatureQuery());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FeatureQuery> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.SearchRequest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureQuery() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureQuery(FeatureQuery other) : this() {
          fieldBoosts_ = other.fieldBoosts_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureQuery Clone() {
          return new FeatureQuery(this);
        }

        /// <summary>Field number for the "field_boosts" field.</summary>
        public const int FieldBoostsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery.Types.FieldBoost> _repeated_fieldBoosts_codec
            = pb::FieldCodec.ForMessage(10, global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery.Types.FieldBoost.Parser);
        private readonly pbc::RepeatedField<global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery.Types.FieldBoost> fieldBoosts_ = new pbc::RepeatedField<global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery.Types.FieldBoost>();
        /// <summary>
        /// A list of field boosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery.Types.FieldBoost> FieldBoosts {
          get { return fieldBoosts_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FeatureQuery);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FeatureQuery other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!fieldBoosts_.Equals(other.fieldBoosts_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= fieldBoosts_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          fieldBoosts_.WriteTo(output, _repeated_fieldBoosts_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += fieldBoosts_.CalculateSize(_repeated_fieldBoosts_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FeatureQuery other) {
          if (other == null) {
            return;
          }
          fieldBoosts_.Add(other.fieldBoosts_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                fieldBoosts_.AddEntriesFrom(input, _repeated_fieldBoosts_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the FeatureQuery message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// FieldBoost is a boost is a feature boost on a field.
          /// </summary>
          public sealed partial class FieldBoost : pb::IMessage<FieldBoost> {
            private static readonly pb::MessageParser<FieldBoost> _parser = new pb::MessageParser<FieldBoost>(() => new FieldBoost());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<FieldBoost> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Sajari.Engine.Query.V1.SearchRequest.Types.FeatureQuery.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FieldBoost() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FieldBoost(FieldBoost other) : this() {
              FieldBoost_ = other.fieldBoost_ != null ? other.FieldBoost_.Clone() : null;
              value_ = other.value_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FieldBoost Clone() {
              return new FieldBoost(this);
            }

            /// <summary>Field number for the "field_boost" field.</summary>
            public const int FieldBoost_FieldNumber = 1;
            private global::Sajari.Engine.Query.V1.FieldBoost fieldBoost_;
            /// <summary>
            /// FieldBoost to make a feature boost.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Sajari.Engine.Query.V1.FieldBoost FieldBoost_ {
              get { return fieldBoost_; }
              set {
                fieldBoost_ = value;
              }
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 2;
            private double value_;
            /// <summary>
            /// Amount this boost will contribute to the overall score of the record.
            ///
            /// Must be between 0 and 1.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double Value {
              get { return value_; }
              set {
                value_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as FieldBoost);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(FieldBoost other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(FieldBoost_, other.FieldBoost_)) return false;
              if (Value != other.Value) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (fieldBoost_ != null) hash ^= FieldBoost_.GetHashCode();
              if (Value != 0D) hash ^= Value.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (fieldBoost_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(FieldBoost_);
              }
              if (Value != 0D) {
                output.WriteRawTag(17);
                output.WriteDouble(Value);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (fieldBoost_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(FieldBoost_);
              }
              if (Value != 0D) {
                size += 1 + 8;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(FieldBoost other) {
              if (other == null) {
                return;
              }
              if (other.fieldBoost_ != null) {
                if (fieldBoost_ == null) {
                  fieldBoost_ = new global::Sajari.Engine.Query.V1.FieldBoost();
                }
                FieldBoost_.MergeFrom(other.FieldBoost_);
              }
              if (other.Value != 0D) {
                Value = other.Value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    if (fieldBoost_ == null) {
                      fieldBoost_ = new global::Sajari.Engine.Query.V1.FieldBoost();
                    }
                    input.ReadMessage(fieldBoost_);
                    break;
                  }
                  case 17: {
                    Value = input.ReadDouble();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Transform is a transformation of the search request to be applied before
  /// the search is run. Transforms are typically used to extract additional
  /// features or to augment the input query itself.
  /// </summary>
  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      identifier_ = other.identifier_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private string identifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identifier {
      get { return identifier_; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Identifier != other.Identifier) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Identifier.Length != 0) hash ^= Identifier.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Identifier.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Identifier);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Identifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.Identifier.Length != 0) {
        Identifier = other.Identifier;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Identifier = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Term represents a tokenized piece of text (i.e. a single word, or number).
  /// </summary>
  public sealed partial class Term : pb::IMessage<Term> {
    private static readonly pb::MessageParser<Term> _parser = new pb::MessageParser<Term>(() => new Term());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Term> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Term() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Term(Term other) : this() {
      value_ = other.value_;
      field_ = other.field_;
      pos_ = other.pos_;
      neg_ = other.neg_;
      weight_ = other.weight_;
      wordOffset_ = other.wordOffset_;
      paraOffset_ = other.paraOffset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Term Clone() {
      return new Term(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    /// <summary>
    /// Term string value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 2;
    private string field_ = "";
    /// <summary>
    /// Field that the term originated from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Field {
      get { return field_; }
      set {
        field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private uint pos_;
    /// <summary>
    /// Number of positive interactions (uint16) this Term instance has been involved with.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "neg" field.</summary>
    public const int NegFieldNumber = 4;
    private uint neg_;
    /// <summary>
    /// Number of negative interactions (uint16) this Term instance has been involved with.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Neg {
      get { return neg_; }
      set {
        neg_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 5;
    private double weight_;
    /// <summary>
    /// Significance of the term (uint16).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "word_offset" field.</summary>
    public const int WordOffsetFieldNumber = 6;
    private uint wordOffset_;
    /// <summary>
    /// Word offset (context) (uint16).
    /// The position of this term instance in it's immediate context (i.e. paragraph).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WordOffset {
      get { return wordOffset_; }
      set {
        wordOffset_ = value;
      }
    }

    /// <summary>Field number for the "para_offset" field.</summary>
    public const int ParaOffsetFieldNumber = 7;
    private uint paraOffset_;
    /// <summary>
    /// Paragraph offset (context) (uint16).
    /// The paragraph position (a grouping of term instances) in a body string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ParaOffset {
      get { return paraOffset_; }
      set {
        paraOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Term);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Term other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (Field != other.Field) return false;
      if (Pos != other.Pos) return false;
      if (Neg != other.Neg) return false;
      if (Weight != other.Weight) return false;
      if (WordOffset != other.WordOffset) return false;
      if (ParaOffset != other.ParaOffset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Field.Length != 0) hash ^= Field.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Neg != 0) hash ^= Neg.GetHashCode();
      if (Weight != 0D) hash ^= Weight.GetHashCode();
      if (WordOffset != 0) hash ^= WordOffset.GetHashCode();
      if (ParaOffset != 0) hash ^= ParaOffset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (Field.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Field);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pos);
      }
      if (Neg != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Neg);
      }
      if (Weight != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Weight);
      }
      if (WordOffset != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(WordOffset);
      }
      if (ParaOffset != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ParaOffset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Field.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (Neg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Neg);
      }
      if (Weight != 0D) {
        size += 1 + 8;
      }
      if (WordOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WordOffset);
      }
      if (ParaOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ParaOffset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Term other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Field.Length != 0) {
        Field = other.Field;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Neg != 0) {
        Neg = other.Neg;
      }
      if (other.Weight != 0D) {
        Weight = other.Weight;
      }
      if (other.WordOffset != 0) {
        WordOffset = other.WordOffset;
      }
      if (other.ParaOffset != 0) {
        ParaOffset = other.ParaOffset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
          case 18: {
            Field = input.ReadString();
            break;
          }
          case 24: {
            Pos = input.ReadUInt32();
            break;
          }
          case 32: {
            Neg = input.ReadUInt32();
            break;
          }
          case 41: {
            Weight = input.ReadDouble();
            break;
          }
          case 48: {
            WordOffset = input.ReadUInt32();
            break;
          }
          case 56: {
            ParaOffset = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// EvaluateRequest contains all parameters necessary to make an Evaluate call.
  /// </summary>
  public sealed partial class EvaluateRequest : pb::IMessage<EvaluateRequest> {
    private static readonly pb::MessageParser<EvaluateRequest> _parser = new pb::MessageParser<EvaluateRequest>(() => new EvaluateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EvaluateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvaluateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvaluateRequest(EvaluateRequest other) : this() {
      SearchRequest = other.searchRequest_ != null ? other.SearchRequest.Clone() : null;
      record_ = other.record_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvaluateRequest Clone() {
      return new EvaluateRequest(this);
    }

    /// <summary>Field number for the "search_request" field.</summary>
    public const int SearchRequestFieldNumber = 1;
    private global::Sajari.Engine.Query.V1.SearchRequest searchRequest_;
    /// <summary>
    /// Search request to run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.SearchRequest SearchRequest {
      get { return searchRequest_; }
      set {
        searchRequest_ = value;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Sajari.Engine.Value>.Codec _map_record_codec
        = new pbc::MapField<string, global::Sajari.Engine.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Value.Parser), 18);
    private readonly pbc::MapField<string, global::Sajari.Engine.Value> record_ = new pbc::MapField<string, global::Sajari.Engine.Value>();
    /// <summary>
    /// Record to search against.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Sajari.Engine.Value> Record {
      get { return record_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EvaluateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EvaluateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SearchRequest, other.SearchRequest)) return false;
      if (!Record.Equals(other.Record)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (searchRequest_ != null) hash ^= SearchRequest.GetHashCode();
      hash ^= Record.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (searchRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SearchRequest);
      }
      record_.WriteTo(output, _map_record_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (searchRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchRequest);
      }
      size += record_.CalculateSize(_map_record_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EvaluateRequest other) {
      if (other == null) {
        return;
      }
      if (other.searchRequest_ != null) {
        if (searchRequest_ == null) {
          searchRequest_ = new global::Sajari.Engine.Query.V1.SearchRequest();
        }
        SearchRequest.MergeFrom(other.SearchRequest);
      }
      record_.Add(other.record_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (searchRequest_ == null) {
              searchRequest_ = new global::Sajari.Engine.Query.V1.SearchRequest();
            }
            input.ReadMessage(searchRequest_);
            break;
          }
          case 18: {
            record_.AddEntriesFrom(input, _map_record_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubstituteRequest : pb::IMessage<SubstituteRequest> {
    private static readonly pb::MessageParser<SubstituteRequest> _parser = new pb::MessageParser<SubstituteRequest>(() => new SubstituteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubstituteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubstituteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubstituteRequest(SubstituteRequest other) : this() {
      SearchRequest = other.searchRequest_ != null ? other.SearchRequest.Clone() : null;
      record_ = other.record_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubstituteRequest Clone() {
      return new SubstituteRequest(this);
    }

    /// <summary>Field number for the "search_request" field.</summary>
    public const int SearchRequestFieldNumber = 1;
    private global::Sajari.Engine.Query.V1.SearchRequest searchRequest_;
    /// <summary>
    /// Request is used as a template
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.SearchRequest SearchRequest {
      get { return searchRequest_; }
      set {
        searchRequest_ = value;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Sajari.Engine.Value>.Codec _map_record_codec
        = new pbc::MapField<string, global::Sajari.Engine.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Value.Parser), 18);
    private readonly pbc::MapField<string, global::Sajari.Engine.Value> record_ = new pbc::MapField<string, global::Sajari.Engine.Value>();
    /// <summary>
    /// Record is the record to be substituted in the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Sajari.Engine.Value> Record {
      get { return record_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubstituteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubstituteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SearchRequest, other.SearchRequest)) return false;
      if (!Record.Equals(other.Record)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (searchRequest_ != null) hash ^= SearchRequest.GetHashCode();
      hash ^= Record.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (searchRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SearchRequest);
      }
      record_.WriteTo(output, _map_record_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (searchRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchRequest);
      }
      size += record_.CalculateSize(_map_record_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubstituteRequest other) {
      if (other == null) {
        return;
      }
      if (other.searchRequest_ != null) {
        if (searchRequest_ == null) {
          searchRequest_ = new global::Sajari.Engine.Query.V1.SearchRequest();
        }
        SearchRequest.MergeFrom(other.SearchRequest);
      }
      record_.Add(other.record_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (searchRequest_ == null) {
              searchRequest_ = new global::Sajari.Engine.Query.V1.SearchRequest();
            }
            input.ReadMessage(searchRequest_);
            break;
          }
          case 18: {
            record_.AddEntriesFrom(input, _map_record_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Body is a weighted free text query.
  /// </summary>
  public sealed partial class Body : pb::IMessage<Body> {
    private static readonly pb::MessageParser<Body> _parser = new pb::MessageParser<Body>(() => new Body());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Body> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Body() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Body(Body other) : this() {
      text_ = other.text_;
      weight_ = other.weight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Body Clone() {
      return new Body(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    /// <summary>
    /// Text (free text).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 2;
    private double weight_;
    /// <summary>
    /// Weight (importance) to apply to this text.
    /// This value must be 0 &lt;= weight &lt;= 1 but must be set. A value of zero means
    /// the text has no value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Body);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Body other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (Weight != other.Weight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Weight != 0D) hash ^= Weight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (Weight != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Weight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Weight != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Body other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Weight != 0D) {
        Weight = other.Weight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 17: {
            Weight = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Aggregate is a statistical query run on the result set of a search.
  /// </summary>
  public sealed partial class Aggregate : pb::IMessage<Aggregate> {
    private static readonly pb::MessageParser<Aggregate> _parser = new pb::MessageParser<Aggregate>(() => new Aggregate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Aggregate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Aggregate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Aggregate(Aggregate other) : this() {
      switch (other.AggregateCase) {
        case AggregateOneofCase.Metric:
          Metric = other.Metric.Clone();
          break;
        case AggregateOneofCase.Count:
          Count = other.Count.Clone();
          break;
        case AggregateOneofCase.Bucket:
          Bucket = other.Bucket.Clone();
          break;
        case AggregateOneofCase.Analysis:
          Analysis = other.Analysis.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Aggregate Clone() {
      return new Aggregate(this);
    }

    /// <summary>Field number for the "metric" field.</summary>
    public const int MetricFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.Aggregate.Types.Metric Metric {
      get { return aggregateCase_ == AggregateOneofCase.Metric ? (global::Sajari.Engine.Query.V1.Aggregate.Types.Metric) aggregate_ : null; }
      set {
        aggregate_ = value;
        aggregateCase_ = value == null ? AggregateOneofCase.None : AggregateOneofCase.Metric;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.Aggregate.Types.Count Count {
      get { return aggregateCase_ == AggregateOneofCase.Count ? (global::Sajari.Engine.Query.V1.Aggregate.Types.Count) aggregate_ : null; }
      set {
        aggregate_ = value;
        aggregateCase_ = value == null ? AggregateOneofCase.None : AggregateOneofCase.Count;
      }
    }

    /// <summary>Field number for the "bucket" field.</summary>
    public const int BucketFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket Bucket {
      get { return aggregateCase_ == AggregateOneofCase.Bucket ? (global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket) aggregate_ : null; }
      set {
        aggregate_ = value;
        aggregateCase_ = value == null ? AggregateOneofCase.None : AggregateOneofCase.Bucket;
      }
    }

    /// <summary>Field number for the "analysis" field.</summary>
    public const int AnalysisFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.Aggregate.Types.Analysis Analysis {
      get { return aggregateCase_ == AggregateOneofCase.Analysis ? (global::Sajari.Engine.Query.V1.Aggregate.Types.Analysis) aggregate_ : null; }
      set {
        aggregate_ = value;
        aggregateCase_ = value == null ? AggregateOneofCase.None : AggregateOneofCase.Analysis;
      }
    }

    private object aggregate_;
    /// <summary>Enum of possible cases for the "aggregate" oneof.</summary>
    public enum AggregateOneofCase {
      None = 0,
      Metric = 1,
      Count = 2,
      Bucket = 3,
      Analysis = 4,
    }
    private AggregateOneofCase aggregateCase_ = AggregateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregateOneofCase AggregateCase {
      get { return aggregateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAggregate() {
      aggregateCase_ = AggregateOneofCase.None;
      aggregate_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Aggregate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Aggregate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metric, other.Metric)) return false;
      if (!object.Equals(Count, other.Count)) return false;
      if (!object.Equals(Bucket, other.Bucket)) return false;
      if (!object.Equals(Analysis, other.Analysis)) return false;
      if (AggregateCase != other.AggregateCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (aggregateCase_ == AggregateOneofCase.Metric) hash ^= Metric.GetHashCode();
      if (aggregateCase_ == AggregateOneofCase.Count) hash ^= Count.GetHashCode();
      if (aggregateCase_ == AggregateOneofCase.Bucket) hash ^= Bucket.GetHashCode();
      if (aggregateCase_ == AggregateOneofCase.Analysis) hash ^= Analysis.GetHashCode();
      hash ^= (int) aggregateCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (aggregateCase_ == AggregateOneofCase.Metric) {
        output.WriteRawTag(10);
        output.WriteMessage(Metric);
      }
      if (aggregateCase_ == AggregateOneofCase.Count) {
        output.WriteRawTag(18);
        output.WriteMessage(Count);
      }
      if (aggregateCase_ == AggregateOneofCase.Bucket) {
        output.WriteRawTag(26);
        output.WriteMessage(Bucket);
      }
      if (aggregateCase_ == AggregateOneofCase.Analysis) {
        output.WriteRawTag(34);
        output.WriteMessage(Analysis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (aggregateCase_ == AggregateOneofCase.Metric) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metric);
      }
      if (aggregateCase_ == AggregateOneofCase.Count) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Count);
      }
      if (aggregateCase_ == AggregateOneofCase.Bucket) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bucket);
      }
      if (aggregateCase_ == AggregateOneofCase.Analysis) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Analysis);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Aggregate other) {
      if (other == null) {
        return;
      }
      switch (other.AggregateCase) {
        case AggregateOneofCase.Metric:
          Metric = other.Metric;
          break;
        case AggregateOneofCase.Count:
          Count = other.Count;
          break;
        case AggregateOneofCase.Bucket:
          Bucket = other.Bucket;
          break;
        case AggregateOneofCase.Analysis:
          Analysis = other.Analysis;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Sajari.Engine.Query.V1.Aggregate.Types.Metric subBuilder = new global::Sajari.Engine.Query.V1.Aggregate.Types.Metric();
            if (aggregateCase_ == AggregateOneofCase.Metric) {
              subBuilder.MergeFrom(Metric);
            }
            input.ReadMessage(subBuilder);
            Metric = subBuilder;
            break;
          }
          case 18: {
            global::Sajari.Engine.Query.V1.Aggregate.Types.Count subBuilder = new global::Sajari.Engine.Query.V1.Aggregate.Types.Count();
            if (aggregateCase_ == AggregateOneofCase.Count) {
              subBuilder.MergeFrom(Count);
            }
            input.ReadMessage(subBuilder);
            Count = subBuilder;
            break;
          }
          case 26: {
            global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket subBuilder = new global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket();
            if (aggregateCase_ == AggregateOneofCase.Bucket) {
              subBuilder.MergeFrom(Bucket);
            }
            input.ReadMessage(subBuilder);
            Bucket = subBuilder;
            break;
          }
          case 34: {
            global::Sajari.Engine.Query.V1.Aggregate.Types.Analysis subBuilder = new global::Sajari.Engine.Query.V1.Aggregate.Types.Analysis();
            if (aggregateCase_ == AggregateOneofCase.Analysis) {
              subBuilder.MergeFrom(Analysis);
            }
            input.ReadMessage(subBuilder);
            Analysis = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Aggregate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Metric calculates numerical information from a field.
      /// </summary>
      public sealed partial class Metric : pb::IMessage<Metric> {
        private static readonly pb::MessageParser<Metric> _parser = new pb::MessageParser<Metric>(() => new Metric());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Metric> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.Aggregate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Metric() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Metric(Metric other) : this() {
          field_ = other.field_;
          type_ = other.type_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Metric Clone() {
          return new Metric(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private string field_ = "";
        /// <summary>
        /// Name of the field to run numerical metrics.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::Sajari.Engine.Query.V1.Aggregate.Types.Metric.Types.Type type_ = 0;
        /// <summary>
        /// The type of metric to apply.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Sajari.Engine.Query.V1.Aggregate.Types.Metric.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Metric);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Metric other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Field != other.Field) return false;
          if (Type != other.Type) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Field.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Field);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Metric other) {
          if (other == null) {
            return;
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Field = input.ReadString();
                break;
              }
              case 16: {
                type_ = (global::Sajari.Engine.Query.V1.Aggregate.Types.Metric.Types.Type) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Metric message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Enumeration of metric types.
          /// </summary>
          public enum Type {
            /// <summary>
            /// Average field value.
            /// </summary>
            [pbr::OriginalName("AVG")] Avg = 0,
            /// <summary>
            /// Minimum field value.
            /// </summary>
            [pbr::OriginalName("MIN")] Min = 1,
            /// <summary>
            /// Maximum field value.
            /// </summary>
            [pbr::OriginalName("MAX")] Max = 2,
            /// <summary>
            /// Sum of all field values.
            /// </summary>
            [pbr::OriginalName("SUM")] Sum = 3,
          }

        }
        #endregion

      }

      /// <summary>
      /// Count records the number of unique values for a field.
      /// </summary>
      public sealed partial class Count : pb::IMessage<Count> {
        private static readonly pb::MessageParser<Count> _parser = new pb::MessageParser<Count>(() => new Count());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Count> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.Aggregate.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Count() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Count(Count other) : this() {
          field_ = other.field_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Count Clone() {
          return new Count(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private string field_ = "";
        /// <summary>
        /// Name of the field to count values from.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Count);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Count other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Field != other.Field) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Field.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Field);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Count other) {
          if (other == null) {
            return;
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Field = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Bucket groups records using filters, Records which satisfy the filter
      /// will be included in the bucket.
      /// </summary>
      public sealed partial class Bucket : pb::IMessage<Bucket> {
        private static readonly pb::MessageParser<Bucket> _parser = new pb::MessageParser<Bucket>(() => new Bucket());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Bucket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.Aggregate.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket(Bucket other) : this() {
          buckets_ = other.buckets_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket Clone() {
          return new Bucket(this);
        }

        /// <summary>Field number for the "buckets" field.</summary>
        public const int BucketsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket.Types.Bucket> _repeated_buckets_codec
            = pb::FieldCodec.ForMessage(10, global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket.Types.Bucket.Parser);
        private readonly pbc::RepeatedField<global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket.Types.Bucket> buckets_ = new pbc::RepeatedField<global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket.Types.Bucket>();
        /// <summary>
        /// List of buckets.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket.Types.Bucket> Buckets {
          get { return buckets_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Bucket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Bucket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!buckets_.Equals(other.buckets_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= buckets_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          buckets_.WriteTo(output, _repeated_buckets_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += buckets_.CalculateSize(_repeated_buckets_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Bucket other) {
          if (other == null) {
            return;
          }
          buckets_.Add(other.buckets_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                buckets_.AddEntriesFrom(input, _repeated_buckets_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Bucket message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Bucket represents records which satisfy a Filter.
          /// </summary>
          public sealed partial class Bucket : pb::IMessage<Bucket> {
            private static readonly pb::MessageParser<Bucket> _parser = new pb::MessageParser<Bucket>(() => new Bucket());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Bucket> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Sajari.Engine.Query.V1.Aggregate.Types.Bucket.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Bucket() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Bucket(Bucket other) : this() {
              name_ = other.name_;
              Filter = other.filter_ != null ? other.Filter.Clone() : null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Bucket Clone() {
              return new Bucket(this);
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 1;
            private string name_ = "";
            /// <summary>
            /// Name of the bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "filter" field.</summary>
            public const int FilterFieldNumber = 2;
            private global::Sajari.Engine.Query.V1.Filter filter_;
            /// <summary>
            /// Filter satisfied by records in the bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Sajari.Engine.Query.V1.Filter Filter {
              get { return filter_; }
              set {
                filter_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Bucket);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Bucket other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Name != other.Name) return false;
              if (!object.Equals(Filter, other.Filter)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (filter_ != null) hash ^= Filter.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Name.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Name);
              }
              if (filter_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Filter);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (filter_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Bucket other) {
              if (other == null) {
                return;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              if (other.filter_ != null) {
                if (filter_ == null) {
                  filter_ = new global::Sajari.Engine.Query.V1.Filter();
                }
                Filter.MergeFrom(other.Filter);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    Name = input.ReadString();
                    break;
                  }
                  case 18: {
                    if (filter_ == null) {
                      filter_ = new global::Sajari.Engine.Query.V1.Filter();
                    }
                    input.ReadMessage(filter_);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class Analysis : pb::IMessage<Analysis> {
        private static readonly pb::MessageParser<Analysis> _parser = new pb::MessageParser<Analysis>(() => new Analysis());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Analysis> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.Aggregate.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Analysis() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Analysis(Analysis other) : this() {
          field_ = other.field_;
          type_ = other.type_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Analysis Clone() {
          return new Analysis(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private string field_ = "";
        /// <summary>
        /// Name of the field to run analysis on.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::Sajari.Engine.Query.V1.Aggregate.Types.Analysis.Types.Type type_ = 0;
        /// <summary>
        /// The of analysis to apply.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Sajari.Engine.Query.V1.Aggregate.Types.Analysis.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Analysis);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Analysis other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Field != other.Field) return false;
          if (Type != other.Type) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Field.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Field);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Analysis other) {
          if (other == null) {
            return;
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Field = input.ReadString();
                break;
              }
              case 16: {
                type_ = (global::Sajari.Engine.Query.V1.Aggregate.Types.Analysis.Types.Type) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Analysis message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            /// <summary>
            /// Number of records with a field set.
            /// </summary>
            [pbr::OriginalName("COVERAGE")] Coverage = 0,
            /// <summary>
            /// Number of records with unique values.
            /// </summary>
            [pbr::OriginalName("UNIQUE")] Unique = 1,
            /// <summary>
            /// Average length of string-based fields.
            /// </summary>
            [pbr::OriginalName("AVG_LEN")] AvgLen = 2,
            /// <summary>
            /// Minimum length of string-based fields.
            /// </summary>
            [pbr::OriginalName("MIN_LEN")] MinLen = 3,
            /// <summary>
            /// Maximum length of string-based fields.
            /// </summary>
            [pbr::OriginalName("MAX_LEN")] MaxLen = 4,
            /// <summary>
            /// Average number of items in repeated fields.
            /// </summary>
            [pbr::OriginalName("AVG_COUNT")] AvgCount = 5,
            /// <summary>
            /// Minimum number of items in repeated fields.
            /// </summary>
            [pbr::OriginalName("MIN_COUNT")] MinCount = 6,
            /// <summary>
            /// Maximum number of items in repeated fields.
            /// </summary>
            [pbr::OriginalName("MAX_COUNT")] MaxCount = 7,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Sort defines the ordering of result records using.
  /// </summary>
  public sealed partial class Sort : pb::IMessage<Sort> {
    private static readonly pb::MessageParser<Sort> _parser = new pb::MessageParser<Sort>(() => new Sort());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sort> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sort() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sort(Sort other) : this() {
      order_ = other.order_;
      switch (other.TypeCase) {
        case TypeOneofCase.Score:
          Score = other.Score;
          break;
        case TypeOneofCase.QueryScore:
          QueryScore = other.QueryScore;
          break;
        case TypeOneofCase.FeatureScore:
          FeatureScore = other.FeatureScore;
          break;
        case TypeOneofCase.Field:
          Field = other.Field;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sort Clone() {
      return new Sort(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    /// <summary>
    /// Sort by score.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Score {
      get { return typeCase_ == TypeOneofCase.Score ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.Score;
      }
    }

    /// <summary>Field number for the "query_score" field.</summary>
    public const int QueryScoreFieldNumber = 2;
    /// <summary>
    /// Sort by query score.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool QueryScore {
      get { return typeCase_ == TypeOneofCase.QueryScore ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.QueryScore;
      }
    }

    /// <summary>Field number for the "feature_score" field.</summary>
    public const int FeatureScoreFieldNumber = 3;
    /// <summary>
    /// Sort by feature_score;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FeatureScore {
      get { return typeCase_ == TypeOneofCase.FeatureScore ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.FeatureScore;
      }
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 4;
    /// <summary>
    /// Sort by field values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Field {
      get { return typeCase_ == TypeOneofCase.Field ? (string) type_ : ""; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.Field;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 5;
    private global::Sajari.Engine.Query.V1.Sort.Types.Order order_ = 0;
    /// <summary>
    /// Sorting order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.Sort.Types.Order Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Score = 1,
      QueryScore = 2,
      FeatureScore = 3,
      Field = 4,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sort);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sort other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if (QueryScore != other.QueryScore) return false;
      if (FeatureScore != other.FeatureScore) return false;
      if (Field != other.Field) return false;
      if (Order != other.Order) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Score) hash ^= Score.GetHashCode();
      if (typeCase_ == TypeOneofCase.QueryScore) hash ^= QueryScore.GetHashCode();
      if (typeCase_ == TypeOneofCase.FeatureScore) hash ^= FeatureScore.GetHashCode();
      if (typeCase_ == TypeOneofCase.Field) hash ^= Field.GetHashCode();
      if (Order != 0) hash ^= Order.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Score) {
        output.WriteRawTag(8);
        output.WriteBool(Score);
      }
      if (typeCase_ == TypeOneofCase.QueryScore) {
        output.WriteRawTag(16);
        output.WriteBool(QueryScore);
      }
      if (typeCase_ == TypeOneofCase.FeatureScore) {
        output.WriteRawTag(24);
        output.WriteBool(FeatureScore);
      }
      if (typeCase_ == TypeOneofCase.Field) {
        output.WriteRawTag(34);
        output.WriteString(Field);
      }
      if (Order != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Order);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Score) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.QueryScore) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.FeatureScore) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.Field) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
      }
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Order);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sort other) {
      if (other == null) {
        return;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Score:
          Score = other.Score;
          break;
        case TypeOneofCase.QueryScore:
          QueryScore = other.QueryScore;
          break;
        case TypeOneofCase.FeatureScore:
          FeatureScore = other.FeatureScore;
          break;
        case TypeOneofCase.Field:
          Field = other.Field;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadBool();
            break;
          }
          case 16: {
            QueryScore = input.ReadBool();
            break;
          }
          case 24: {
            FeatureScore = input.ReadBool();
            break;
          }
          case 34: {
            Field = input.ReadString();
            break;
          }
          case 40: {
            order_ = (global::Sajari.Engine.Query.V1.Sort.Types.Order) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Sort message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Order is an enumeration that defines orderings for sorting.
      /// </summary>
      public enum Order {
        /// <summary>
        /// Ascending: from least to greatest, for non-numeric
        /// fields this means alphabetical order.
        /// </summary>
        [pbr::OriginalName("ASC")] Asc = 0,
        /// <summary>
        /// Descending: from greatest to least, for non-numeric
        /// fields this means reverse-alphabetical order.
        /// </summary>
        [pbr::OriginalName("DESC")] Desc = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// Filter describes a set of conditions to match values in record fields.
  /// Filters can be nested and combined using Combinators.
  /// </summary>
  public sealed partial class Filter : pb::IMessage<Filter> {
    private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Filter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter(Filter other) : this() {
      switch (other.FilterCase) {
        case FilterOneofCase.Combinator:
          Combinator = other.Combinator.Clone();
          break;
        case FilterOneofCase.Field:
          Field = other.Field.Clone();
          break;
        case FilterOneofCase.Geo:
          Geo = other.Geo.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter Clone() {
      return new Filter(this);
    }

    /// <summary>Field number for the "combinator" field.</summary>
    public const int CombinatorFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.Filter.Types.Combinator Combinator {
      get { return filterCase_ == FilterOneofCase.Combinator ? (global::Sajari.Engine.Query.V1.Filter.Types.Combinator) filter_ : null; }
      set {
        filter_ = value;
        filterCase_ = value == null ? FilterOneofCase.None : FilterOneofCase.Combinator;
      }
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.Filter.Types.Field Field {
      get { return filterCase_ == FilterOneofCase.Field ? (global::Sajari.Engine.Query.V1.Filter.Types.Field) filter_ : null; }
      set {
        filter_ = value;
        filterCase_ = value == null ? FilterOneofCase.None : FilterOneofCase.Field;
      }
    }

    /// <summary>Field number for the "geo" field.</summary>
    public const int GeoFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.Filter.Types.Geo Geo {
      get { return filterCase_ == FilterOneofCase.Geo ? (global::Sajari.Engine.Query.V1.Filter.Types.Geo) filter_ : null; }
      set {
        filter_ = value;
        filterCase_ = value == null ? FilterOneofCase.None : FilterOneofCase.Geo;
      }
    }

    private object filter_;
    /// <summary>Enum of possible cases for the "filter" oneof.</summary>
    public enum FilterOneofCase {
      None = 0,
      Combinator = 1,
      Field = 2,
      Geo = 3,
    }
    private FilterOneofCase filterCase_ = FilterOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterOneofCase FilterCase {
      get { return filterCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilter() {
      filterCase_ = FilterOneofCase.None;
      filter_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Filter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Filter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Combinator, other.Combinator)) return false;
      if (!object.Equals(Field, other.Field)) return false;
      if (!object.Equals(Geo, other.Geo)) return false;
      if (FilterCase != other.FilterCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (filterCase_ == FilterOneofCase.Combinator) hash ^= Combinator.GetHashCode();
      if (filterCase_ == FilterOneofCase.Field) hash ^= Field.GetHashCode();
      if (filterCase_ == FilterOneofCase.Geo) hash ^= Geo.GetHashCode();
      hash ^= (int) filterCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (filterCase_ == FilterOneofCase.Combinator) {
        output.WriteRawTag(10);
        output.WriteMessage(Combinator);
      }
      if (filterCase_ == FilterOneofCase.Field) {
        output.WriteRawTag(18);
        output.WriteMessage(Field);
      }
      if (filterCase_ == FilterOneofCase.Geo) {
        output.WriteRawTag(26);
        output.WriteMessage(Geo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (filterCase_ == FilterOneofCase.Combinator) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Combinator);
      }
      if (filterCase_ == FilterOneofCase.Field) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
      }
      if (filterCase_ == FilterOneofCase.Geo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Geo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Filter other) {
      if (other == null) {
        return;
      }
      switch (other.FilterCase) {
        case FilterOneofCase.Combinator:
          Combinator = other.Combinator;
          break;
        case FilterOneofCase.Field:
          Field = other.Field;
          break;
        case FilterOneofCase.Geo:
          Geo = other.Geo;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Sajari.Engine.Query.V1.Filter.Types.Combinator subBuilder = new global::Sajari.Engine.Query.V1.Filter.Types.Combinator();
            if (filterCase_ == FilterOneofCase.Combinator) {
              subBuilder.MergeFrom(Combinator);
            }
            input.ReadMessage(subBuilder);
            Combinator = subBuilder;
            break;
          }
          case 18: {
            global::Sajari.Engine.Query.V1.Filter.Types.Field subBuilder = new global::Sajari.Engine.Query.V1.Filter.Types.Field();
            if (filterCase_ == FilterOneofCase.Field) {
              subBuilder.MergeFrom(Field);
            }
            input.ReadMessage(subBuilder);
            Field = subBuilder;
            break;
          }
          case 26: {
            global::Sajari.Engine.Query.V1.Filter.Types.Geo subBuilder = new global::Sajari.Engine.Query.V1.Filter.Types.Geo();
            if (filterCase_ == FilterOneofCase.Geo) {
              subBuilder.MergeFrom(Geo);
            }
            input.ReadMessage(subBuilder);
            Geo = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Filter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Field is a filter which is applied to a record field.
      /// </summary>
      public sealed partial class Field : pb::IMessage<Field> {
        private static readonly pb::MessageParser<Field> _parser = new pb::MessageParser<Field>(() => new Field());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Field> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.Filter.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Field() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Field(Field other) : this() {
          operator_ = other.operator_;
          field_ = other.field_;
          Value = other.value_ != null ? other.Value.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Field Clone() {
          return new Field(this);
        }

        /// <summary>Field number for the "operator" field.</summary>
        public const int OperatorFieldNumber = 1;
        private global::Sajari.Engine.Query.V1.Filter.Types.Field.Types.Operator operator_ = 0;
        /// <summary>
        /// The comparison operator to use.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Sajari.Engine.Query.V1.Filter.Types.Field.Types.Operator Operator {
          get { return operator_; }
          set {
            operator_ = value;
          }
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int Field_FieldNumber = 2;
        private string field_ = "";
        /// <summary>
        /// Field to take values from.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field_ {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 3;
        private global::Sajari.Engine.Value value_;
        /// <summary>
        /// Value to match against.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Sajari.Engine.Value Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Field);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Field other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Operator != other.Operator) return false;
          if (Field_ != other.Field_) return false;
          if (!object.Equals(Value, other.Value)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Operator != 0) hash ^= Operator.GetHashCode();
          if (Field_.Length != 0) hash ^= Field_.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Operator != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Operator);
          }
          if (Field_.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Field_);
          }
          if (value_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Operator != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operator);
          }
          if (Field_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field_);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Field other) {
          if (other == null) {
            return;
          }
          if (other.Operator != 0) {
            Operator = other.Operator;
          }
          if (other.Field_.Length != 0) {
            Field_ = other.Field_;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              value_ = new global::Sajari.Engine.Value();
            }
            Value.MergeFrom(other.Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                operator_ = (global::Sajari.Engine.Query.V1.Filter.Types.Field.Types.Operator) input.ReadEnum();
                break;
              }
              case 18: {
                Field_ = input.ReadString();
                break;
              }
              case 26: {
                if (value_ == null) {
                  value_ = new global::Sajari.Engine.Value();
                }
                input.ReadMessage(value_);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Field message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Operator is an enumeration of operators.
          /// </summary>
          public enum Operator {
            /// <summary>
            /// Equal value.
            /// For STRING fields this is case insensitive.
            /// </summary>
            [pbr::OriginalName("EQUAL_TO")] EqualTo = 0,
            /// <summary>
            /// Not equal value.
            /// For STRING fields this is case insensitive.
            /// </summary>
            [pbr::OriginalName("NOT_EQUAL_TO")] NotEqualTo = 1,
            [pbr::OriginalName("GREATER_THAN")] GreaterThan = 2,
            [pbr::OriginalName("GREATER_THAN_OR_EQUAL_TO")] GreaterThanOrEqualTo = 3,
            [pbr::OriginalName("LESS_THAN")] LessThan = 4,
            [pbr::OriginalName("LESS_THAN_OR_EQUAL_TO")] LessThanOrEqualTo = 5,
            /// <summary>
            /// For STRING fields this is case insensitive.
            /// </summary>
            [pbr::OriginalName("CONTAINS")] Contains = 6,
            /// <summary>
            /// For STRING fields this is case insensitive.
            /// </summary>
            [pbr::OriginalName("DOES_NOT_CONTAIN")] DoesNotContain = 7,
            /// <summary>
            /// For STRING fields this is case insensitive.
            /// </summary>
            [pbr::OriginalName("HAS_SUFFIX")] HasSuffix = 8,
            /// <summary>
            /// For STRING fields this is case insensitive.
            /// </summary>
            [pbr::OriginalName("HAS_PREFIX")] HasPrefix = 9,
          }

        }
        #endregion

      }

      /// <summary>
      /// Geo is a geo-based filter for records with lat/lng fields representing a location.
      /// </summary>
      public sealed partial class Geo : pb::IMessage<Geo> {
        private static readonly pb::MessageParser<Geo> _parser = new pb::MessageParser<Geo>(() => new Geo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Geo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.Filter.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Geo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Geo(Geo other) : this() {
          fieldLat_ = other.fieldLat_;
          fieldLng_ = other.fieldLng_;
          lat_ = other.lat_;
          lng_ = other.lng_;
          radius_ = other.radius_;
          region_ = other.region_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Geo Clone() {
          return new Geo(this);
        }

        /// <summary>Field number for the "field_lat" field.</summary>
        public const int FieldLatFieldNumber = 1;
        private string fieldLat_ = "";
        /// <summary>
        /// Field containing latitude (degrees).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FieldLat {
          get { return fieldLat_; }
          set {
            fieldLat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "field_lng" field.</summary>
        public const int FieldLngFieldNumber = 2;
        private string fieldLng_ = "";
        /// <summary>
        /// Field containing longitude (degrees).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FieldLng {
          get { return fieldLng_; }
          set {
            fieldLng_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "lat" field.</summary>
        public const int LatFieldNumber = 3;
        private double lat_;
        /// <summary>
        /// Target latitude (in degrees).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Lat {
          get { return lat_; }
          set {
            lat_ = value;
          }
        }

        /// <summary>Field number for the "lng" field.</summary>
        public const int LngFieldNumber = 4;
        private double lng_;
        /// <summary>
        /// Target longitude (in degrees).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Lng {
          get { return lng_; }
          set {
            lng_ = value;
          }
        }

        /// <summary>Field number for the "radius" field.</summary>
        public const int RadiusFieldNumber = 5;
        private double radius_;
        /// <summary>
        /// Radius (in km) of matching border (see region).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Radius {
          get { return radius_; }
          set {
            radius_ = value;
          }
        }

        /// <summary>Field number for the "region" field.</summary>
        public const int RegionFieldNumber = 6;
        private global::Sajari.Engine.Query.V1.Filter.Types.Geo.Types.Region region_ = 0;
        /// <summary>
        /// Region for matching points.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Sajari.Engine.Query.V1.Filter.Types.Geo.Types.Region Region {
          get { return region_; }
          set {
            region_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Geo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Geo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FieldLat != other.FieldLat) return false;
          if (FieldLng != other.FieldLng) return false;
          if (Lat != other.Lat) return false;
          if (Lng != other.Lng) return false;
          if (Radius != other.Radius) return false;
          if (Region != other.Region) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FieldLat.Length != 0) hash ^= FieldLat.GetHashCode();
          if (FieldLng.Length != 0) hash ^= FieldLng.GetHashCode();
          if (Lat != 0D) hash ^= Lat.GetHashCode();
          if (Lng != 0D) hash ^= Lng.GetHashCode();
          if (Radius != 0D) hash ^= Radius.GetHashCode();
          if (Region != 0) hash ^= Region.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FieldLat.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FieldLat);
          }
          if (FieldLng.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(FieldLng);
          }
          if (Lat != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Lat);
          }
          if (Lng != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(Lng);
          }
          if (Radius != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(Radius);
          }
          if (Region != 0) {
            output.WriteRawTag(48);
            output.WriteEnum((int) Region);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FieldLat.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldLat);
          }
          if (FieldLng.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldLng);
          }
          if (Lat != 0D) {
            size += 1 + 8;
          }
          if (Lng != 0D) {
            size += 1 + 8;
          }
          if (Radius != 0D) {
            size += 1 + 8;
          }
          if (Region != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Region);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Geo other) {
          if (other == null) {
            return;
          }
          if (other.FieldLat.Length != 0) {
            FieldLat = other.FieldLat;
          }
          if (other.FieldLng.Length != 0) {
            FieldLng = other.FieldLng;
          }
          if (other.Lat != 0D) {
            Lat = other.Lat;
          }
          if (other.Lng != 0D) {
            Lng = other.Lng;
          }
          if (other.Radius != 0D) {
            Radius = other.Radius;
          }
          if (other.Region != 0) {
            Region = other.Region;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                FieldLat = input.ReadString();
                break;
              }
              case 18: {
                FieldLng = input.ReadString();
                break;
              }
              case 25: {
                Lat = input.ReadDouble();
                break;
              }
              case 33: {
                Lng = input.ReadDouble();
                break;
              }
              case 41: {
                Radius = input.ReadDouble();
                break;
              }
              case 48: {
                region_ = (global::Sajari.Engine.Query.V1.Filter.Types.Geo.Types.Region) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Geo message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Region is an enumeration that defines regions for geo-boosting.
          /// </summary>
          public enum Region {
            /// <summary>
            /// Inside is used to configure a geo filter to be
            /// satisfied on all points within the radius.
            /// </summary>
            [pbr::OriginalName("INSIDE")] Inside = 0,
            /// <summary>
            /// Outside is used to configure a geo filter to be
            /// satisfied to all points outside the radius.
            /// </summary>
            [pbr::OriginalName("OUTSIDE")] Outside = 1,
          }

        }
        #endregion

      }

      /// <summary>
      /// Combinator is a filter which combines other filters.
      /// </summary>
      public sealed partial class Combinator : pb::IMessage<Combinator> {
        private static readonly pb::MessageParser<Combinator> _parser = new pb::MessageParser<Combinator>(() => new Combinator());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Combinator> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.Filter.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Combinator() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Combinator(Combinator other) : this() {
          operator_ = other.operator_;
          filters_ = other.filters_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Combinator Clone() {
          return new Combinator(this);
        }

        /// <summary>Field number for the "operator" field.</summary>
        public const int OperatorFieldNumber = 1;
        private global::Sajari.Engine.Query.V1.Filter.Types.Combinator.Types.Operator operator_ = 0;
        /// <summary>
        /// The operator used to combine filters.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Sajari.Engine.Query.V1.Filter.Types.Combinator.Types.Operator Operator {
          get { return operator_; }
          set {
            operator_ = value;
          }
        }

        /// <summary>Field number for the "filters" field.</summary>
        public const int FiltersFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Sajari.Engine.Query.V1.Filter> _repeated_filters_codec
            = pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Query.V1.Filter.Parser);
        private readonly pbc::RepeatedField<global::Sajari.Engine.Query.V1.Filter> filters_ = new pbc::RepeatedField<global::Sajari.Engine.Query.V1.Filter>();
        /// <summary>
        /// The set of filters to combine using the specified Operator.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Sajari.Engine.Query.V1.Filter> Filters {
          get { return filters_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Combinator);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Combinator other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Operator != other.Operator) return false;
          if(!filters_.Equals(other.filters_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Operator != 0) hash ^= Operator.GetHashCode();
          hash ^= filters_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Operator != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Operator);
          }
          filters_.WriteTo(output, _repeated_filters_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Operator != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operator);
          }
          size += filters_.CalculateSize(_repeated_filters_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Combinator other) {
          if (other == null) {
            return;
          }
          if (other.Operator != 0) {
            Operator = other.Operator;
          }
          filters_.Add(other.filters_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                operator_ = (global::Sajari.Engine.Query.V1.Filter.Types.Combinator.Types.Operator) input.ReadEnum();
                break;
              }
              case 18: {
                filters_.AddEntriesFrom(input, _repeated_filters_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Combinator message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Operator is an enumeration of combination operators.
          /// </summary>
          public enum Operator {
            /// <summary>
            /// All of the filters must be satisfied.
            /// </summary>
            [pbr::OriginalName("ALL")] All = 0,
            /// <summary>
            /// Any of the filters must be satisfied.
            /// </summary>
            [pbr::OriginalName("ANY")] Any = 1,
            /// <summary>
            /// One of the filters (and only one) must be satisfied.
            /// </summary>
            [pbr::OriginalName("ONE")] One = 2,
            /// <summary>
            /// None of the filters must be satisfied.
            /// </summary>
            [pbr::OriginalName("NONE")] None = 3,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// FieldBoost is used to influence the score of a record based on its field values.
  ///
  /// The effect of a FieldBoost is the value that it contributes to the overall score.
  /// All boost effects are between 0 and 1 inclusive.
  /// </summary>
  public sealed partial class FieldBoost : pb::IMessage<FieldBoost> {
    private static readonly pb::MessageParser<FieldBoost> _parser = new pb::MessageParser<FieldBoost>(() => new FieldBoost());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldBoost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldBoost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldBoost(FieldBoost other) : this() {
      switch (other.FieldBoostCase) {
        case FieldBoostOneofCase.Filter:
          Filter = other.Filter.Clone();
          break;
        case FieldBoostOneofCase.Interval:
          Interval = other.Interval.Clone();
          break;
        case FieldBoostOneofCase.Element:
          Element = other.Element.Clone();
          break;
        case FieldBoostOneofCase.Text:
          Text = other.Text.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldBoost Clone() {
      return new FieldBoost(this);
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.FieldBoost.Types.Filter Filter {
      get { return fieldBoostCase_ == FieldBoostOneofCase.Filter ? (global::Sajari.Engine.Query.V1.FieldBoost.Types.Filter) fieldBoost_ : null; }
      set {
        fieldBoost_ = value;
        fieldBoostCase_ = value == null ? FieldBoostOneofCase.None : FieldBoostOneofCase.Filter;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval Interval {
      get { return fieldBoostCase_ == FieldBoostOneofCase.Interval ? (global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval) fieldBoost_ : null; }
      set {
        fieldBoost_ = value;
        fieldBoostCase_ = value == null ? FieldBoostOneofCase.None : FieldBoostOneofCase.Interval;
      }
    }

    /// <summary>Field number for the "element" field.</summary>
    public const int ElementFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.FieldBoost.Types.Element Element {
      get { return fieldBoostCase_ == FieldBoostOneofCase.Element ? (global::Sajari.Engine.Query.V1.FieldBoost.Types.Element) fieldBoost_ : null; }
      set {
        fieldBoost_ = value;
        fieldBoostCase_ = value == null ? FieldBoostOneofCase.None : FieldBoostOneofCase.Element;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.FieldBoost.Types.Text Text {
      get { return fieldBoostCase_ == FieldBoostOneofCase.Text ? (global::Sajari.Engine.Query.V1.FieldBoost.Types.Text) fieldBoost_ : null; }
      set {
        fieldBoost_ = value;
        fieldBoostCase_ = value == null ? FieldBoostOneofCase.None : FieldBoostOneofCase.Text;
      }
    }

    private object fieldBoost_;
    /// <summary>Enum of possible cases for the "field_boost" oneof.</summary>
    public enum FieldBoostOneofCase {
      None = 0,
      Filter = 1,
      Interval = 2,
      Element = 3,
      Text = 4,
    }
    private FieldBoostOneofCase fieldBoostCase_ = FieldBoostOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldBoostOneofCase FieldBoostCase {
      get { return fieldBoostCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFieldBoost() {
      fieldBoostCase_ = FieldBoostOneofCase.None;
      fieldBoost_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldBoost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldBoost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Filter, other.Filter)) return false;
      if (!object.Equals(Interval, other.Interval)) return false;
      if (!object.Equals(Element, other.Element)) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (FieldBoostCase != other.FieldBoostCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fieldBoostCase_ == FieldBoostOneofCase.Filter) hash ^= Filter.GetHashCode();
      if (fieldBoostCase_ == FieldBoostOneofCase.Interval) hash ^= Interval.GetHashCode();
      if (fieldBoostCase_ == FieldBoostOneofCase.Element) hash ^= Element.GetHashCode();
      if (fieldBoostCase_ == FieldBoostOneofCase.Text) hash ^= Text.GetHashCode();
      hash ^= (int) fieldBoostCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fieldBoostCase_ == FieldBoostOneofCase.Filter) {
        output.WriteRawTag(10);
        output.WriteMessage(Filter);
      }
      if (fieldBoostCase_ == FieldBoostOneofCase.Interval) {
        output.WriteRawTag(18);
        output.WriteMessage(Interval);
      }
      if (fieldBoostCase_ == FieldBoostOneofCase.Element) {
        output.WriteRawTag(26);
        output.WriteMessage(Element);
      }
      if (fieldBoostCase_ == FieldBoostOneofCase.Text) {
        output.WriteRawTag(34);
        output.WriteMessage(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fieldBoostCase_ == FieldBoostOneofCase.Filter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
      }
      if (fieldBoostCase_ == FieldBoostOneofCase.Interval) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
      }
      if (fieldBoostCase_ == FieldBoostOneofCase.Element) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Element);
      }
      if (fieldBoostCase_ == FieldBoostOneofCase.Text) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldBoost other) {
      if (other == null) {
        return;
      }
      switch (other.FieldBoostCase) {
        case FieldBoostOneofCase.Filter:
          Filter = other.Filter;
          break;
        case FieldBoostOneofCase.Interval:
          Interval = other.Interval;
          break;
        case FieldBoostOneofCase.Element:
          Element = other.Element;
          break;
        case FieldBoostOneofCase.Text:
          Text = other.Text;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Sajari.Engine.Query.V1.FieldBoost.Types.Filter subBuilder = new global::Sajari.Engine.Query.V1.FieldBoost.Types.Filter();
            if (fieldBoostCase_ == FieldBoostOneofCase.Filter) {
              subBuilder.MergeFrom(Filter);
            }
            input.ReadMessage(subBuilder);
            Filter = subBuilder;
            break;
          }
          case 18: {
            global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval subBuilder = new global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval();
            if (fieldBoostCase_ == FieldBoostOneofCase.Interval) {
              subBuilder.MergeFrom(Interval);
            }
            input.ReadMessage(subBuilder);
            Interval = subBuilder;
            break;
          }
          case 26: {
            global::Sajari.Engine.Query.V1.FieldBoost.Types.Element subBuilder = new global::Sajari.Engine.Query.V1.FieldBoost.Types.Element();
            if (fieldBoostCase_ == FieldBoostOneofCase.Element) {
              subBuilder.MergeFrom(Element);
            }
            input.ReadMessage(subBuilder);
            Element = subBuilder;
            break;
          }
          case 34: {
            global::Sajari.Engine.Query.V1.FieldBoost.Types.Text subBuilder = new global::Sajari.Engine.Query.V1.FieldBoost.Types.Text();
            if (fieldBoostCase_ == FieldBoostOneofCase.Text) {
              subBuilder.MergeFrom(Text);
            }
            input.ReadMessage(subBuilder);
            Text = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FieldBoost message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Filter is a boost applied to records which satisfy a filter.
      /// </summary>
      public sealed partial class Filter : pb::IMessage<Filter> {
        private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Filter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.FieldBoost.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Filter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Filter(Filter other) : this() {
          Filter_ = other.filter_ != null ? other.Filter_.Clone() : null;
          value_ = other.value_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Filter Clone() {
          return new Filter(this);
        }

        /// <summary>Field number for the "filter" field.</summary>
        public const int Filter_FieldNumber = 1;
        private global::Sajari.Engine.Query.V1.Filter filter_;
        /// <summary>
        /// Filter which must be satisfied by record.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Sajari.Engine.Query.V1.Filter Filter_ {
          get { return filter_; }
          set {
            filter_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private double value_;
        /// <summary>
        /// Boost value to apply to matching records. Must be >= 0.
        ///
        /// Value == 0     Matching records get 0 for this boost, everything else gets 1.
        /// Value == 1     Matching records get 1 for this boost, everything else gets 0.
        /// 0 &lt; Value &lt; 1  Matching records get Value for this boost (and are penalised).
        /// Value > 1      Matching records get 1 for this boost, everything else gets 1 / Value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Filter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Filter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Filter_, other.Filter_)) return false;
          if (Value != other.Value) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (filter_ != null) hash ^= Filter_.GetHashCode();
          if (Value != 0D) hash ^= Value.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (filter_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Filter_);
          }
          if (Value != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (filter_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter_);
          }
          if (Value != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Filter other) {
          if (other == null) {
            return;
          }
          if (other.filter_ != null) {
            if (filter_ == null) {
              filter_ = new global::Sajari.Engine.Query.V1.Filter();
            }
            Filter_.MergeFrom(other.Filter_);
          }
          if (other.Value != 0D) {
            Value = other.Value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (filter_ == null) {
                  filter_ = new global::Sajari.Engine.Query.V1.Filter();
                }
                input.ReadMessage(filter_);
                break;
              }
              case 17: {
                Value = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Interval is a distance-based boost for numeric fields.
      ///
      /// It is comprised of a series of points to represent
      /// any linear distribution across a numerical range.
      /// </summary>
      public sealed partial class Interval : pb::IMessage<Interval> {
        private static readonly pb::MessageParser<Interval> _parser = new pb::MessageParser<Interval>(() => new Interval());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Interval> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.FieldBoost.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Interval() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Interval(Interval other) : this() {
          field_ = other.field_;
          points_ = other.points_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Interval Clone() {
          return new Interval(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private string field_ = "";
        /// <summary>
        /// Numerical field to apply the boost.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "points" field.</summary>
        public const int PointsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval.Types.Point> _repeated_points_codec
            = pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval.Types.Point.Parser);
        private readonly pbc::RepeatedField<global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval.Types.Point> points_ = new pbc::RepeatedField<global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval.Types.Point>();
        /// <summary>
        /// Points which define intervals boundaries (must be at least 2).
        /// Values between internal points are determined linearly.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval.Types.Point> Points {
          get { return points_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Interval);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Interval other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Field != other.Field) return false;
          if(!points_.Equals(other.points_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          hash ^= points_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Field.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Field);
          }
          points_.WriteTo(output, _repeated_points_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          size += points_.CalculateSize(_repeated_points_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Interval other) {
          if (other == null) {
            return;
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          points_.Add(other.points_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Field = input.ReadString();
                break;
              }
              case 18: {
                points_.AddEntriesFrom(input, _repeated_points_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Interval message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Point is a pair (point, value) which defines the boost value
          /// at a particiular point.
          /// </summary>
          public sealed partial class Point : pb::IMessage<Point> {
            private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Point> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Sajari.Engine.Query.V1.FieldBoost.Types.Interval.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Point() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Point(Point other) : this() {
              point_ = other.point_;
              value_ = other.value_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Point Clone() {
              return new Point(this);
            }

            /// <summary>Field number for the "point" field.</summary>
            public const int Point_FieldNumber = 1;
            private double point_;
            /// <summary>
            /// The point to mark the beginning/end of an interval.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double Point_ {
              get { return point_; }
              set {
                point_ = value;
              }
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 2;
            private double value_;
            /// <summary>
            /// The amount to boost by at this Point.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double Value {
              get { return value_; }
              set {
                value_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Point);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Point other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Point_ != other.Point_) return false;
              if (Value != other.Value) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Point_ != 0D) hash ^= Point_.GetHashCode();
              if (Value != 0D) hash ^= Value.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Point_ != 0D) {
                output.WriteRawTag(9);
                output.WriteDouble(Point_);
              }
              if (Value != 0D) {
                output.WriteRawTag(17);
                output.WriteDouble(Value);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Point_ != 0D) {
                size += 1 + 8;
              }
              if (Value != 0D) {
                size += 1 + 8;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Point other) {
              if (other == null) {
                return;
              }
              if (other.Point_ != 0D) {
                Point_ = other.Point_;
              }
              if (other.Value != 0D) {
                Value = other.Value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 9: {
                    Point_ = input.ReadDouble();
                    break;
                  }
                  case 17: {
                    Value = input.ReadDouble();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// Element is an element-based boost for repeated fields.
      ///
      /// The boost is evaluated as a portion of a list of values which appear
      /// in the record field.
      ///
      /// Boost effect: between 0 and 1.
      /// </summary>
      public sealed partial class Element : pb::IMessage<Element> {
        private static readonly pb::MessageParser<Element> _parser = new pb::MessageParser<Element>(() => new Element());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Element> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.FieldBoost.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Element() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Element(Element other) : this() {
          field_ = other.field_;
          elts_ = other.elts_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Element Clone() {
          return new Element(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private string field_ = "";
        /// <summary>
        /// Field containing stringArray.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "elts" field.</summary>
        public const int EltsFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_elts_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> elts_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// List of elements to compare against the field values.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Elts {
          get { return elts_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Element);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Element other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Field != other.Field) return false;
          if(!elts_.Equals(other.elts_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          hash ^= elts_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Field.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Field);
          }
          elts_.WriteTo(output, _repeated_elts_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          size += elts_.CalculateSize(_repeated_elts_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Element other) {
          if (other == null) {
            return;
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          elts_.Add(other.elts_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Field = input.ReadString();
                break;
              }
              case 26: {
                elts_.AddEntriesFrom(input, _repeated_elts_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Text represents a text-based boosting for string fields.
      ///
      /// Compares text (using a bag of words model) and applies a boost based on the
      /// number of intersecting words.
      ///
      /// Boost effect: between 0 and 1.
      /// </summary>
      public sealed partial class Text : pb::IMessage<Text> {
        private static readonly pb::MessageParser<Text> _parser = new pb::MessageParser<Text>(() => new Text());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Text> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.FieldBoost.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Text() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Text(Text other) : this() {
          field_ = other.field_;
          text_ = other.text_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Text Clone() {
          return new Text(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private string field_ = "";
        /// <summary>
        /// Field containing string data.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int Text_FieldNumber = 3;
        private string text_ = "";
        /// <summary>
        /// Text to compare against the field value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text_ {
          get { return text_; }
          set {
            text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Text);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Text other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Field != other.Field) return false;
          if (Text_ != other.Text_) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          if (Text_.Length != 0) hash ^= Text_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Field.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Field);
          }
          if (Text_.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Text_);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          if (Text_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Text_);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Text other) {
          if (other == null) {
            return;
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          if (other.Text_.Length != 0) {
            Text_ = other.Text_;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Field = input.ReadString();
                break;
              }
              case 26: {
                Text_ = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// InstanceBoost represents a boosting which is a applied to instances of terms
  /// in the reverse index.  This type of boost effectively dynamically ranks
  /// records for a given term
  /// </summary>
  public sealed partial class InstanceBoost : pb::IMessage<InstanceBoost> {
    private static readonly pb::MessageParser<InstanceBoost> _parser = new pb::MessageParser<InstanceBoost>(() => new InstanceBoost());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstanceBoost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceBoost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceBoost(InstanceBoost other) : this() {
      switch (other.InstanceBoostCase) {
        case InstanceBoostOneofCase.Field:
          Field = other.Field.Clone();
          break;
        case InstanceBoostOneofCase.Score:
          Score = other.Score.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceBoost Clone() {
      return new InstanceBoost(this);
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 1;
    /// <summary>
    /// Field-based instance boosting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.InstanceBoost.Types.Field Field {
      get { return instanceBoostCase_ == InstanceBoostOneofCase.Field ? (global::Sajari.Engine.Query.V1.InstanceBoost.Types.Field) instanceBoost_ : null; }
      set {
        instanceBoost_ = value;
        instanceBoostCase_ = value == null ? InstanceBoostOneofCase.None : InstanceBoostOneofCase.Field;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    /// <summary>
    /// Score-based instance boosting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.InstanceBoost.Types.Score Score {
      get { return instanceBoostCase_ == InstanceBoostOneofCase.Score ? (global::Sajari.Engine.Query.V1.InstanceBoost.Types.Score) instanceBoost_ : null; }
      set {
        instanceBoost_ = value;
        instanceBoostCase_ = value == null ? InstanceBoostOneofCase.None : InstanceBoostOneofCase.Score;
      }
    }

    private object instanceBoost_;
    /// <summary>Enum of possible cases for the "instance_boost" oneof.</summary>
    public enum InstanceBoostOneofCase {
      None = 0,
      Field = 1,
      Score = 2,
    }
    private InstanceBoostOneofCase instanceBoostCase_ = InstanceBoostOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceBoostOneofCase InstanceBoostCase {
      get { return instanceBoostCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInstanceBoost() {
      instanceBoostCase_ = InstanceBoostOneofCase.None;
      instanceBoost_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstanceBoost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstanceBoost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Field, other.Field)) return false;
      if (!object.Equals(Score, other.Score)) return false;
      if (InstanceBoostCase != other.InstanceBoostCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (instanceBoostCase_ == InstanceBoostOneofCase.Field) hash ^= Field.GetHashCode();
      if (instanceBoostCase_ == InstanceBoostOneofCase.Score) hash ^= Score.GetHashCode();
      hash ^= (int) instanceBoostCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (instanceBoostCase_ == InstanceBoostOneofCase.Field) {
        output.WriteRawTag(10);
        output.WriteMessage(Field);
      }
      if (instanceBoostCase_ == InstanceBoostOneofCase.Score) {
        output.WriteRawTag(18);
        output.WriteMessage(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (instanceBoostCase_ == InstanceBoostOneofCase.Field) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
      }
      if (instanceBoostCase_ == InstanceBoostOneofCase.Score) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstanceBoost other) {
      if (other == null) {
        return;
      }
      switch (other.InstanceBoostCase) {
        case InstanceBoostOneofCase.Field:
          Field = other.Field;
          break;
        case InstanceBoostOneofCase.Score:
          Score = other.Score;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Sajari.Engine.Query.V1.InstanceBoost.Types.Field subBuilder = new global::Sajari.Engine.Query.V1.InstanceBoost.Types.Field();
            if (instanceBoostCase_ == InstanceBoostOneofCase.Field) {
              subBuilder.MergeFrom(Field);
            }
            input.ReadMessage(subBuilder);
            Field = subBuilder;
            break;
          }
          case 18: {
            global::Sajari.Engine.Query.V1.InstanceBoost.Types.Score subBuilder = new global::Sajari.Engine.Query.V1.InstanceBoost.Types.Score();
            if (instanceBoostCase_ == InstanceBoostOneofCase.Score) {
              subBuilder.MergeFrom(Score);
            }
            input.ReadMessage(subBuilder);
            Score = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InstanceBoost message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Field is an instance boost which is applied to term instances which originate
      /// from the given meta field.
      /// </summary>
      public sealed partial class Field : pb::IMessage<Field> {
        private static readonly pb::MessageParser<Field> _parser = new pb::MessageParser<Field>(() => new Field());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Field> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.InstanceBoost.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Field() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Field(Field other) : this() {
          field_ = other.field_;
          value_ = other.value_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Field Clone() {
          return new Field(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int Field_FieldNumber = 1;
        private string field_ = "";
        /// <summary>
        /// Field where the term instance was defined.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Field_ {
          get { return field_; }
          set {
            field_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private double value_;
        /// <summary>
        /// Value to boost terms from this field. A value between 0 and 1 will decrease
        /// the score, a value greater than 1 will increase the score.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Field);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Field other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Field_ != other.Field_) return false;
          if (Value != other.Value) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Field_.Length != 0) hash ^= Field_.GetHashCode();
          if (Value != 0D) hash ^= Value.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Field_.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Field_);
          }
          if (Value != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Field_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field_);
          }
          if (Value != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Field other) {
          if (other == null) {
            return;
          }
          if (other.Field_.Length != 0) {
            Field_ = other.Field_;
          }
          if (other.Value != 0D) {
            Value = other.Value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Field_ = input.ReadString();
                break;
              }
              case 17: {
                Value = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Score is an instance boost that boosts term instances based on their individual
      /// scores based on individual interactions.
      /// </summary>
      public sealed partial class Score : pb::IMessage<Score> {
        private static readonly pb::MessageParser<Score> _parser = new pb::MessageParser<Score>(() => new Score());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Score> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.InstanceBoost.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Score() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Score(Score other) : this() {
          threshold_ = other.threshold_;
          minCount_ = other.minCount_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Score Clone() {
          return new Score(this);
        }

        /// <summary>Field number for the "threshold" field.</summary>
        public const int ThresholdFieldNumber = 1;
        private double threshold_;
        /// <summary>
        /// Threshold defines the value after which learning will be applied.  i.e. Only if a learning
        /// score is significant enough to be beyond the threshold will it start to take effect.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Threshold {
          get { return threshold_; }
          set {
            threshold_ = value;
          }
        }

        /// <summary>Field number for the "min_count" field.</summary>
        public const int MinCountFieldNumber = 2;
        private uint minCount_;
        /// <summary>
        /// MinCount is the minimum number of interactions required to enable scoring.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinCount {
          get { return minCount_; }
          set {
            minCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Score);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Score other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Threshold != other.Threshold) return false;
          if (MinCount != other.MinCount) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Threshold != 0D) hash ^= Threshold.GetHashCode();
          if (MinCount != 0) hash ^= MinCount.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Threshold != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Threshold);
          }
          if (MinCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(MinCount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Threshold != 0D) {
            size += 1 + 8;
          }
          if (MinCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinCount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Score other) {
          if (other == null) {
            return;
          }
          if (other.Threshold != 0D) {
            Threshold = other.Threshold;
          }
          if (other.MinCount != 0) {
            MinCount = other.MinCount;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                Threshold = input.ReadDouble();
                break;
              }
              case 16: {
                MinCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// AggregateResponse contains statistical information representing aggregation results
  /// </summary>
  public sealed partial class AggregateResponse : pb::IMessage<AggregateResponse> {
    private static readonly pb::MessageParser<AggregateResponse> _parser = new pb::MessageParser<AggregateResponse>(() => new AggregateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AggregateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregateResponse(AggregateResponse other) : this() {
      switch (other.AggregateResponseCase) {
        case AggregateResponseOneofCase.Metric:
          Metric = other.Metric.Clone();
          break;
        case AggregateResponseOneofCase.Count:
          Count = other.Count.Clone();
          break;
        case AggregateResponseOneofCase.Buckets:
          Buckets = other.Buckets.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregateResponse Clone() {
      return new AggregateResponse(this);
    }

    /// <summary>Field number for the "metric" field.</summary>
    public const int MetricFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.AggregateResponse.Types.Metric Metric {
      get { return aggregateResponseCase_ == AggregateResponseOneofCase.Metric ? (global::Sajari.Engine.Query.V1.AggregateResponse.Types.Metric) aggregateResponse_ : null; }
      set {
        aggregateResponse_ = value;
        aggregateResponseCase_ = value == null ? AggregateResponseOneofCase.None : AggregateResponseOneofCase.Metric;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.AggregateResponse.Types.Count Count {
      get { return aggregateResponseCase_ == AggregateResponseOneofCase.Count ? (global::Sajari.Engine.Query.V1.AggregateResponse.Types.Count) aggregateResponse_ : null; }
      set {
        aggregateResponse_ = value;
        aggregateResponseCase_ = value == null ? AggregateResponseOneofCase.None : AggregateResponseOneofCase.Count;
      }
    }

    /// <summary>Field number for the "buckets" field.</summary>
    public const int BucketsFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets Buckets {
      get { return aggregateResponseCase_ == AggregateResponseOneofCase.Buckets ? (global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets) aggregateResponse_ : null; }
      set {
        aggregateResponse_ = value;
        aggregateResponseCase_ = value == null ? AggregateResponseOneofCase.None : AggregateResponseOneofCase.Buckets;
      }
    }

    private object aggregateResponse_;
    /// <summary>Enum of possible cases for the "aggregate_response" oneof.</summary>
    public enum AggregateResponseOneofCase {
      None = 0,
      Metric = 1,
      Count = 2,
      Buckets = 3,
    }
    private AggregateResponseOneofCase aggregateResponseCase_ = AggregateResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregateResponseOneofCase AggregateResponseCase {
      get { return aggregateResponseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAggregateResponse() {
      aggregateResponseCase_ = AggregateResponseOneofCase.None;
      aggregateResponse_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AggregateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AggregateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metric, other.Metric)) return false;
      if (!object.Equals(Count, other.Count)) return false;
      if (!object.Equals(Buckets, other.Buckets)) return false;
      if (AggregateResponseCase != other.AggregateResponseCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (aggregateResponseCase_ == AggregateResponseOneofCase.Metric) hash ^= Metric.GetHashCode();
      if (aggregateResponseCase_ == AggregateResponseOneofCase.Count) hash ^= Count.GetHashCode();
      if (aggregateResponseCase_ == AggregateResponseOneofCase.Buckets) hash ^= Buckets.GetHashCode();
      hash ^= (int) aggregateResponseCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (aggregateResponseCase_ == AggregateResponseOneofCase.Metric) {
        output.WriteRawTag(10);
        output.WriteMessage(Metric);
      }
      if (aggregateResponseCase_ == AggregateResponseOneofCase.Count) {
        output.WriteRawTag(18);
        output.WriteMessage(Count);
      }
      if (aggregateResponseCase_ == AggregateResponseOneofCase.Buckets) {
        output.WriteRawTag(26);
        output.WriteMessage(Buckets);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (aggregateResponseCase_ == AggregateResponseOneofCase.Metric) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metric);
      }
      if (aggregateResponseCase_ == AggregateResponseOneofCase.Count) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Count);
      }
      if (aggregateResponseCase_ == AggregateResponseOneofCase.Buckets) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buckets);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AggregateResponse other) {
      if (other == null) {
        return;
      }
      switch (other.AggregateResponseCase) {
        case AggregateResponseOneofCase.Metric:
          Metric = other.Metric;
          break;
        case AggregateResponseOneofCase.Count:
          Count = other.Count;
          break;
        case AggregateResponseOneofCase.Buckets:
          Buckets = other.Buckets;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Sajari.Engine.Query.V1.AggregateResponse.Types.Metric subBuilder = new global::Sajari.Engine.Query.V1.AggregateResponse.Types.Metric();
            if (aggregateResponseCase_ == AggregateResponseOneofCase.Metric) {
              subBuilder.MergeFrom(Metric);
            }
            input.ReadMessage(subBuilder);
            Metric = subBuilder;
            break;
          }
          case 18: {
            global::Sajari.Engine.Query.V1.AggregateResponse.Types.Count subBuilder = new global::Sajari.Engine.Query.V1.AggregateResponse.Types.Count();
            if (aggregateResponseCase_ == AggregateResponseOneofCase.Count) {
              subBuilder.MergeFrom(Count);
            }
            input.ReadMessage(subBuilder);
            Count = subBuilder;
            break;
          }
          case 26: {
            global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets subBuilder = new global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets();
            if (aggregateResponseCase_ == AggregateResponseOneofCase.Buckets) {
              subBuilder.MergeFrom(Buckets);
            }
            input.ReadMessage(subBuilder);
            Buckets = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AggregateResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Metric represents the metric type requested, represented by an Enumeration Type.
      /// </summary>
      public sealed partial class Metric : pb::IMessage<Metric> {
        private static readonly pb::MessageParser<Metric> _parser = new pb::MessageParser<Metric>(() => new Metric());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Metric> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.AggregateResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Metric() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Metric(Metric other) : this() {
          value_ = other.value_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Metric Clone() {
          return new Metric(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private double value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Metric);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Metric other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Value != other.Value) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Value != 0D) hash ^= Value.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Value != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Value != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Metric other) {
          if (other == null) {
            return;
          }
          if (other.Value != 0D) {
            Value = other.Value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                Value = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Count contains the counts for the set of values returned
      /// </summary>
      public sealed partial class Count : pb::IMessage<Count> {
        private static readonly pb::MessageParser<Count> _parser = new pb::MessageParser<Count>(() => new Count());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Count> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.AggregateResponse.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Count() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Count(Count other) : this() {
          counts_ = other.counts_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Count Clone() {
          return new Count(this);
        }

        /// <summary>Field number for the "counts" field.</summary>
        public const int CountsFieldNumber = 1;
        private static readonly pbc::MapField<string, int>.Codec _map_counts_codec
            = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 10);
        private readonly pbc::MapField<string, int> counts_ = new pbc::MapField<string, int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, int> Counts {
          get { return counts_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Count);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Count other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!Counts.Equals(other.Counts)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= Counts.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          counts_.WriteTo(output, _map_counts_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += counts_.CalculateSize(_map_counts_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Count other) {
          if (other == null) {
            return;
          }
          counts_.Add(other.counts_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                counts_.AddEntriesFrom(input, _map_counts_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Buckets is a full set of buckets computed in an aggregation.
      /// </summary>
      public sealed partial class Buckets : pb::IMessage<Buckets> {
        private static readonly pb::MessageParser<Buckets> _parser = new pb::MessageParser<Buckets>(() => new Buckets());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Buckets> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.AggregateResponse.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Buckets() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Buckets(Buckets other) : this() {
          buckets_ = other.buckets_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Buckets Clone() {
          return new Buckets(this);
        }

        /// <summary>Field number for the "buckets" field.</summary>
        public const int Buckets_FieldNumber = 1;
        private static readonly pbc::MapField<string, global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets.Types.Bucket>.Codec _map_buckets_codec
            = new pbc::MapField<string, global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets.Types.Bucket>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets.Types.Bucket.Parser), 10);
        private readonly pbc::MapField<string, global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets.Types.Bucket> buckets_ = new pbc::MapField<string, global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets.Types.Bucket>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets.Types.Bucket> Buckets_ {
          get { return buckets_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Buckets);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Buckets other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!Buckets_.Equals(other.Buckets_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= Buckets_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          buckets_.WriteTo(output, _map_buckets_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += buckets_.CalculateSize(_map_buckets_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Buckets other) {
          if (other == null) {
            return;
          }
          buckets_.Add(other.buckets_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                buckets_.AddEntriesFrom(input, _map_buckets_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Buckets message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Bucket is the result of a bucket aggregate.
          /// </summary>
          public sealed partial class Bucket : pb::IMessage<Bucket> {
            private static readonly pb::MessageParser<Bucket> _parser = new pb::MessageParser<Bucket>(() => new Bucket());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Bucket> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Sajari.Engine.Query.V1.AggregateResponse.Types.Buckets.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Bucket() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Bucket(Bucket other) : this() {
              name_ = other.name_;
              count_ = other.count_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Bucket Clone() {
              return new Bucket(this);
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 1;
            private string name_ = "";
            /// <summary>
            /// Name of bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "count" field.</summary>
            public const int CountFieldNumber = 2;
            private int count_;
            /// <summary>
            /// Number of records in the bucket.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Count {
              get { return count_; }
              set {
                count_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Bucket);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Bucket other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Name != other.Name) return false;
              if (Count != other.Count) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (Count != 0) hash ^= Count.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Name.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Name);
              }
              if (Count != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Count);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (Count != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Bucket other) {
              if (other == null) {
                return;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              if (other.Count != 0) {
                Count = other.Count;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    Name = input.ReadString();
                    break;
                  }
                  case 16: {
                    Count = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// Analysis
      /// </summary>
      public sealed partial class Analysis : pb::IMessage<Analysis> {
        private static readonly pb::MessageParser<Analysis> _parser = new pb::MessageParser<Analysis>(() => new Analysis());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Analysis> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.AggregateResponse.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Analysis() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Analysis(Analysis other) : this() {
          floatValue_ = other.floatValue_;
          intValue_ = other.intValue_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Analysis Clone() {
          return new Analysis(this);
        }

        /// <summary>Field number for the "floatValue" field.</summary>
        public const int FloatValueFieldNumber = 1;
        private double floatValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double FloatValue {
          get { return floatValue_; }
          set {
            floatValue_ = value;
          }
        }

        /// <summary>Field number for the "intValue" field.</summary>
        public const int IntValueFieldNumber = 2;
        private long intValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long IntValue {
          get { return intValue_; }
          set {
            intValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Analysis);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Analysis other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FloatValue != other.FloatValue) return false;
          if (IntValue != other.IntValue) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FloatValue != 0D) hash ^= FloatValue.GetHashCode();
          if (IntValue != 0L) hash ^= IntValue.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FloatValue != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(FloatValue);
          }
          if (IntValue != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(IntValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FloatValue != 0D) {
            size += 1 + 8;
          }
          if (IntValue != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntValue);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Analysis other) {
          if (other == null) {
            return;
          }
          if (other.FloatValue != 0D) {
            FloatValue = other.FloatValue;
          }
          if (other.IntValue != 0L) {
            IntValue = other.IntValue;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                FloatValue = input.ReadDouble();
                break;
              }
              case 16: {
                IntValue = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// SearchResponse contains all data in response to a search request.
  /// </summary>
  public sealed partial class SearchResponse : pb::IMessage<SearchResponse> {
    private static readonly pb::MessageParser<SearchResponse> _parser = new pb::MessageParser<SearchResponse>(() => new SearchResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResponse(SearchResponse other) : this() {
      reads_ = other.reads_;
      totalResults_ = other.totalResults_;
      time_ = other.time_;
      aggregates_ = other.aggregates_.Clone();
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResponse Clone() {
      return new SearchResponse(this);
    }

    /// <summary>Field number for the "reads" field.</summary>
    public const int ReadsFieldNumber = 1;
    private long reads_;
    /// <summary>
    /// Number of reverse indexes read during the search request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Reads {
      get { return reads_; }
      set {
        reads_ = value;
      }
    }

    /// <summary>Field number for the "total_results" field.</summary>
    public const int TotalResultsFieldNumber = 2;
    private long totalResults_;
    /// <summary>
    /// Total number of results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalResults {
      get { return totalResults_; }
      set {
        totalResults_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private string time_ = "";
    /// <summary>
    /// Time taken to perform query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aggregates" field.</summary>
    public const int AggregatesFieldNumber = 4;
    private static readonly pbc::MapField<string, global::Sajari.Engine.Query.V1.AggregateResponse>.Codec _map_aggregates_codec
        = new pbc::MapField<string, global::Sajari.Engine.Query.V1.AggregateResponse>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Query.V1.AggregateResponse.Parser), 34);
    private readonly pbc::MapField<string, global::Sajari.Engine.Query.V1.AggregateResponse> aggregates_ = new pbc::MapField<string, global::Sajari.Engine.Query.V1.AggregateResponse>();
    /// <summary>
    /// Aggregates returned by query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Sajari.Engine.Query.V1.AggregateResponse> Aggregates {
      get { return aggregates_; }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Query.V1.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(42, global::Sajari.Engine.Query.V1.Result.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Query.V1.Result> results_ = new pbc::RepeatedField<global::Sajari.Engine.Query.V1.Result>();
    /// <summary>
    /// Results returned by query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Query.V1.Result> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reads != other.Reads) return false;
      if (TotalResults != other.TotalResults) return false;
      if (Time != other.Time) return false;
      if (!Aggregates.Equals(other.Aggregates)) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reads != 0L) hash ^= Reads.GetHashCode();
      if (TotalResults != 0L) hash ^= TotalResults.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      hash ^= Aggregates.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reads != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Reads);
      }
      if (TotalResults != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalResults);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Time);
      }
      aggregates_.WriteTo(output, _map_aggregates_codec);
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reads != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reads);
      }
      if (TotalResults != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalResults);
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      size += aggregates_.CalculateSize(_map_aggregates_codec);
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchResponse other) {
      if (other == null) {
        return;
      }
      if (other.Reads != 0L) {
        Reads = other.Reads;
      }
      if (other.TotalResults != 0L) {
        TotalResults = other.TotalResults;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      aggregates_.Add(other.aggregates_);
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Reads = input.ReadInt64();
            break;
          }
          case 16: {
            TotalResults = input.ReadInt64();
            break;
          }
          case 26: {
            Time = input.ReadString();
            break;
          }
          case 34: {
            aggregates_.AddEntriesFrom(input, _map_aggregates_codec);
            break;
          }
          case 42: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result is a record as represented in a search result.
  /// </summary>
  public sealed partial class Result : pb::IMessage<Result> {
    private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result(Result other) : this() {
      values_ = other.values_.Clone();
      score_ = other.score_;
      indexScore_ = other.indexScore_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result Clone() {
      return new Result(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Sajari.Engine.Value>.Codec _map_values_codec
        = new pbc::MapField<string, global::Sajari.Engine.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Value.Parser), 10);
    private readonly pbc::MapField<string, global::Sajari.Engine.Value> values_ = new pbc::MapField<string, global::Sajari.Engine.Value>();
    /// <summary>
    /// Meta data in field-value pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Sajari.Engine.Value> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private double score_;
    /// <summary>
    /// Score (normalised) attributed to this record.
    /// Combines the index score and feature score.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "index_score" field.</summary>
    public const int IndexScoreFieldNumber = 3;
    private double indexScore_;
    /// <summary>
    /// Index score.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IndexScore {
      get { return indexScore_; }
      set {
        indexScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Values.Equals(other.Values)) return false;
      if (Score != other.Score) return false;
      if (IndexScore != other.IndexScore) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Values.GetHashCode();
      if (Score != 0D) hash ^= Score.GetHashCode();
      if (IndexScore != 0D) hash ^= IndexScore.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _map_values_codec);
      if (Score != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Score);
      }
      if (IndexScore != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(IndexScore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_map_values_codec);
      if (Score != 0D) {
        size += 1 + 8;
      }
      if (IndexScore != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Result other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      if (other.Score != 0D) {
        Score = other.Score;
      }
      if (other.IndexScore != 0D) {
        IndexScore = other.IndexScore;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _map_values_codec);
            break;
          }
          case 17: {
            Score = input.ReadDouble();
            break;
          }
          case 25: {
            IndexScore = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// AnalyseRequest applies a search request to a record.
  /// </summary>
  public sealed partial class AnalyseRequest : pb::IMessage<AnalyseRequest> {
    private static readonly pb::MessageParser<AnalyseRequest> _parser = new pb::MessageParser<AnalyseRequest>(() => new AnalyseRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyseRequest(AnalyseRequest other) : this() {
      SearchRequest = other.searchRequest_ != null ? other.SearchRequest.Clone() : null;
      keys_ = other.keys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyseRequest Clone() {
      return new AnalyseRequest(this);
    }

    /// <summary>Field number for the "search_request" field.</summary>
    public const int SearchRequestFieldNumber = 1;
    private global::Sajari.Engine.Query.V1.SearchRequest searchRequest_;
    /// <summary>
    /// Request is a search request which should be applied against a record
    /// in the store.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sajari.Engine.Query.V1.SearchRequest SearchRequest {
      get { return searchRequest_; }
      set {
        searchRequest_ = value;
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Key> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(18, global::Sajari.Engine.Key.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Key> keys_ = new pbc::RepeatedField<global::Sajari.Engine.Key>();
    /// <summary>
    /// Key is a unique identifier corresponding to a record in the store.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Key> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SearchRequest, other.SearchRequest)) return false;
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (searchRequest_ != null) hash ^= SearchRequest.GetHashCode();
      hash ^= keys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (searchRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SearchRequest);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (searchRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchRequest);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyseRequest other) {
      if (other == null) {
        return;
      }
      if (other.searchRequest_ != null) {
        if (searchRequest_ == null) {
          searchRequest_ = new global::Sajari.Engine.Query.V1.SearchRequest();
        }
        SearchRequest.MergeFrom(other.SearchRequest);
      }
      keys_.Add(other.keys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (searchRequest_ == null) {
              searchRequest_ = new global::Sajari.Engine.Query.V1.SearchRequest();
            }
            input.ReadMessage(searchRequest_);
            break;
          }
          case 18: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// AnalyseResponse contains the analysis of the record against the query
  /// request.
  /// </summary>
  public sealed partial class AnalyseResponse : pb::IMessage<AnalyseResponse> {
    private static readonly pb::MessageParser<AnalyseResponse> _parser = new pb::MessageParser<AnalyseResponse>(() => new AnalyseResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Engine.Query.V1.QueryReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyseResponse(AnalyseResponse other) : this() {
      terms_ = other.terms_.Clone();
      status_ = other.status_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyseResponse Clone() {
      return new AnalyseResponse(this);
    }

    /// <summary>Field number for the "terms" field.</summary>
    public const int TermsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Engine.Query.V1.AnalyseResponse.Types.Terms> _repeated_terms_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Engine.Query.V1.AnalyseResponse.Types.Terms.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Engine.Query.V1.AnalyseResponse.Types.Terms> terms_ = new pbc::RepeatedField<global::Sajari.Engine.Query.V1.AnalyseResponse.Types.Terms>();
    /// <summary>
    /// Terms is the list of intersecting terms between the record and the
    /// search query request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Engine.Query.V1.AnalyseResponse.Types.Terms> Terms {
      get { return terms_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Sajari.Rpc.Status> _repeated_status_codec
        = pb::FieldCodec.ForMessage(18, global::Sajari.Rpc.Status.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Rpc.Status> status_ = new pbc::RepeatedField<global::Sajari.Rpc.Status>();
    /// <summary>
    /// Status corresponding to each key in the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Rpc.Status> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!terms_.Equals(other.terms_)) return false;
      if(!status_.Equals(other.status_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= terms_.GetHashCode();
      hash ^= status_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      terms_.WriteTo(output, _repeated_terms_codec);
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += terms_.CalculateSize(_repeated_terms_codec);
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyseResponse other) {
      if (other == null) {
        return;
      }
      terms_.Add(other.terms_);
      status_.Add(other.status_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            terms_.AddEntriesFrom(input, _repeated_terms_codec);
            break;
          }
          case 18: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AnalyseResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Terms is a list of terms which overlap for a particular record.
      /// </summary>
      public sealed partial class Terms : pb::IMessage<Terms> {
        private static readonly pb::MessageParser<Terms> _parser = new pb::MessageParser<Terms>(() => new Terms());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Terms> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sajari.Engine.Query.V1.AnalyseResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Terms() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Terms(Terms other) : this() {
          terms_ = other.terms_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Terms Clone() {
          return new Terms(this);
        }

        /// <summary>Field number for the "terms" field.</summary>
        public const int Terms_FieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_terms_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> terms_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Terms_ {
          get { return terms_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Terms);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Terms other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!terms_.Equals(other.terms_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= terms_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          terms_.WriteTo(output, _repeated_terms_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += terms_.CalculateSize(_repeated_terms_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Terms other) {
          if (other == null) {
            return;
          }
          terms_.Add(other.terms_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                terms_.AddEntriesFrom(input, _repeated_terms_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
