// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sajari/bayes/trainingset/trainingset.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Sajari.Bayes.Trainingset {
  /// <summary>
  ///  TrainingSet defines methods used to interact with the bayes training set service
  /// </summary>
  public static class TrainingSet
  {
    static readonly string __ServiceName = "sajari.bayes.trainingset.TrainingSet";

    static readonly Marshaller<global::Sajari.Bayes.Trainingset.UploadRequest> __Marshaller_UploadRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Bayes.Trainingset.UploadRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Sajari.Bayes.Trainingset.UploadResponse> __Marshaller_UploadResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Bayes.Trainingset.UploadResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Sajari.Bayes.Trainingset.CreateRequest> __Marshaller_CreateRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Bayes.Trainingset.CreateRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Sajari.Rpc.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Rpc.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Sajari.Bayes.Trainingset.InfoRequest> __Marshaller_InfoRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Bayes.Trainingset.InfoRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Sajari.Bayes.Trainingset.InfoResponse> __Marshaller_InfoResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Bayes.Trainingset.InfoResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Sajari.Bayes.Trainingset.AddClassRequest> __Marshaller_AddClassRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Bayes.Trainingset.AddClassRequest.Parser.ParseFrom);

    static readonly Method<global::Sajari.Bayes.Trainingset.UploadRequest, global::Sajari.Bayes.Trainingset.UploadResponse> __Method_Upload = new Method<global::Sajari.Bayes.Trainingset.UploadRequest, global::Sajari.Bayes.Trainingset.UploadResponse>(
        MethodType.Unary,
        __ServiceName,
        "Upload",
        __Marshaller_UploadRequest,
        __Marshaller_UploadResponse);

    static readonly Method<global::Sajari.Bayes.Trainingset.CreateRequest, global::Sajari.Rpc.Empty> __Method_Create = new Method<global::Sajari.Bayes.Trainingset.CreateRequest, global::Sajari.Rpc.Empty>(
        MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_CreateRequest,
        __Marshaller_Empty);

    static readonly Method<global::Sajari.Bayes.Trainingset.InfoRequest, global::Sajari.Bayes.Trainingset.InfoResponse> __Method_Info = new Method<global::Sajari.Bayes.Trainingset.InfoRequest, global::Sajari.Bayes.Trainingset.InfoResponse>(
        MethodType.Unary,
        __ServiceName,
        "Info",
        __Marshaller_InfoRequest,
        __Marshaller_InfoResponse);

    static readonly Method<global::Sajari.Bayes.Trainingset.AddClassRequest, global::Sajari.Rpc.Empty> __Method_AddClass = new Method<global::Sajari.Bayes.Trainingset.AddClassRequest, global::Sajari.Rpc.Empty>(
        MethodType.Unary,
        __ServiceName,
        "AddClass",
        __Marshaller_AddClassRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sajari.Bayes.Trainingset.TrainingsetReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TrainingSet</summary>
    public abstract class TrainingSetBase
    {
      /// <summary>
      ///  Uploads a training/testing document for the specified training set name and known class name
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Sajari.Bayes.Trainingset.UploadResponse> Upload(global::Sajari.Bayes.Trainingset.UploadRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Creates a new training set
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Sajari.Rpc.Empty> Create(global::Sajari.Bayes.Trainingset.CreateRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Returns information on the specified training est
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Sajari.Bayes.Trainingset.InfoResponse> Info(global::Sajari.Bayes.Trainingset.InfoRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Adds a new class to the training set
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Sajari.Rpc.Empty> AddClass(global::Sajari.Bayes.Trainingset.AddClassRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TrainingSet</summary>
    public class TrainingSetClient : ClientBase<TrainingSetClient>
    {
      /// <summary>Creates a new client for TrainingSet</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TrainingSetClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TrainingSet that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TrainingSetClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TrainingSetClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TrainingSetClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Uploads a training/testing document for the specified training set name and known class name
      /// </summary>
      public virtual global::Sajari.Bayes.Trainingset.UploadResponse Upload(global::Sajari.Bayes.Trainingset.UploadRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Upload(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Uploads a training/testing document for the specified training set name and known class name
      /// </summary>
      public virtual global::Sajari.Bayes.Trainingset.UploadResponse Upload(global::Sajari.Bayes.Trainingset.UploadRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Upload, null, options, request);
      }
      /// <summary>
      ///  Uploads a training/testing document for the specified training set name and known class name
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Bayes.Trainingset.UploadResponse> UploadAsync(global::Sajari.Bayes.Trainingset.UploadRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UploadAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Uploads a training/testing document for the specified training set name and known class name
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Bayes.Trainingset.UploadResponse> UploadAsync(global::Sajari.Bayes.Trainingset.UploadRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Upload, null, options, request);
      }
      /// <summary>
      ///  Creates a new training set
      /// </summary>
      public virtual global::Sajari.Rpc.Empty Create(global::Sajari.Bayes.Trainingset.CreateRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Create(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a new training set
      /// </summary>
      public virtual global::Sajari.Rpc.Empty Create(global::Sajari.Bayes.Trainingset.CreateRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      /// <summary>
      ///  Creates a new training set
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Rpc.Empty> CreateAsync(global::Sajari.Bayes.Trainingset.CreateRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a new training set
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Rpc.Empty> CreateAsync(global::Sajari.Bayes.Trainingset.CreateRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      /// <summary>
      ///  Returns information on the specified training est
      /// </summary>
      public virtual global::Sajari.Bayes.Trainingset.InfoResponse Info(global::Sajari.Bayes.Trainingset.InfoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Info(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns information on the specified training est
      /// </summary>
      public virtual global::Sajari.Bayes.Trainingset.InfoResponse Info(global::Sajari.Bayes.Trainingset.InfoRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Info, null, options, request);
      }
      /// <summary>
      ///  Returns information on the specified training est
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Bayes.Trainingset.InfoResponse> InfoAsync(global::Sajari.Bayes.Trainingset.InfoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InfoAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns information on the specified training est
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Bayes.Trainingset.InfoResponse> InfoAsync(global::Sajari.Bayes.Trainingset.InfoRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Info, null, options, request);
      }
      /// <summary>
      ///  Adds a new class to the training set
      /// </summary>
      public virtual global::Sajari.Rpc.Empty AddClass(global::Sajari.Bayes.Trainingset.AddClassRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddClass(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds a new class to the training set
      /// </summary>
      public virtual global::Sajari.Rpc.Empty AddClass(global::Sajari.Bayes.Trainingset.AddClassRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddClass, null, options, request);
      }
      /// <summary>
      ///  Adds a new class to the training set
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Rpc.Empty> AddClassAsync(global::Sajari.Bayes.Trainingset.AddClassRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddClassAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds a new class to the training set
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Rpc.Empty> AddClassAsync(global::Sajari.Bayes.Trainingset.AddClassRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddClass, null, options, request);
      }
      protected override TrainingSetClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TrainingSetClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(TrainingSetBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Upload, serviceImpl.Upload)
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Info, serviceImpl.Info)
          .AddMethod(__Method_AddClass, serviceImpl.AddClass).Build();
    }

  }
}
#endregion
