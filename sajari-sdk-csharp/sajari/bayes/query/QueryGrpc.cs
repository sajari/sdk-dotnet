// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sajari/bayes/query/query.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Sajari.Bayes.Query {
  /// <summary>
  ///  Query defines methods used to interact with the bayes query service.
  /// </summary>
  public static class Query
  {
    static readonly string __ServiceName = "sajari.bayes.query.Query";

    static readonly Marshaller<global::Sajari.Bayes.Query.Request> __Marshaller_Request = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Bayes.Query.Request.Parser.ParseFrom);
    static readonly Marshaller<global::Sajari.Bayes.Query.Response> __Marshaller_Response = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sajari.Bayes.Query.Response.Parser.ParseFrom);

    static readonly Method<global::Sajari.Bayes.Query.Request, global::Sajari.Bayes.Query.Response> __Method_Query = new Method<global::Sajari.Bayes.Query.Request, global::Sajari.Bayes.Query.Response>(
        MethodType.Unary,
        __ServiceName,
        "Query",
        __Marshaller_Request,
        __Marshaller_Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sajari.Bayes.Query.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Query</summary>
    public abstract class QueryBase
    {
      /// <summary>
      ///  Query takes a model name and an array of strings and returns a naive bayes
      ///  based classification for the request data using the model specified.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Sajari.Bayes.Query.Response> Query(global::Sajari.Bayes.Query.Request request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Query</summary>
    public class QueryClient : ClientBase<QueryClient>
    {
      /// <summary>Creates a new client for Query</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public QueryClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Query that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public QueryClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected QueryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected QueryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Query takes a model name and an array of strings and returns a naive bayes
      ///  based classification for the request data using the model specified.
      /// </summary>
      public virtual global::Sajari.Bayes.Query.Response Query(global::Sajari.Bayes.Query.Request request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Query(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Query takes a model name and an array of strings and returns a naive bayes
      ///  based classification for the request data using the model specified.
      /// </summary>
      public virtual global::Sajari.Bayes.Query.Response Query(global::Sajari.Bayes.Query.Request request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Query, null, options, request);
      }
      /// <summary>
      ///  Query takes a model name and an array of strings and returns a naive bayes
      ///  based classification for the request data using the model specified.
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Bayes.Query.Response> QueryAsync(global::Sajari.Bayes.Query.Request request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Query takes a model name and an array of strings and returns a naive bayes
      ///  based classification for the request data using the model specified.
      /// </summary>
      public virtual AsyncUnaryCall<global::Sajari.Bayes.Query.Response> QueryAsync(global::Sajari.Bayes.Query.Request request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Query, null, options, request);
      }
      protected override QueryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(QueryBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Query, serviceImpl.Query).Build();
    }

  }
}
#endregion
