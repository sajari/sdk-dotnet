// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sajari/bayes/train/train.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sajari.Bayes.Train {

  /// <summary>Holder for reflection information generated from sajari/bayes/train/train.proto</summary>
  public static partial class TrainReflection {

    #region Descriptor
    /// <summary>File descriptor for sajari/bayes/train/train.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrainReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5zYWphcmkvYmF5ZXMvdHJhaW4vdHJhaW4ucHJvdG8SEnNhamFyaS5iYXll",
            "cy50cmFpbiImCgdSZXF1ZXN0EgwKBG5hbWUYASABKAkSDQoFbW9kZWwYAiAB",
            "KAkiOgoKQ2xhc3NFcnJvchIQCghleHBlY3RlZBgBIAEoCRILCgNnb3QYAiAB",
            "KAkSDQoFY291bnQYAyABKA0iXgoIUmVzcG9uc2USLgoGZXJyb3JzGAEgAygL",
            "Mh4uc2FqYXJpLmJheWVzLnRyYWluLkNsYXNzRXJyb3ISDwoHY29ycmVjdBgC",
            "IAEoDRIRCglpbmNvcnJlY3QYAyABKA0ySwoFVHJhaW4SQgoFVHJhaW4SGy5z",
            "YWphcmkuYmF5ZXMudHJhaW4uUmVxdWVzdBocLnNhamFyaS5iYXllcy50cmFp",
            "bi5SZXNwb25zZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Bayes.Train.Request), global::Sajari.Bayes.Train.Request.Parser, new[]{ "Name", "Model" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Bayes.Train.ClassError), global::Sajari.Bayes.Train.ClassError.Parser, new[]{ "Expected", "Got", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sajari.Bayes.Train.Response), global::Sajari.Bayes.Train.Response.Parser, new[]{ "Errors", "Correct", "Incorrect" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Request contains the name of the training set to use to train the model
  /// and a model name to create from the set. This allows the same training
  /// set to be continually modified without overwriting previously created
  /// models
  /// </summary>
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Bayes.Train.TrainReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      name_ = other.name_;
      model_ = other.model_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the training set to use for training
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 2;
    private string model_ = "";
    /// <summary>
    /// model to save once the training is complete
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Model != other.Model) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Model);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Model = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ClassError returns the number of successful and unsuccessful classifications
  /// for each class in the model. This is useful for determining common error
  /// classes, which indicates overlapping probability of neighbouring classes
  /// </summary>
  public sealed partial class ClassError : pb::IMessage<ClassError> {
    private static readonly pb::MessageParser<ClassError> _parser = new pb::MessageParser<ClassError>(() => new ClassError());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClassError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Bayes.Train.TrainReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassError(ClassError other) : this() {
      expected_ = other.expected_;
      got_ = other.got_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassError Clone() {
      return new ClassError(this);
    }

    /// <summary>Field number for the "expected" field.</summary>
    public const int ExpectedFieldNumber = 1;
    private string expected_ = "";
    /// <summary>
    /// Expected is the known class we are expecting to see
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Expected {
      get { return expected_; }
      set {
        expected_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "got" field.</summary>
    public const int GotFieldNumber = 2;
    private string got_ = "";
    /// <summary>
    /// Got is the class we actually predicted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Got {
      get { return got_; }
      set {
        got_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    /// <summary>
    /// Count is the number of expected-got pairs observed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClassError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClassError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Expected != other.Expected) return false;
      if (Got != other.Got) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Expected.Length != 0) hash ^= Expected.GetHashCode();
      if (Got.Length != 0) hash ^= Got.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Expected.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Expected);
      }
      if (Got.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Got);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Expected.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Expected);
      }
      if (Got.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Got);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClassError other) {
      if (other == null) {
        return;
      }
      if (other.Expected.Length != 0) {
        Expected = other.Expected;
      }
      if (other.Got.Length != 0) {
        Got = other.Got;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Expected = input.ReadString();
            break;
          }
          case 18: {
            Got = input.ReadString();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response contains information on a training run with regards to accuracy
  /// </summary>
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sajari.Bayes.Train.TrainReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      errors_ = other.errors_.Clone();
      correct_ = other.correct_;
      incorrect_ = other.incorrect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Sajari.Bayes.Train.ClassError> _repeated_errors_codec
        = pb::FieldCodec.ForMessage(10, global::Sajari.Bayes.Train.ClassError.Parser);
    private readonly pbc::RepeatedField<global::Sajari.Bayes.Train.ClassError> errors_ = new pbc::RepeatedField<global::Sajari.Bayes.Train.ClassError>();
    /// <summary>
    /// Errors contains an array of ClassError describing the training success/failure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Sajari.Bayes.Train.ClassError> Errors {
      get { return errors_; }
    }

    /// <summary>Field number for the "correct" field.</summary>
    public const int CorrectFieldNumber = 2;
    private uint correct_;
    /// <summary>
    /// Total number of correct classifications across all classes for this
    /// training run
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Correct {
      get { return correct_; }
      set {
        correct_ = value;
      }
    }

    /// <summary>Field number for the "incorrect" field.</summary>
    public const int IncorrectFieldNumber = 3;
    private uint incorrect_;
    /// <summary>
    /// Total number of incorrect classifications across all classes for this
    /// training run
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Incorrect {
      get { return incorrect_; }
      set {
        incorrect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!errors_.Equals(other.errors_)) return false;
      if (Correct != other.Correct) return false;
      if (Incorrect != other.Incorrect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= errors_.GetHashCode();
      if (Correct != 0) hash ^= Correct.GetHashCode();
      if (Incorrect != 0) hash ^= Incorrect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      errors_.WriteTo(output, _repeated_errors_codec);
      if (Correct != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Correct);
      }
      if (Incorrect != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Incorrect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (Correct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Correct);
      }
      if (Incorrect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Incorrect);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      errors_.Add(other.errors_);
      if (other.Correct != 0) {
        Correct = other.Correct;
      }
      if (other.Incorrect != 0) {
        Incorrect = other.Incorrect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
          case 16: {
            Correct = input.ReadUInt32();
            break;
          }
          case 24: {
            Incorrect = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
